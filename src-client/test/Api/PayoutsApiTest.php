<?php
/**
 * PayoutsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Nofrixion\Client\Test\Api;

use \Nofrixion\Client\Configuration;
use \Nofrixion\Client\ApiException;
use \Nofrixion\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * PayoutsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PayoutsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for cancelScheduledPayout
     *
     * Attempts to cancel a scheduled payout..
     *
     */
    public function testCancelScheduledPayout()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createBatchPayout
     *
     * Creates a new batch payout..
     *
     */
    public function testCreateBatchPayout()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createPayout
     *
     * Creates a new payout..
     *
     */
    public function testCreatePayout()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createPayouts
     *
     * Creates payouts..
     *
     */
    public function testCreatePayouts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deletePayout
     *
     * Deletes a payout record..
     *
     */
    public function testDeletePayout()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deletePayouts
     *
     * Deletes a list of payout records..
     *
     */
    public function testDeletePayouts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getBatchPayout
     *
     * Gets a list of all the payouts contained in a batch..
     *
     */
    public function testGetBatchPayout()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPayout
     *
     * Gets a single payout..
     *
     */
    public function testGetPayout()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPayoutForInvoice
     *
     * Gets a payout by its invoice ID..
     *
     */
    public function testGetPayoutForInvoice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPayoutMetrics
     *
     * Gets a list of all payout metrics for a specific merchant..
     *
     */
    public function testGetPayoutMetrics()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPayoutProof
     *
     * Generates a proof of payment PDF document with the details of a payout..
     *
     */
    public function testGetPayoutProof()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPayoutStatus
     *
     * Gets a single payout status from..
     *
     */
    public function testGetPayoutStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPayoutsPaged
     *
     * Gets a list of all payouts for a specific merchant..
     *
     */
    public function testGetPayoutsPaged()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for rejectPayout
     *
     * Rejects the authorisation for a payout..
     *
     */
    public function testRejectPayout()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sendPayout
     *
     * Creates and submits a payout for a trusted caller..
     *
     */
    public function testSendPayout()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sendToBeneficiary
     *
     * Creates and submits a payout to a pre-authorised beneficiary..
     *
     */
    public function testSendToBeneficiary()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for submitBatchPayout
     *
     * Submits a batch payout for processing..
     *
     */
    public function testSubmitBatchPayout()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for submitPayout
     *
     * Submits a payout for processing..
     *
     */
    public function testSubmitPayout()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updatePayout
     *
     * Updates a payout record..
     *
     */
    public function testUpdatePayout()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
