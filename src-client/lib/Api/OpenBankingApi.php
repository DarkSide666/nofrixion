<?php
/**
 * OpenBankingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Nofrixion\Client\ApiException;
use Nofrixion\Client\Configuration;
use Nofrixion\Client\HeaderSelector;
use Nofrixion\Client\ObjectSerializer;

/**
 * OpenBankingApi Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OpenBankingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV1OpenbankingAccountAccountIDDelete' => [
            'application/json',
        ],
        'apiV1OpenbankingAccountAccountIDSynchronisePost' => [
            'application/json',
        ],
        'apiV1OpenbankingAccountsConsentIDGet' => [
            'application/json',
        ],
        'apiV1OpenbankingConsentsConsentIDDelete' => [
            'application/json',
        ],
        'apiV1OpenbankingConsentsConsentIDGet' => [
            'application/json',
        ],
        'apiV1OpenbankingConsentsConsentIDPatch' => [
            'application/json',
        ],
        'apiV1OpenbankingConsentsMerchantIDEmailDelete' => [
            'application/json',
        ],
        'apiV1OpenbankingConsentsMerchantIDEmailGet' => [
            'application/json',
        ],
        'apiV1OpenbankingConsentsPost' => [
            'application/json',
        ],
        'apiV1OpenbankingTransactionsConsentIDAccountIDGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV1OpenbankingAccountAccountIDDelete
     *
     * Deletes the specified connected account and all associated transactions.
     *
     * @param  string $account_id The ID of the connected account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingAccountAccountIDDelete'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1OpenbankingAccountAccountIDDelete($account_id, string $contentType = self::contentTypes['apiV1OpenbankingAccountAccountIDDelete'][0])
    {
        $this->apiV1OpenbankingAccountAccountIDDeleteWithHttpInfo($account_id, $contentType);
    }

    /**
     * Operation apiV1OpenbankingAccountAccountIDDeleteWithHttpInfo
     *
     * Deletes the specified connected account and all associated transactions.
     *
     * @param  string $account_id The ID of the connected account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingAccountAccountIDDelete'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1OpenbankingAccountAccountIDDeleteWithHttpInfo($account_id, string $contentType = self::contentTypes['apiV1OpenbankingAccountAccountIDDelete'][0])
    {
        $request = $this->apiV1OpenbankingAccountAccountIDDeleteRequest($account_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1OpenbankingAccountAccountIDDeleteAsync
     *
     * Deletes the specified connected account and all associated transactions.
     *
     * @param  string $account_id The ID of the connected account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingAccountAccountIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1OpenbankingAccountAccountIDDeleteAsync($account_id, string $contentType = self::contentTypes['apiV1OpenbankingAccountAccountIDDelete'][0])
    {
        return $this->apiV1OpenbankingAccountAccountIDDeleteAsyncWithHttpInfo($account_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1OpenbankingAccountAccountIDDeleteAsyncWithHttpInfo
     *
     * Deletes the specified connected account and all associated transactions.
     *
     * @param  string $account_id The ID of the connected account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingAccountAccountIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1OpenbankingAccountAccountIDDeleteAsyncWithHttpInfo($account_id, string $contentType = self::contentTypes['apiV1OpenbankingAccountAccountIDDelete'][0])
    {
        $returnType = '';
        $request = $this->apiV1OpenbankingAccountAccountIDDeleteRequest($account_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1OpenbankingAccountAccountIDDelete'
     *
     * @param  string $account_id The ID of the connected account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingAccountAccountIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1OpenbankingAccountAccountIDDeleteRequest($account_id, string $contentType = self::contentTypes['apiV1OpenbankingAccountAccountIDDelete'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling apiV1OpenbankingAccountAccountIDDelete'
            );
        }


        $resourcePath = '/api/v1/openbanking/account/{accountID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1OpenbankingAccountAccountIDSynchronisePost
     *
     * Attempts to synchronise the balance and transactions of a connected account.
     *
     * @param  string $account_id The ID of the connected account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingAccountAccountIDSynchronisePost'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1OpenbankingAccountAccountIDSynchronisePost($account_id, string $contentType = self::contentTypes['apiV1OpenbankingAccountAccountIDSynchronisePost'][0])
    {
        $this->apiV1OpenbankingAccountAccountIDSynchronisePostWithHttpInfo($account_id, $contentType);
    }

    /**
     * Operation apiV1OpenbankingAccountAccountIDSynchronisePostWithHttpInfo
     *
     * Attempts to synchronise the balance and transactions of a connected account.
     *
     * @param  string $account_id The ID of the connected account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingAccountAccountIDSynchronisePost'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1OpenbankingAccountAccountIDSynchronisePostWithHttpInfo($account_id, string $contentType = self::contentTypes['apiV1OpenbankingAccountAccountIDSynchronisePost'][0])
    {
        $request = $this->apiV1OpenbankingAccountAccountIDSynchronisePostRequest($account_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1OpenbankingAccountAccountIDSynchronisePostAsync
     *
     * Attempts to synchronise the balance and transactions of a connected account.
     *
     * @param  string $account_id The ID of the connected account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingAccountAccountIDSynchronisePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1OpenbankingAccountAccountIDSynchronisePostAsync($account_id, string $contentType = self::contentTypes['apiV1OpenbankingAccountAccountIDSynchronisePost'][0])
    {
        return $this->apiV1OpenbankingAccountAccountIDSynchronisePostAsyncWithHttpInfo($account_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1OpenbankingAccountAccountIDSynchronisePostAsyncWithHttpInfo
     *
     * Attempts to synchronise the balance and transactions of a connected account.
     *
     * @param  string $account_id The ID of the connected account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingAccountAccountIDSynchronisePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1OpenbankingAccountAccountIDSynchronisePostAsyncWithHttpInfo($account_id, string $contentType = self::contentTypes['apiV1OpenbankingAccountAccountIDSynchronisePost'][0])
    {
        $returnType = '';
        $request = $this->apiV1OpenbankingAccountAccountIDSynchronisePostRequest($account_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1OpenbankingAccountAccountIDSynchronisePost'
     *
     * @param  string $account_id The ID of the connected account. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingAccountAccountIDSynchronisePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1OpenbankingAccountAccountIDSynchronisePostRequest($account_id, string $contentType = self::contentTypes['apiV1OpenbankingAccountAccountIDSynchronisePost'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling apiV1OpenbankingAccountAccountIDSynchronisePost'
            );
        }


        $resourcePath = '/api/v1/openbanking/account/{accountID}/synchronise';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1OpenbankingAccountsConsentIDGet
     *
     * Retrieves list of accounts from financial institution.
     *
     * @param  string $consent_id The ConsentTokenID is the reference id to the token. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingAccountsConsentIDGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAccount[]
     */
    public function apiV1OpenbankingAccountsConsentIDGet($consent_id, string $contentType = self::contentTypes['apiV1OpenbankingAccountsConsentIDGet'][0])
    {
        list($response) = $this->apiV1OpenbankingAccountsConsentIDGetWithHttpInfo($consent_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1OpenbankingAccountsConsentIDGetWithHttpInfo
     *
     * Retrieves list of accounts from financial institution.
     *
     * @param  string $consent_id The ConsentTokenID is the reference id to the token. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingAccountsConsentIDGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAccount[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1OpenbankingAccountsConsentIDGetWithHttpInfo($consent_id, string $contentType = self::contentTypes['apiV1OpenbankingAccountsConsentIDGet'][0])
    {
        $request = $this->apiV1OpenbankingAccountsConsentIDGetRequest($consent_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAccount[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAccount[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAccount[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAccount[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAccount[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1OpenbankingAccountsConsentIDGetAsync
     *
     * Retrieves list of accounts from financial institution.
     *
     * @param  string $consent_id The ConsentTokenID is the reference id to the token. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingAccountsConsentIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1OpenbankingAccountsConsentIDGetAsync($consent_id, string $contentType = self::contentTypes['apiV1OpenbankingAccountsConsentIDGet'][0])
    {
        return $this->apiV1OpenbankingAccountsConsentIDGetAsyncWithHttpInfo($consent_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1OpenbankingAccountsConsentIDGetAsyncWithHttpInfo
     *
     * Retrieves list of accounts from financial institution.
     *
     * @param  string $consent_id The ConsentTokenID is the reference id to the token. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingAccountsConsentIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1OpenbankingAccountsConsentIDGetAsyncWithHttpInfo($consent_id, string $contentType = self::contentTypes['apiV1OpenbankingAccountsConsentIDGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAccount[]';
        $request = $this->apiV1OpenbankingAccountsConsentIDGetRequest($consent_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1OpenbankingAccountsConsentIDGet'
     *
     * @param  string $consent_id The ConsentTokenID is the reference id to the token. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingAccountsConsentIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1OpenbankingAccountsConsentIDGetRequest($consent_id, string $contentType = self::contentTypes['apiV1OpenbankingAccountsConsentIDGet'][0])
    {

        // verify the required parameter 'consent_id' is set
        if ($consent_id === null || (is_array($consent_id) && count($consent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consent_id when calling apiV1OpenbankingAccountsConsentIDGet'
            );
        }


        $resourcePath = '/api/v1/openbanking/accounts/{consentID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($consent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'consentID' . '}',
                ObjectSerializer::toPathValue($consent_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1OpenbankingConsentsConsentIDDelete
     *
     * Deletes a single open banking consent.
     *
     * @param  string $consent_id The ID of the consent to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsConsentIDDelete'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent
     */
    public function apiV1OpenbankingConsentsConsentIDDelete($consent_id, string $contentType = self::contentTypes['apiV1OpenbankingConsentsConsentIDDelete'][0])
    {
        list($response) = $this->apiV1OpenbankingConsentsConsentIDDeleteWithHttpInfo($consent_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1OpenbankingConsentsConsentIDDeleteWithHttpInfo
     *
     * Deletes a single open banking consent.
     *
     * @param  string $consent_id The ID of the consent to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsConsentIDDelete'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1OpenbankingConsentsConsentIDDeleteWithHttpInfo($consent_id, string $contentType = self::contentTypes['apiV1OpenbankingConsentsConsentIDDelete'][0])
    {
        $request = $this->apiV1OpenbankingConsentsConsentIDDeleteRequest($consent_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1OpenbankingConsentsConsentIDDeleteAsync
     *
     * Deletes a single open banking consent.
     *
     * @param  string $consent_id The ID of the consent to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsConsentIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1OpenbankingConsentsConsentIDDeleteAsync($consent_id, string $contentType = self::contentTypes['apiV1OpenbankingConsentsConsentIDDelete'][0])
    {
        return $this->apiV1OpenbankingConsentsConsentIDDeleteAsyncWithHttpInfo($consent_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1OpenbankingConsentsConsentIDDeleteAsyncWithHttpInfo
     *
     * Deletes a single open banking consent.
     *
     * @param  string $consent_id The ID of the consent to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsConsentIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1OpenbankingConsentsConsentIDDeleteAsyncWithHttpInfo($consent_id, string $contentType = self::contentTypes['apiV1OpenbankingConsentsConsentIDDelete'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent';
        $request = $this->apiV1OpenbankingConsentsConsentIDDeleteRequest($consent_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1OpenbankingConsentsConsentIDDelete'
     *
     * @param  string $consent_id The ID of the consent to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsConsentIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1OpenbankingConsentsConsentIDDeleteRequest($consent_id, string $contentType = self::contentTypes['apiV1OpenbankingConsentsConsentIDDelete'][0])
    {

        // verify the required parameter 'consent_id' is set
        if ($consent_id === null || (is_array($consent_id) && count($consent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consent_id when calling apiV1OpenbankingConsentsConsentIDDelete'
            );
        }


        $resourcePath = '/api/v1/openbanking/consents/{consentID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($consent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'consentID' . '}',
                ObjectSerializer::toPathValue($consent_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1OpenbankingConsentsConsentIDGet
     *
     * Retrieve a single open banking consent.
     *
     * @param  string $consent_id The ID of the consent to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsConsentIDGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent
     */
    public function apiV1OpenbankingConsentsConsentIDGet($consent_id, string $contentType = self::contentTypes['apiV1OpenbankingConsentsConsentIDGet'][0])
    {
        list($response) = $this->apiV1OpenbankingConsentsConsentIDGetWithHttpInfo($consent_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1OpenbankingConsentsConsentIDGetWithHttpInfo
     *
     * Retrieve a single open banking consent.
     *
     * @param  string $consent_id The ID of the consent to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsConsentIDGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1OpenbankingConsentsConsentIDGetWithHttpInfo($consent_id, string $contentType = self::contentTypes['apiV1OpenbankingConsentsConsentIDGet'][0])
    {
        $request = $this->apiV1OpenbankingConsentsConsentIDGetRequest($consent_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1OpenbankingConsentsConsentIDGetAsync
     *
     * Retrieve a single open banking consent.
     *
     * @param  string $consent_id The ID of the consent to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsConsentIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1OpenbankingConsentsConsentIDGetAsync($consent_id, string $contentType = self::contentTypes['apiV1OpenbankingConsentsConsentIDGet'][0])
    {
        return $this->apiV1OpenbankingConsentsConsentIDGetAsyncWithHttpInfo($consent_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1OpenbankingConsentsConsentIDGetAsyncWithHttpInfo
     *
     * Retrieve a single open banking consent.
     *
     * @param  string $consent_id The ID of the consent to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsConsentIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1OpenbankingConsentsConsentIDGetAsyncWithHttpInfo($consent_id, string $contentType = self::contentTypes['apiV1OpenbankingConsentsConsentIDGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent';
        $request = $this->apiV1OpenbankingConsentsConsentIDGetRequest($consent_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1OpenbankingConsentsConsentIDGet'
     *
     * @param  string $consent_id The ID of the consent to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsConsentIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1OpenbankingConsentsConsentIDGetRequest($consent_id, string $contentType = self::contentTypes['apiV1OpenbankingConsentsConsentIDGet'][0])
    {

        // verify the required parameter 'consent_id' is set
        if ($consent_id === null || (is_array($consent_id) && count($consent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consent_id when calling apiV1OpenbankingConsentsConsentIDGet'
            );
        }


        $resourcePath = '/api/v1/openbanking/consents/{consentID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($consent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'consentID' . '}',
                ObjectSerializer::toPathValue($consent_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1OpenbankingConsentsConsentIDPatch
     *
     * Creates a new authorisation to a financial institution based on a consent that has   already been authorised.
     *
     * @param  string $consent_id The ID of the consent to base the new authorisation on. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsConsentIDPatch'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsentResponse
     */
    public function apiV1OpenbankingConsentsConsentIDPatch($consent_id, string $contentType = self::contentTypes['apiV1OpenbankingConsentsConsentIDPatch'][0])
    {
        list($response) = $this->apiV1OpenbankingConsentsConsentIDPatchWithHttpInfo($consent_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1OpenbankingConsentsConsentIDPatchWithHttpInfo
     *
     * Creates a new authorisation to a financial institution based on a consent that has   already been authorised.
     *
     * @param  string $consent_id The ID of the consent to base the new authorisation on. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsConsentIDPatch'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1OpenbankingConsentsConsentIDPatchWithHttpInfo($consent_id, string $contentType = self::contentTypes['apiV1OpenbankingConsentsConsentIDPatch'][0])
    {
        $request = $this->apiV1OpenbankingConsentsConsentIDPatchRequest($consent_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1OpenbankingConsentsConsentIDPatchAsync
     *
     * Creates a new authorisation to a financial institution based on a consent that has   already been authorised.
     *
     * @param  string $consent_id The ID of the consent to base the new authorisation on. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsConsentIDPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1OpenbankingConsentsConsentIDPatchAsync($consent_id, string $contentType = self::contentTypes['apiV1OpenbankingConsentsConsentIDPatch'][0])
    {
        return $this->apiV1OpenbankingConsentsConsentIDPatchAsyncWithHttpInfo($consent_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1OpenbankingConsentsConsentIDPatchAsyncWithHttpInfo
     *
     * Creates a new authorisation to a financial institution based on a consent that has   already been authorised.
     *
     * @param  string $consent_id The ID of the consent to base the new authorisation on. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsConsentIDPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1OpenbankingConsentsConsentIDPatchAsyncWithHttpInfo($consent_id, string $contentType = self::contentTypes['apiV1OpenbankingConsentsConsentIDPatch'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsentResponse';
        $request = $this->apiV1OpenbankingConsentsConsentIDPatchRequest($consent_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1OpenbankingConsentsConsentIDPatch'
     *
     * @param  string $consent_id The ID of the consent to base the new authorisation on. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsConsentIDPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1OpenbankingConsentsConsentIDPatchRequest($consent_id, string $contentType = self::contentTypes['apiV1OpenbankingConsentsConsentIDPatch'][0])
    {

        // verify the required parameter 'consent_id' is set
        if ($consent_id === null || (is_array($consent_id) && count($consent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consent_id when calling apiV1OpenbankingConsentsConsentIDPatch'
            );
        }


        $resourcePath = '/api/v1/openbanking/consents/{consentID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($consent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'consentID' . '}',
                ObjectSerializer::toPathValue($consent_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1OpenbankingConsentsMerchantIDEmailDelete
     *
     * Delete all the open banking consents for a single user.
     *
     * @param  string $merchant_id The ID of the merchant to delete the consents for. (required)
     * @param  string $email The email address of the end user to delete the consents for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsMerchantIDEmailDelete'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1OpenbankingConsentsMerchantIDEmailDelete($merchant_id, $email, string $contentType = self::contentTypes['apiV1OpenbankingConsentsMerchantIDEmailDelete'][0])
    {
        $this->apiV1OpenbankingConsentsMerchantIDEmailDeleteWithHttpInfo($merchant_id, $email, $contentType);
    }

    /**
     * Operation apiV1OpenbankingConsentsMerchantIDEmailDeleteWithHttpInfo
     *
     * Delete all the open banking consents for a single user.
     *
     * @param  string $merchant_id The ID of the merchant to delete the consents for. (required)
     * @param  string $email The email address of the end user to delete the consents for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsMerchantIDEmailDelete'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1OpenbankingConsentsMerchantIDEmailDeleteWithHttpInfo($merchant_id, $email, string $contentType = self::contentTypes['apiV1OpenbankingConsentsMerchantIDEmailDelete'][0])
    {
        $request = $this->apiV1OpenbankingConsentsMerchantIDEmailDeleteRequest($merchant_id, $email, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1OpenbankingConsentsMerchantIDEmailDeleteAsync
     *
     * Delete all the open banking consents for a single user.
     *
     * @param  string $merchant_id The ID of the merchant to delete the consents for. (required)
     * @param  string $email The email address of the end user to delete the consents for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsMerchantIDEmailDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1OpenbankingConsentsMerchantIDEmailDeleteAsync($merchant_id, $email, string $contentType = self::contentTypes['apiV1OpenbankingConsentsMerchantIDEmailDelete'][0])
    {
        return $this->apiV1OpenbankingConsentsMerchantIDEmailDeleteAsyncWithHttpInfo($merchant_id, $email, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1OpenbankingConsentsMerchantIDEmailDeleteAsyncWithHttpInfo
     *
     * Delete all the open banking consents for a single user.
     *
     * @param  string $merchant_id The ID of the merchant to delete the consents for. (required)
     * @param  string $email The email address of the end user to delete the consents for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsMerchantIDEmailDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1OpenbankingConsentsMerchantIDEmailDeleteAsyncWithHttpInfo($merchant_id, $email, string $contentType = self::contentTypes['apiV1OpenbankingConsentsMerchantIDEmailDelete'][0])
    {
        $returnType = '';
        $request = $this->apiV1OpenbankingConsentsMerchantIDEmailDeleteRequest($merchant_id, $email, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1OpenbankingConsentsMerchantIDEmailDelete'
     *
     * @param  string $merchant_id The ID of the merchant to delete the consents for. (required)
     * @param  string $email The email address of the end user to delete the consents for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsMerchantIDEmailDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1OpenbankingConsentsMerchantIDEmailDeleteRequest($merchant_id, $email, string $contentType = self::contentTypes['apiV1OpenbankingConsentsMerchantIDEmailDelete'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling apiV1OpenbankingConsentsMerchantIDEmailDelete'
            );
        }

        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling apiV1OpenbankingConsentsMerchantIDEmailDelete'
            );
        }


        $resourcePath = '/api/v1/openbanking/consents/{merchantID}/{email}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantID' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }
        // path params
        if ($email !== null) {
            $resourcePath = str_replace(
                '{' . 'email' . '}',
                ObjectSerializer::toPathValue($email),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1OpenbankingConsentsMerchantIDEmailGet
     *
     * Retrieve all the open banking consents for a single user.
     *
     * @param  string $merchant_id The ID of the merchant to get the consents for. (required)
     * @param  string $email The email address of the end user to get the consents for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsMerchantIDEmailGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent[]
     */
    public function apiV1OpenbankingConsentsMerchantIDEmailGet($merchant_id, $email, string $contentType = self::contentTypes['apiV1OpenbankingConsentsMerchantIDEmailGet'][0])
    {
        list($response) = $this->apiV1OpenbankingConsentsMerchantIDEmailGetWithHttpInfo($merchant_id, $email, $contentType);
        return $response;
    }

    /**
     * Operation apiV1OpenbankingConsentsMerchantIDEmailGetWithHttpInfo
     *
     * Retrieve all the open banking consents for a single user.
     *
     * @param  string $merchant_id The ID of the merchant to get the consents for. (required)
     * @param  string $email The email address of the end user to get the consents for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsMerchantIDEmailGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1OpenbankingConsentsMerchantIDEmailGetWithHttpInfo($merchant_id, $email, string $contentType = self::contentTypes['apiV1OpenbankingConsentsMerchantIDEmailGet'][0])
    {
        $request = $this->apiV1OpenbankingConsentsMerchantIDEmailGetRequest($merchant_id, $email, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1OpenbankingConsentsMerchantIDEmailGetAsync
     *
     * Retrieve all the open banking consents for a single user.
     *
     * @param  string $merchant_id The ID of the merchant to get the consents for. (required)
     * @param  string $email The email address of the end user to get the consents for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsMerchantIDEmailGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1OpenbankingConsentsMerchantIDEmailGetAsync($merchant_id, $email, string $contentType = self::contentTypes['apiV1OpenbankingConsentsMerchantIDEmailGet'][0])
    {
        return $this->apiV1OpenbankingConsentsMerchantIDEmailGetAsyncWithHttpInfo($merchant_id, $email, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1OpenbankingConsentsMerchantIDEmailGetAsyncWithHttpInfo
     *
     * Retrieve all the open banking consents for a single user.
     *
     * @param  string $merchant_id The ID of the merchant to get the consents for. (required)
     * @param  string $email The email address of the end user to get the consents for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsMerchantIDEmailGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1OpenbankingConsentsMerchantIDEmailGetAsyncWithHttpInfo($merchant_id, $email, string $contentType = self::contentTypes['apiV1OpenbankingConsentsMerchantIDEmailGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsent[]';
        $request = $this->apiV1OpenbankingConsentsMerchantIDEmailGetRequest($merchant_id, $email, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1OpenbankingConsentsMerchantIDEmailGet'
     *
     * @param  string $merchant_id The ID of the merchant to get the consents for. (required)
     * @param  string $email The email address of the end user to get the consents for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsMerchantIDEmailGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1OpenbankingConsentsMerchantIDEmailGetRequest($merchant_id, $email, string $contentType = self::contentTypes['apiV1OpenbankingConsentsMerchantIDEmailGet'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling apiV1OpenbankingConsentsMerchantIDEmailGet'
            );
        }

        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling apiV1OpenbankingConsentsMerchantIDEmailGet'
            );
        }


        $resourcePath = '/api/v1/openbanking/consents/{merchantID}/{email}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantID' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }
        // path params
        if ($email !== null) {
            $resourcePath = str_replace(
                '{' . 'email' . '}',
                ObjectSerializer::toPathValue($email),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1OpenbankingConsentsPost
     *
     * Creates a consent thats used to initiate an authorisation to a financial institution.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsentRequest $no_frixion_money_moov_models_open_banking_consent_request The fields required to request a new consent. The email address must belong              to the user who will be authorising the consent. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsPost'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsentResponse
     */
    public function apiV1OpenbankingConsentsPost($no_frixion_money_moov_models_open_banking_consent_request = null, string $contentType = self::contentTypes['apiV1OpenbankingConsentsPost'][0])
    {
        list($response) = $this->apiV1OpenbankingConsentsPostWithHttpInfo($no_frixion_money_moov_models_open_banking_consent_request, $contentType);
        return $response;
    }

    /**
     * Operation apiV1OpenbankingConsentsPostWithHttpInfo
     *
     * Creates a consent thats used to initiate an authorisation to a financial institution.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsentRequest $no_frixion_money_moov_models_open_banking_consent_request The fields required to request a new consent. The email address must belong              to the user who will be authorising the consent. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsPost'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1OpenbankingConsentsPostWithHttpInfo($no_frixion_money_moov_models_open_banking_consent_request = null, string $contentType = self::contentTypes['apiV1OpenbankingConsentsPost'][0])
    {
        $request = $this->apiV1OpenbankingConsentsPostRequest($no_frixion_money_moov_models_open_banking_consent_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1OpenbankingConsentsPostAsync
     *
     * Creates a consent thats used to initiate an authorisation to a financial institution.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsentRequest $no_frixion_money_moov_models_open_banking_consent_request The fields required to request a new consent. The email address must belong              to the user who will be authorising the consent. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1OpenbankingConsentsPostAsync($no_frixion_money_moov_models_open_banking_consent_request = null, string $contentType = self::contentTypes['apiV1OpenbankingConsentsPost'][0])
    {
        return $this->apiV1OpenbankingConsentsPostAsyncWithHttpInfo($no_frixion_money_moov_models_open_banking_consent_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1OpenbankingConsentsPostAsyncWithHttpInfo
     *
     * Creates a consent thats used to initiate an authorisation to a financial institution.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsentRequest $no_frixion_money_moov_models_open_banking_consent_request The fields required to request a new consent. The email address must belong              to the user who will be authorising the consent. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1OpenbankingConsentsPostAsyncWithHttpInfo($no_frixion_money_moov_models_open_banking_consent_request = null, string $contentType = self::contentTypes['apiV1OpenbankingConsentsPost'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsentResponse';
        $request = $this->apiV1OpenbankingConsentsPostRequest($no_frixion_money_moov_models_open_banking_consent_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1OpenbankingConsentsPost'
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsentRequest $no_frixion_money_moov_models_open_banking_consent_request The fields required to request a new consent. The email address must belong              to the user who will be authorising the consent. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingConsentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1OpenbankingConsentsPostRequest($no_frixion_money_moov_models_open_banking_consent_request = null, string $contentType = self::contentTypes['apiV1OpenbankingConsentsPost'][0])
    {



        $resourcePath = '/api/v1/openbanking/consents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($no_frixion_money_moov_models_open_banking_consent_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($no_frixion_money_moov_models_open_banking_consent_request));
            } else {
                $httpBody = $no_frixion_money_moov_models_open_banking_consent_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1OpenbankingTransactionsConsentIDAccountIDGet
     *
     * Retrieves transactions from financial institution.
     *
     * @param  string $consent_id The ConsentTokenID is the reference id to the token. (required)
     * @param  string $account_id The id of the account where transactions are retrieved. (required)
     * @param  int $offset Optional, offset the transactions by offset number. (optional)
     * @param  int $limit Optional, limit per amount of transactions. (optional)
     * @param  \DateTime $transaction_from Optional, the date filter to apply to retrieve transactions created after this date. (optional)
     * @param  \DateTime $transaction_to Optional, the date filter to apply to retrieve transactions created up until this date. (optional)
     * @param  bool $sort_inserted_ascending Default sort order is inserted descending (latest first). Set to true to sort by               inserted ascending (earliest first). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingTransactionsConsentIDAccountIDGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingTransaction[]
     */
    public function apiV1OpenbankingTransactionsConsentIDAccountIDGet($consent_id, $account_id, $offset = null, $limit = null, $transaction_from = null, $transaction_to = null, $sort_inserted_ascending = null, string $contentType = self::contentTypes['apiV1OpenbankingTransactionsConsentIDAccountIDGet'][0])
    {
        list($response) = $this->apiV1OpenbankingTransactionsConsentIDAccountIDGetWithHttpInfo($consent_id, $account_id, $offset, $limit, $transaction_from, $transaction_to, $sort_inserted_ascending, $contentType);
        return $response;
    }

    /**
     * Operation apiV1OpenbankingTransactionsConsentIDAccountIDGetWithHttpInfo
     *
     * Retrieves transactions from financial institution.
     *
     * @param  string $consent_id The ConsentTokenID is the reference id to the token. (required)
     * @param  string $account_id The id of the account where transactions are retrieved. (required)
     * @param  int $offset Optional, offset the transactions by offset number. (optional)
     * @param  int $limit Optional, limit per amount of transactions. (optional)
     * @param  \DateTime $transaction_from Optional, the date filter to apply to retrieve transactions created after this date. (optional)
     * @param  \DateTime $transaction_to Optional, the date filter to apply to retrieve transactions created up until this date. (optional)
     * @param  bool $sort_inserted_ascending Default sort order is inserted descending (latest first). Set to true to sort by               inserted ascending (earliest first). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingTransactionsConsentIDAccountIDGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingTransaction[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1OpenbankingTransactionsConsentIDAccountIDGetWithHttpInfo($consent_id, $account_id, $offset = null, $limit = null, $transaction_from = null, $transaction_to = null, $sort_inserted_ascending = null, string $contentType = self::contentTypes['apiV1OpenbankingTransactionsConsentIDAccountIDGet'][0])
    {
        $request = $this->apiV1OpenbankingTransactionsConsentIDAccountIDGetRequest($consent_id, $account_id, $offset, $limit, $transaction_from, $transaction_to, $sort_inserted_ascending, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingTransaction[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingTransaction[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingTransaction[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingTransaction[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingTransaction[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1OpenbankingTransactionsConsentIDAccountIDGetAsync
     *
     * Retrieves transactions from financial institution.
     *
     * @param  string $consent_id The ConsentTokenID is the reference id to the token. (required)
     * @param  string $account_id The id of the account where transactions are retrieved. (required)
     * @param  int $offset Optional, offset the transactions by offset number. (optional)
     * @param  int $limit Optional, limit per amount of transactions. (optional)
     * @param  \DateTime $transaction_from Optional, the date filter to apply to retrieve transactions created after this date. (optional)
     * @param  \DateTime $transaction_to Optional, the date filter to apply to retrieve transactions created up until this date. (optional)
     * @param  bool $sort_inserted_ascending Default sort order is inserted descending (latest first). Set to true to sort by               inserted ascending (earliest first). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingTransactionsConsentIDAccountIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1OpenbankingTransactionsConsentIDAccountIDGetAsync($consent_id, $account_id, $offset = null, $limit = null, $transaction_from = null, $transaction_to = null, $sort_inserted_ascending = null, string $contentType = self::contentTypes['apiV1OpenbankingTransactionsConsentIDAccountIDGet'][0])
    {
        return $this->apiV1OpenbankingTransactionsConsentIDAccountIDGetAsyncWithHttpInfo($consent_id, $account_id, $offset, $limit, $transaction_from, $transaction_to, $sort_inserted_ascending, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1OpenbankingTransactionsConsentIDAccountIDGetAsyncWithHttpInfo
     *
     * Retrieves transactions from financial institution.
     *
     * @param  string $consent_id The ConsentTokenID is the reference id to the token. (required)
     * @param  string $account_id The id of the account where transactions are retrieved. (required)
     * @param  int $offset Optional, offset the transactions by offset number. (optional)
     * @param  int $limit Optional, limit per amount of transactions. (optional)
     * @param  \DateTime $transaction_from Optional, the date filter to apply to retrieve transactions created after this date. (optional)
     * @param  \DateTime $transaction_to Optional, the date filter to apply to retrieve transactions created up until this date. (optional)
     * @param  bool $sort_inserted_ascending Default sort order is inserted descending (latest first). Set to true to sort by               inserted ascending (earliest first). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingTransactionsConsentIDAccountIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1OpenbankingTransactionsConsentIDAccountIDGetAsyncWithHttpInfo($consent_id, $account_id, $offset = null, $limit = null, $transaction_from = null, $transaction_to = null, $sort_inserted_ascending = null, string $contentType = self::contentTypes['apiV1OpenbankingTransactionsConsentIDAccountIDGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingTransaction[]';
        $request = $this->apiV1OpenbankingTransactionsConsentIDAccountIDGetRequest($consent_id, $account_id, $offset, $limit, $transaction_from, $transaction_to, $sort_inserted_ascending, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1OpenbankingTransactionsConsentIDAccountIDGet'
     *
     * @param  string $consent_id The ConsentTokenID is the reference id to the token. (required)
     * @param  string $account_id The id of the account where transactions are retrieved. (required)
     * @param  int $offset Optional, offset the transactions by offset number. (optional)
     * @param  int $limit Optional, limit per amount of transactions. (optional)
     * @param  \DateTime $transaction_from Optional, the date filter to apply to retrieve transactions created after this date. (optional)
     * @param  \DateTime $transaction_to Optional, the date filter to apply to retrieve transactions created up until this date. (optional)
     * @param  bool $sort_inserted_ascending Default sort order is inserted descending (latest first). Set to true to sort by               inserted ascending (earliest first). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1OpenbankingTransactionsConsentIDAccountIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1OpenbankingTransactionsConsentIDAccountIDGetRequest($consent_id, $account_id, $offset = null, $limit = null, $transaction_from = null, $transaction_to = null, $sort_inserted_ascending = null, string $contentType = self::contentTypes['apiV1OpenbankingTransactionsConsentIDAccountIDGet'][0])
    {

        // verify the required parameter 'consent_id' is set
        if ($consent_id === null || (is_array($consent_id) && count($consent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consent_id when calling apiV1OpenbankingTransactionsConsentIDAccountIDGet'
            );
        }

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling apiV1OpenbankingTransactionsConsentIDAccountIDGet'
            );
        }







        $resourcePath = '/api/v1/openbanking/transactions/{consentID}/{accountID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_from,
            'transactionFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_to,
            'transactionTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_inserted_ascending,
            'sortInsertedAscending', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($consent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'consentID' . '}',
                ObjectSerializer::toPathValue($consent_id),
                $resourcePath
            );
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
