<?php
/**
 * MerchantsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Nofrixion\Client\ApiException;
use Nofrixion\Client\Configuration;
use Nofrixion\Client\HeaderSelector;
use Nofrixion\Client\ObjectSerializer;

/**
 * MerchantsApi Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MerchantsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV1MerchantsGet' => [
            'application/json',
        ],
        'apiV1MerchantsMerchantIDAccountsAccountIDGet' => [
            'application/json',
        ],
        'apiV1MerchantsMerchantIDAccountsGet' => [
            'application/json',
        ],
        'apiV1MerchantsMerchantIDBanksettingsGet' => [
            'application/json',
        ],
        'apiV1MerchantsMerchantIDBeneficiariesGet' => [
            'application/json',
        ],
        'apiV1MerchantsMerchantIDBeneficiariesIdGet' => [
            'application/json',
        ],
        'apiV1MerchantsMerchantIDBeneficiarygroupsGet' => [
            'application/json',
        ],
        'apiV1MerchantsMerchantIDGet' => [
            'application/json',
        ],
        'apiV1MerchantsMerchantIDPayoutsGet' => [
            'application/json',
        ],
        'apiV1MerchantsMerchantIDTagsGet' => [
            'application/json',
        ],
        'apiV1MerchantsMerchantIDTagsPost' => [
            'application/json',
        ],
        'apiV1MerchantsMerchantIDTagsTagIDDelete' => [
            'application/json',
        ],
        'apiV1MerchantsMerchantIDTokensGet' => [
            'application/json',
        ],
        'apiV1MerchantsMerchantIDTransactionsGet' => [
            'application/json',
        ],
        'apiV1MerchantsMerchantIDUserinvitesGet' => [
            'application/json',
        ],
        'apiV1MerchantsMerchantIDUserrolesGet' => [
            'application/json',
        ],
        'apiV1MerchantsMerchantIDUsersGet' => [
            'application/json',
        ],
        'apiV1MerchantsMerchantIDWebhooksGet' => [
            'application/json',
        ],
        'apiV1MerchantsPagedGet' => [
            'application/json',
        ],
        'apiV1MerchantsUserrolesIdDelete' => [
            'application/json',
        ],
        'apiV1MerchantsUserrolesPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV1MerchantsGet
     *
     * Get&#39;s a list of merchants the caller has access to.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchant[]
     */
    public function apiV1MerchantsGet(string $contentType = self::contentTypes['apiV1MerchantsGet'][0])
    {
        list($response) = $this->apiV1MerchantsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation apiV1MerchantsGetWithHttpInfo
     *
     * Get&#39;s a list of merchants the caller has access to.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchant[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1MerchantsGetWithHttpInfo(string $contentType = self::contentTypes['apiV1MerchantsGet'][0])
    {
        $request = $this->apiV1MerchantsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchant[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchant[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchant[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchant[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchant[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1MerchantsGetAsync
     *
     * Get&#39;s a list of merchants the caller has access to.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsGetAsync(string $contentType = self::contentTypes['apiV1MerchantsGet'][0])
    {
        return $this->apiV1MerchantsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1MerchantsGetAsyncWithHttpInfo
     *
     * Get&#39;s a list of merchants the caller has access to.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV1MerchantsGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchant[]';
        $request = $this->apiV1MerchantsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1MerchantsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1MerchantsGetRequest(string $contentType = self::contentTypes['apiV1MerchantsGet'][0])
    {


        $resourcePath = '/api/v1/merchants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1MerchantsMerchantIDAccountsAccountIDGet
     *
     * Get an account.
     *
     * @param  string $merchant_id The merchantID. (required)
     * @param  string $account_id The accountID of the account to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDAccountsAccountIDGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount
     */
    public function apiV1MerchantsMerchantIDAccountsAccountIDGet($merchant_id, $account_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDAccountsAccountIDGet'][0])
    {
        list($response) = $this->apiV1MerchantsMerchantIDAccountsAccountIDGetWithHttpInfo($merchant_id, $account_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1MerchantsMerchantIDAccountsAccountIDGetWithHttpInfo
     *
     * Get an account.
     *
     * @param  string $merchant_id The merchantID. (required)
     * @param  string $account_id The accountID of the account to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDAccountsAccountIDGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1MerchantsMerchantIDAccountsAccountIDGetWithHttpInfo($merchant_id, $account_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDAccountsAccountIDGet'][0])
    {
        $request = $this->apiV1MerchantsMerchantIDAccountsAccountIDGetRequest($merchant_id, $account_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1MerchantsMerchantIDAccountsAccountIDGetAsync
     *
     * Get an account.
     *
     * @param  string $merchant_id The merchantID. (required)
     * @param  string $account_id The accountID of the account to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDAccountsAccountIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDAccountsAccountIDGetAsync($merchant_id, $account_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDAccountsAccountIDGet'][0])
    {
        return $this->apiV1MerchantsMerchantIDAccountsAccountIDGetAsyncWithHttpInfo($merchant_id, $account_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1MerchantsMerchantIDAccountsAccountIDGetAsyncWithHttpInfo
     *
     * Get an account.
     *
     * @param  string $merchant_id The merchantID. (required)
     * @param  string $account_id The accountID of the account to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDAccountsAccountIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDAccountsAccountIDGetAsyncWithHttpInfo($merchant_id, $account_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDAccountsAccountIDGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount';
        $request = $this->apiV1MerchantsMerchantIDAccountsAccountIDGetRequest($merchant_id, $account_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1MerchantsMerchantIDAccountsAccountIDGet'
     *
     * @param  string $merchant_id The merchantID. (required)
     * @param  string $account_id The accountID of the account to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDAccountsAccountIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1MerchantsMerchantIDAccountsAccountIDGetRequest($merchant_id, $account_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDAccountsAccountIDGet'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling apiV1MerchantsMerchantIDAccountsAccountIDGet'
            );
        }

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling apiV1MerchantsMerchantIDAccountsAccountIDGet'
            );
        }


        $resourcePath = '/api/v1/merchants/{merchantID}/accounts/{accountID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantID' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1MerchantsMerchantIDAccountsGet
     *
     * Get a list of merchant&#39;s payment accounts.
     *
     * @param  string $merchant_id The ID of the merchant to get the payment accounts for. (required)
     * @param  bool $connected_accounts Optional include connected accounts along with payment accounts. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDAccountsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[]
     */
    public function apiV1MerchantsMerchantIDAccountsGet($merchant_id, $connected_accounts = false, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDAccountsGet'][0])
    {
        list($response) = $this->apiV1MerchantsMerchantIDAccountsGetWithHttpInfo($merchant_id, $connected_accounts, $contentType);
        return $response;
    }

    /**
     * Operation apiV1MerchantsMerchantIDAccountsGetWithHttpInfo
     *
     * Get a list of merchant&#39;s payment accounts.
     *
     * @param  string $merchant_id The ID of the merchant to get the payment accounts for. (required)
     * @param  bool $connected_accounts Optional include connected accounts along with payment accounts. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDAccountsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1MerchantsMerchantIDAccountsGetWithHttpInfo($merchant_id, $connected_accounts = false, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDAccountsGet'][0])
    {
        $request = $this->apiV1MerchantsMerchantIDAccountsGetRequest($merchant_id, $connected_accounts, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1MerchantsMerchantIDAccountsGetAsync
     *
     * Get a list of merchant&#39;s payment accounts.
     *
     * @param  string $merchant_id The ID of the merchant to get the payment accounts for. (required)
     * @param  bool $connected_accounts Optional include connected accounts along with payment accounts. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDAccountsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDAccountsGetAsync($merchant_id, $connected_accounts = false, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDAccountsGet'][0])
    {
        return $this->apiV1MerchantsMerchantIDAccountsGetAsyncWithHttpInfo($merchant_id, $connected_accounts, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1MerchantsMerchantIDAccountsGetAsyncWithHttpInfo
     *
     * Get a list of merchant&#39;s payment accounts.
     *
     * @param  string $merchant_id The ID of the merchant to get the payment accounts for. (required)
     * @param  bool $connected_accounts Optional include connected accounts along with payment accounts. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDAccountsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDAccountsGetAsyncWithHttpInfo($merchant_id, $connected_accounts = false, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDAccountsGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[]';
        $request = $this->apiV1MerchantsMerchantIDAccountsGetRequest($merchant_id, $connected_accounts, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1MerchantsMerchantIDAccountsGet'
     *
     * @param  string $merchant_id The ID of the merchant to get the payment accounts for. (required)
     * @param  bool $connected_accounts Optional include connected accounts along with payment accounts. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDAccountsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1MerchantsMerchantIDAccountsGetRequest($merchant_id, $connected_accounts = false, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDAccountsGet'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling apiV1MerchantsMerchantIDAccountsGet'
            );
        }



        $resourcePath = '/api/v1/merchants/{merchantID}/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $connected_accounts,
            'connectedAccounts', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantID' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1MerchantsMerchantIDBanksettingsGet
     *
     * Gets a list of the banks configured for a merchant&#39;s pay by bank requests,
     *
     * @param  string $merchant_id ID of the merchant. (required)
     * @param  string $currency Optional. The bank currency. (optional)
     * @param  string $country_code Optional. Country code for country specific banks. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDBanksettingsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantPayByBankSettings
     */
    public function apiV1MerchantsMerchantIDBanksettingsGet($merchant_id, $currency = null, $country_code = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDBanksettingsGet'][0])
    {
        list($response) = $this->apiV1MerchantsMerchantIDBanksettingsGetWithHttpInfo($merchant_id, $currency, $country_code, $contentType);
        return $response;
    }

    /**
     * Operation apiV1MerchantsMerchantIDBanksettingsGetWithHttpInfo
     *
     * Gets a list of the banks configured for a merchant&#39;s pay by bank requests,
     *
     * @param  string $merchant_id ID of the merchant. (required)
     * @param  string $currency Optional. The bank currency. (optional)
     * @param  string $country_code Optional. Country code for country specific banks. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDBanksettingsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantPayByBankSettings, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1MerchantsMerchantIDBanksettingsGetWithHttpInfo($merchant_id, $currency = null, $country_code = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDBanksettingsGet'][0])
    {
        $request = $this->apiV1MerchantsMerchantIDBanksettingsGetRequest($merchant_id, $currency, $country_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantPayByBankSettings' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantPayByBankSettings' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantPayByBankSettings', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantPayByBankSettings';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantPayByBankSettings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1MerchantsMerchantIDBanksettingsGetAsync
     *
     * Gets a list of the banks configured for a merchant&#39;s pay by bank requests,
     *
     * @param  string $merchant_id ID of the merchant. (required)
     * @param  string $currency Optional. The bank currency. (optional)
     * @param  string $country_code Optional. Country code for country specific banks. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDBanksettingsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDBanksettingsGetAsync($merchant_id, $currency = null, $country_code = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDBanksettingsGet'][0])
    {
        return $this->apiV1MerchantsMerchantIDBanksettingsGetAsyncWithHttpInfo($merchant_id, $currency, $country_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1MerchantsMerchantIDBanksettingsGetAsyncWithHttpInfo
     *
     * Gets a list of the banks configured for a merchant&#39;s pay by bank requests,
     *
     * @param  string $merchant_id ID of the merchant. (required)
     * @param  string $currency Optional. The bank currency. (optional)
     * @param  string $country_code Optional. Country code for country specific banks. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDBanksettingsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDBanksettingsGetAsyncWithHttpInfo($merchant_id, $currency = null, $country_code = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDBanksettingsGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantPayByBankSettings';
        $request = $this->apiV1MerchantsMerchantIDBanksettingsGetRequest($merchant_id, $currency, $country_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1MerchantsMerchantIDBanksettingsGet'
     *
     * @param  string $merchant_id ID of the merchant. (required)
     * @param  string $currency Optional. The bank currency. (optional)
     * @param  string $country_code Optional. Country code for country specific banks. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDBanksettingsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1MerchantsMerchantIDBanksettingsGetRequest($merchant_id, $currency = null, $country_code = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDBanksettingsGet'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling apiV1MerchantsMerchantIDBanksettingsGet'
            );
        }




        $resourcePath = '/api/v1/merchants/{merchantID}/banksettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country_code,
            'countryCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantID' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1MerchantsMerchantIDBeneficiariesGet
     *
     * Gets a list of all beneficiaries.
     *
     * @param  string $merchant_id The ID of the merchant to get the beneficiaries for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string $search The text filter used to retrieve the records.. (optional)
     * @param  string $currency The currency filter used to retrieve the records.. (optional)
     * @param  bool $include_disabled If set to true will include disabled beneficiaries as well (optional, default to false)
     * @param  string $sort Optional expression to sort the order of the beneficiaries. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDBeneficiariesGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryPageResponse
     */
    public function apiV1MerchantsMerchantIDBeneficiariesGet($merchant_id, $page_number = null, $page_size = null, $search = null, $currency = null, $include_disabled = false, $sort = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDBeneficiariesGet'][0])
    {
        list($response) = $this->apiV1MerchantsMerchantIDBeneficiariesGetWithHttpInfo($merchant_id, $page_number, $page_size, $search, $currency, $include_disabled, $sort, $contentType);
        return $response;
    }

    /**
     * Operation apiV1MerchantsMerchantIDBeneficiariesGetWithHttpInfo
     *
     * Gets a list of all beneficiaries.
     *
     * @param  string $merchant_id The ID of the merchant to get the beneficiaries for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string $search The text filter used to retrieve the records.. (optional)
     * @param  string $currency The currency filter used to retrieve the records.. (optional)
     * @param  bool $include_disabled If set to true will include disabled beneficiaries as well (optional, default to false)
     * @param  string $sort Optional expression to sort the order of the beneficiaries. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDBeneficiariesGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1MerchantsMerchantIDBeneficiariesGetWithHttpInfo($merchant_id, $page_number = null, $page_size = null, $search = null, $currency = null, $include_disabled = false, $sort = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDBeneficiariesGet'][0])
    {
        $request = $this->apiV1MerchantsMerchantIDBeneficiariesGetRequest($merchant_id, $page_number, $page_size, $search, $currency, $include_disabled, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryPageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryPageResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryPageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryPageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryPageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1MerchantsMerchantIDBeneficiariesGetAsync
     *
     * Gets a list of all beneficiaries.
     *
     * @param  string $merchant_id The ID of the merchant to get the beneficiaries for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string $search The text filter used to retrieve the records.. (optional)
     * @param  string $currency The currency filter used to retrieve the records.. (optional)
     * @param  bool $include_disabled If set to true will include disabled beneficiaries as well (optional, default to false)
     * @param  string $sort Optional expression to sort the order of the beneficiaries. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDBeneficiariesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDBeneficiariesGetAsync($merchant_id, $page_number = null, $page_size = null, $search = null, $currency = null, $include_disabled = false, $sort = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDBeneficiariesGet'][0])
    {
        return $this->apiV1MerchantsMerchantIDBeneficiariesGetAsyncWithHttpInfo($merchant_id, $page_number, $page_size, $search, $currency, $include_disabled, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1MerchantsMerchantIDBeneficiariesGetAsyncWithHttpInfo
     *
     * Gets a list of all beneficiaries.
     *
     * @param  string $merchant_id The ID of the merchant to get the beneficiaries for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string $search The text filter used to retrieve the records.. (optional)
     * @param  string $currency The currency filter used to retrieve the records.. (optional)
     * @param  bool $include_disabled If set to true will include disabled beneficiaries as well (optional, default to false)
     * @param  string $sort Optional expression to sort the order of the beneficiaries. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDBeneficiariesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDBeneficiariesGetAsyncWithHttpInfo($merchant_id, $page_number = null, $page_size = null, $search = null, $currency = null, $include_disabled = false, $sort = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDBeneficiariesGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryPageResponse';
        $request = $this->apiV1MerchantsMerchantIDBeneficiariesGetRequest($merchant_id, $page_number, $page_size, $search, $currency, $include_disabled, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1MerchantsMerchantIDBeneficiariesGet'
     *
     * @param  string $merchant_id The ID of the merchant to get the beneficiaries for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string $search The text filter used to retrieve the records.. (optional)
     * @param  string $currency The currency filter used to retrieve the records.. (optional)
     * @param  bool $include_disabled If set to true will include disabled beneficiaries as well (optional, default to false)
     * @param  string $sort Optional expression to sort the order of the beneficiaries. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDBeneficiariesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1MerchantsMerchantIDBeneficiariesGetRequest($merchant_id, $page_number = null, $page_size = null, $search = null, $currency = null, $include_disabled = false, $sort = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDBeneficiariesGet'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling apiV1MerchantsMerchantIDBeneficiariesGet'
            );
        }








        $resourcePath = '/api/v1/merchants/{merchantID}/beneficiaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_number,
            'pageNumber', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_disabled,
            'includeDisabled', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantID' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1MerchantsMerchantIDBeneficiariesIdGet
     *
     * Get&#39;s a beneficiary by beneficiary ID.
     *
     * @param  string $merchant_id The ID of the merchant to get the beneficiary for. (required)
     * @param  string $id The beneficiaryID of the beneficiary to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDBeneficiariesIdGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary
     */
    public function apiV1MerchantsMerchantIDBeneficiariesIdGet($merchant_id, $id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDBeneficiariesIdGet'][0])
    {
        list($response) = $this->apiV1MerchantsMerchantIDBeneficiariesIdGetWithHttpInfo($merchant_id, $id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1MerchantsMerchantIDBeneficiariesIdGetWithHttpInfo
     *
     * Get&#39;s a beneficiary by beneficiary ID.
     *
     * @param  string $merchant_id The ID of the merchant to get the beneficiary for. (required)
     * @param  string $id The beneficiaryID of the beneficiary to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDBeneficiariesIdGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1MerchantsMerchantIDBeneficiariesIdGetWithHttpInfo($merchant_id, $id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDBeneficiariesIdGet'][0])
    {
        $request = $this->apiV1MerchantsMerchantIDBeneficiariesIdGetRequest($merchant_id, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1MerchantsMerchantIDBeneficiariesIdGetAsync
     *
     * Get&#39;s a beneficiary by beneficiary ID.
     *
     * @param  string $merchant_id The ID of the merchant to get the beneficiary for. (required)
     * @param  string $id The beneficiaryID of the beneficiary to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDBeneficiariesIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDBeneficiariesIdGetAsync($merchant_id, $id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDBeneficiariesIdGet'][0])
    {
        return $this->apiV1MerchantsMerchantIDBeneficiariesIdGetAsyncWithHttpInfo($merchant_id, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1MerchantsMerchantIDBeneficiariesIdGetAsyncWithHttpInfo
     *
     * Get&#39;s a beneficiary by beneficiary ID.
     *
     * @param  string $merchant_id The ID of the merchant to get the beneficiary for. (required)
     * @param  string $id The beneficiaryID of the beneficiary to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDBeneficiariesIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDBeneficiariesIdGetAsyncWithHttpInfo($merchant_id, $id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDBeneficiariesIdGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary';
        $request = $this->apiV1MerchantsMerchantIDBeneficiariesIdGetRequest($merchant_id, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1MerchantsMerchantIDBeneficiariesIdGet'
     *
     * @param  string $merchant_id The ID of the merchant to get the beneficiary for. (required)
     * @param  string $id The beneficiaryID of the beneficiary to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDBeneficiariesIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1MerchantsMerchantIDBeneficiariesIdGetRequest($merchant_id, $id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDBeneficiariesIdGet'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling apiV1MerchantsMerchantIDBeneficiariesIdGet'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1MerchantsMerchantIDBeneficiariesIdGet'
            );
        }


        $resourcePath = '/api/v1/merchants/{merchantID}/beneficiaries/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantID' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1MerchantsMerchantIDBeneficiarygroupsGet
     *
     * Gets a list of all beneficiary groups.
     *
     * @param  string $merchant_id The ID of the merchant to get the beneficiary groups for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDBeneficiarygroupsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryGroupPageResponse
     */
    public function apiV1MerchantsMerchantIDBeneficiarygroupsGet($merchant_id, $page_number = null, $page_size = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDBeneficiarygroupsGet'][0])
    {
        list($response) = $this->apiV1MerchantsMerchantIDBeneficiarygroupsGetWithHttpInfo($merchant_id, $page_number, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation apiV1MerchantsMerchantIDBeneficiarygroupsGetWithHttpInfo
     *
     * Gets a list of all beneficiary groups.
     *
     * @param  string $merchant_id The ID of the merchant to get the beneficiary groups for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDBeneficiarygroupsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryGroupPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1MerchantsMerchantIDBeneficiarygroupsGetWithHttpInfo($merchant_id, $page_number = null, $page_size = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDBeneficiarygroupsGet'][0])
    {
        $request = $this->apiV1MerchantsMerchantIDBeneficiarygroupsGetRequest($merchant_id, $page_number, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryGroupPageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryGroupPageResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryGroupPageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryGroupPageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryGroupPageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1MerchantsMerchantIDBeneficiarygroupsGetAsync
     *
     * Gets a list of all beneficiary groups.
     *
     * @param  string $merchant_id The ID of the merchant to get the beneficiary groups for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDBeneficiarygroupsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDBeneficiarygroupsGetAsync($merchant_id, $page_number = null, $page_size = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDBeneficiarygroupsGet'][0])
    {
        return $this->apiV1MerchantsMerchantIDBeneficiarygroupsGetAsyncWithHttpInfo($merchant_id, $page_number, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1MerchantsMerchantIDBeneficiarygroupsGetAsyncWithHttpInfo
     *
     * Gets a list of all beneficiary groups.
     *
     * @param  string $merchant_id The ID of the merchant to get the beneficiary groups for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDBeneficiarygroupsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDBeneficiarygroupsGetAsyncWithHttpInfo($merchant_id, $page_number = null, $page_size = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDBeneficiarygroupsGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryGroupPageResponse';
        $request = $this->apiV1MerchantsMerchantIDBeneficiarygroupsGetRequest($merchant_id, $page_number, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1MerchantsMerchantIDBeneficiarygroupsGet'
     *
     * @param  string $merchant_id The ID of the merchant to get the beneficiary groups for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDBeneficiarygroupsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1MerchantsMerchantIDBeneficiarygroupsGetRequest($merchant_id, $page_number = null, $page_size = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDBeneficiarygroupsGet'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling apiV1MerchantsMerchantIDBeneficiarygroupsGet'
            );
        }




        $resourcePath = '/api/v1/merchants/{merchantID}/beneficiarygroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_number,
            'pageNumber', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantID' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1MerchantsMerchantIDGet
     *
     * Get&#39;s a merchant.
     *
     * @param  string $merchant_id merchant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchant
     */
    public function apiV1MerchantsMerchantIDGet($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDGet'][0])
    {
        list($response) = $this->apiV1MerchantsMerchantIDGetWithHttpInfo($merchant_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1MerchantsMerchantIDGetWithHttpInfo
     *
     * Get&#39;s a merchant.
     *
     * @param  string $merchant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchant, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1MerchantsMerchantIDGetWithHttpInfo($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDGet'][0])
    {
        $request = $this->apiV1MerchantsMerchantIDGetRequest($merchant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchant' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchant' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchant', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchant';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchant',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1MerchantsMerchantIDGetAsync
     *
     * Get&#39;s a merchant.
     *
     * @param  string $merchant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDGetAsync($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDGet'][0])
    {
        return $this->apiV1MerchantsMerchantIDGetAsyncWithHttpInfo($merchant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1MerchantsMerchantIDGetAsyncWithHttpInfo
     *
     * Get&#39;s a merchant.
     *
     * @param  string $merchant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDGetAsyncWithHttpInfo($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchant';
        $request = $this->apiV1MerchantsMerchantIDGetRequest($merchant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1MerchantsMerchantIDGet'
     *
     * @param  string $merchant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1MerchantsMerchantIDGetRequest($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDGet'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling apiV1MerchantsMerchantIDGet'
            );
        }


        $resourcePath = '/api/v1/merchants/{merchantID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantID' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1MerchantsMerchantIDPayoutsGet
     *
     * Gets a list of all payouts for a specific merchant.
     *
     * @param  string $merchant_id Required. The ID of the merchant to get the payouts for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string[] $statuses An optional status filter for the payout records. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payouts created after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payouts created up until this date. (optional)
     * @param  string $search The text filter to apply to retrieve payouts with a similar title, description, merchant name or contact information. (optional)
     * @param  string $currency The currency filter to apply to retrieve payouts with this currency. (optional)
     * @param  float $min_amount The amount filter to apply to retrieve payouts that exceed this amount. (optional)
     * @param  float $max_amount The amount filter to apply to retrieve payouts that don&#39;t exceed this amount. (optional)
     * @param  string[] $tags The tag filter to apply to retrieve payouts with at least one of these tags. (optional)
     * @param  string $sort Optional expression to sort the order of the payouts. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDPayoutsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse
     */
    public function apiV1MerchantsMerchantIDPayoutsGet($merchant_id, $page_number = null, $page_size = null, $statuses = null, $from_date = null, $to_date = null, $search = null, $currency = null, $min_amount = null, $max_amount = null, $tags = null, $sort = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDPayoutsGet'][0])
    {
        list($response) = $this->apiV1MerchantsMerchantIDPayoutsGetWithHttpInfo($merchant_id, $page_number, $page_size, $statuses, $from_date, $to_date, $search, $currency, $min_amount, $max_amount, $tags, $sort, $contentType);
        return $response;
    }

    /**
     * Operation apiV1MerchantsMerchantIDPayoutsGetWithHttpInfo
     *
     * Gets a list of all payouts for a specific merchant.
     *
     * @param  string $merchant_id Required. The ID of the merchant to get the payouts for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string[] $statuses An optional status filter for the payout records. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payouts created after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payouts created up until this date. (optional)
     * @param  string $search The text filter to apply to retrieve payouts with a similar title, description, merchant name or contact information. (optional)
     * @param  string $currency The currency filter to apply to retrieve payouts with this currency. (optional)
     * @param  float $min_amount The amount filter to apply to retrieve payouts that exceed this amount. (optional)
     * @param  float $max_amount The amount filter to apply to retrieve payouts that don&#39;t exceed this amount. (optional)
     * @param  string[] $tags The tag filter to apply to retrieve payouts with at least one of these tags. (optional)
     * @param  string $sort Optional expression to sort the order of the payouts. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDPayoutsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1MerchantsMerchantIDPayoutsGetWithHttpInfo($merchant_id, $page_number = null, $page_size = null, $statuses = null, $from_date = null, $to_date = null, $search = null, $currency = null, $min_amount = null, $max_amount = null, $tags = null, $sort = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDPayoutsGet'][0])
    {
        $request = $this->apiV1MerchantsMerchantIDPayoutsGetRequest($merchant_id, $page_number, $page_size, $statuses, $from_date, $to_date, $search, $currency, $min_amount, $max_amount, $tags, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1MerchantsMerchantIDPayoutsGetAsync
     *
     * Gets a list of all payouts for a specific merchant.
     *
     * @param  string $merchant_id Required. The ID of the merchant to get the payouts for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string[] $statuses An optional status filter for the payout records. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payouts created after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payouts created up until this date. (optional)
     * @param  string $search The text filter to apply to retrieve payouts with a similar title, description, merchant name or contact information. (optional)
     * @param  string $currency The currency filter to apply to retrieve payouts with this currency. (optional)
     * @param  float $min_amount The amount filter to apply to retrieve payouts that exceed this amount. (optional)
     * @param  float $max_amount The amount filter to apply to retrieve payouts that don&#39;t exceed this amount. (optional)
     * @param  string[] $tags The tag filter to apply to retrieve payouts with at least one of these tags. (optional)
     * @param  string $sort Optional expression to sort the order of the payouts. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDPayoutsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDPayoutsGetAsync($merchant_id, $page_number = null, $page_size = null, $statuses = null, $from_date = null, $to_date = null, $search = null, $currency = null, $min_amount = null, $max_amount = null, $tags = null, $sort = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDPayoutsGet'][0])
    {
        return $this->apiV1MerchantsMerchantIDPayoutsGetAsyncWithHttpInfo($merchant_id, $page_number, $page_size, $statuses, $from_date, $to_date, $search, $currency, $min_amount, $max_amount, $tags, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1MerchantsMerchantIDPayoutsGetAsyncWithHttpInfo
     *
     * Gets a list of all payouts for a specific merchant.
     *
     * @param  string $merchant_id Required. The ID of the merchant to get the payouts for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string[] $statuses An optional status filter for the payout records. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payouts created after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payouts created up until this date. (optional)
     * @param  string $search The text filter to apply to retrieve payouts with a similar title, description, merchant name or contact information. (optional)
     * @param  string $currency The currency filter to apply to retrieve payouts with this currency. (optional)
     * @param  float $min_amount The amount filter to apply to retrieve payouts that exceed this amount. (optional)
     * @param  float $max_amount The amount filter to apply to retrieve payouts that don&#39;t exceed this amount. (optional)
     * @param  string[] $tags The tag filter to apply to retrieve payouts with at least one of these tags. (optional)
     * @param  string $sort Optional expression to sort the order of the payouts. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDPayoutsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDPayoutsGetAsyncWithHttpInfo($merchant_id, $page_number = null, $page_size = null, $statuses = null, $from_date = null, $to_date = null, $search = null, $currency = null, $min_amount = null, $max_amount = null, $tags = null, $sort = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDPayoutsGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse';
        $request = $this->apiV1MerchantsMerchantIDPayoutsGetRequest($merchant_id, $page_number, $page_size, $statuses, $from_date, $to_date, $search, $currency, $min_amount, $max_amount, $tags, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1MerchantsMerchantIDPayoutsGet'
     *
     * @param  string $merchant_id Required. The ID of the merchant to get the payouts for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string[] $statuses An optional status filter for the payout records. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payouts created after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payouts created up until this date. (optional)
     * @param  string $search The text filter to apply to retrieve payouts with a similar title, description, merchant name or contact information. (optional)
     * @param  string $currency The currency filter to apply to retrieve payouts with this currency. (optional)
     * @param  float $min_amount The amount filter to apply to retrieve payouts that exceed this amount. (optional)
     * @param  float $max_amount The amount filter to apply to retrieve payouts that don&#39;t exceed this amount. (optional)
     * @param  string[] $tags The tag filter to apply to retrieve payouts with at least one of these tags. (optional)
     * @param  string $sort Optional expression to sort the order of the payouts. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDPayoutsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1MerchantsMerchantIDPayoutsGetRequest($merchant_id, $page_number = null, $page_size = null, $statuses = null, $from_date = null, $to_date = null, $search = null, $currency = null, $min_amount = null, $max_amount = null, $tags = null, $sort = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDPayoutsGet'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling apiV1MerchantsMerchantIDPayoutsGet'
            );
        }













        $resourcePath = '/api/v1/merchants/{merchantID}/payouts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_number,
            'pageNumber', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_amount,
            'minAmount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_amount,
            'maxAmount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tags,
            'tags', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantID' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1MerchantsMerchantIDTagsGet
     *
     * Get a list of merchant tags
     *
     * @param  string $merchant_id The merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTagsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag[]
     */
    public function apiV1MerchantsMerchantIDTagsGet($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTagsGet'][0])
    {
        list($response) = $this->apiV1MerchantsMerchantIDTagsGetWithHttpInfo($merchant_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1MerchantsMerchantIDTagsGetWithHttpInfo
     *
     * Get a list of merchant tags
     *
     * @param  string $merchant_id The merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTagsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1MerchantsMerchantIDTagsGetWithHttpInfo($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTagsGet'][0])
    {
        $request = $this->apiV1MerchantsMerchantIDTagsGetRequest($merchant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1MerchantsMerchantIDTagsGetAsync
     *
     * Get a list of merchant tags
     *
     * @param  string $merchant_id The merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTagsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDTagsGetAsync($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTagsGet'][0])
    {
        return $this->apiV1MerchantsMerchantIDTagsGetAsyncWithHttpInfo($merchant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1MerchantsMerchantIDTagsGetAsyncWithHttpInfo
     *
     * Get a list of merchant tags
     *
     * @param  string $merchant_id The merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTagsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDTagsGetAsyncWithHttpInfo($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTagsGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag[]';
        $request = $this->apiV1MerchantsMerchantIDTagsGetRequest($merchant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1MerchantsMerchantIDTagsGet'
     *
     * @param  string $merchant_id The merchant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTagsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1MerchantsMerchantIDTagsGetRequest($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTagsGet'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling apiV1MerchantsMerchantIDTagsGet'
            );
        }


        $resourcePath = '/api/v1/merchants/{merchantID}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantID' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1MerchantsMerchantIDTagsPost
     *
     * Adds a tag to a merchant.
     *
     * @param  string $merchant_id The merchant id (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag $no_frixion_money_moov_models_tag The tag to add (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTagsPost'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag
     */
    public function apiV1MerchantsMerchantIDTagsPost($merchant_id, $no_frixion_money_moov_models_tag = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTagsPost'][0])
    {
        list($response) = $this->apiV1MerchantsMerchantIDTagsPostWithHttpInfo($merchant_id, $no_frixion_money_moov_models_tag, $contentType);
        return $response;
    }

    /**
     * Operation apiV1MerchantsMerchantIDTagsPostWithHttpInfo
     *
     * Adds a tag to a merchant.
     *
     * @param  string $merchant_id The merchant id (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag $no_frixion_money_moov_models_tag The tag to add (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTagsPost'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1MerchantsMerchantIDTagsPostWithHttpInfo($merchant_id, $no_frixion_money_moov_models_tag = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTagsPost'][0])
    {
        $request = $this->apiV1MerchantsMerchantIDTagsPostRequest($merchant_id, $no_frixion_money_moov_models_tag, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1MerchantsMerchantIDTagsPostAsync
     *
     * Adds a tag to a merchant.
     *
     * @param  string $merchant_id The merchant id (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag $no_frixion_money_moov_models_tag The tag to add (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTagsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDTagsPostAsync($merchant_id, $no_frixion_money_moov_models_tag = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTagsPost'][0])
    {
        return $this->apiV1MerchantsMerchantIDTagsPostAsyncWithHttpInfo($merchant_id, $no_frixion_money_moov_models_tag, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1MerchantsMerchantIDTagsPostAsyncWithHttpInfo
     *
     * Adds a tag to a merchant.
     *
     * @param  string $merchant_id The merchant id (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag $no_frixion_money_moov_models_tag The tag to add (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTagsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDTagsPostAsyncWithHttpInfo($merchant_id, $no_frixion_money_moov_models_tag = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTagsPost'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag';
        $request = $this->apiV1MerchantsMerchantIDTagsPostRequest($merchant_id, $no_frixion_money_moov_models_tag, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1MerchantsMerchantIDTagsPost'
     *
     * @param  string $merchant_id The merchant id (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag $no_frixion_money_moov_models_tag The tag to add (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTagsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1MerchantsMerchantIDTagsPostRequest($merchant_id, $no_frixion_money_moov_models_tag = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTagsPost'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling apiV1MerchantsMerchantIDTagsPost'
            );
        }



        $resourcePath = '/api/v1/merchants/{merchantID}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantID' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($no_frixion_money_moov_models_tag)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($no_frixion_money_moov_models_tag));
            } else {
                $httpBody = $no_frixion_money_moov_models_tag;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1MerchantsMerchantIDTagsTagIDDelete
     *
     * Deletes a tag from a merchant
     *
     * @param  string $merchant_id The merchant id (required)
     * @param  string $tag_id The tag id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTagsTagIDDelete'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1MerchantsMerchantIDTagsTagIDDelete($merchant_id, $tag_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTagsTagIDDelete'][0])
    {
        $this->apiV1MerchantsMerchantIDTagsTagIDDeleteWithHttpInfo($merchant_id, $tag_id, $contentType);
    }

    /**
     * Operation apiV1MerchantsMerchantIDTagsTagIDDeleteWithHttpInfo
     *
     * Deletes a tag from a merchant
     *
     * @param  string $merchant_id The merchant id (required)
     * @param  string $tag_id The tag id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTagsTagIDDelete'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1MerchantsMerchantIDTagsTagIDDeleteWithHttpInfo($merchant_id, $tag_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTagsTagIDDelete'][0])
    {
        $request = $this->apiV1MerchantsMerchantIDTagsTagIDDeleteRequest($merchant_id, $tag_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1MerchantsMerchantIDTagsTagIDDeleteAsync
     *
     * Deletes a tag from a merchant
     *
     * @param  string $merchant_id The merchant id (required)
     * @param  string $tag_id The tag id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTagsTagIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDTagsTagIDDeleteAsync($merchant_id, $tag_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTagsTagIDDelete'][0])
    {
        return $this->apiV1MerchantsMerchantIDTagsTagIDDeleteAsyncWithHttpInfo($merchant_id, $tag_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1MerchantsMerchantIDTagsTagIDDeleteAsyncWithHttpInfo
     *
     * Deletes a tag from a merchant
     *
     * @param  string $merchant_id The merchant id (required)
     * @param  string $tag_id The tag id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTagsTagIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDTagsTagIDDeleteAsyncWithHttpInfo($merchant_id, $tag_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTagsTagIDDelete'][0])
    {
        $returnType = '';
        $request = $this->apiV1MerchantsMerchantIDTagsTagIDDeleteRequest($merchant_id, $tag_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1MerchantsMerchantIDTagsTagIDDelete'
     *
     * @param  string $merchant_id The merchant id (required)
     * @param  string $tag_id The tag id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTagsTagIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1MerchantsMerchantIDTagsTagIDDeleteRequest($merchant_id, $tag_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTagsTagIDDelete'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling apiV1MerchantsMerchantIDTagsTagIDDelete'
            );
        }

        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling apiV1MerchantsMerchantIDTagsTagIDDelete'
            );
        }


        $resourcePath = '/api/v1/merchants/{merchantID}/tags/{tagID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantID' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }
        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tagID' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1MerchantsMerchantIDTokensGet
     *
     * Gets a list of a merchant&#39;s issued API tokens.
     *
     * @param  string $merchant_id The ID of the merchant to get the tokens for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTokensGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantTokenPageResponse
     */
    public function apiV1MerchantsMerchantIDTokensGet($merchant_id, $page_number = null, $page_size = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTokensGet'][0])
    {
        list($response) = $this->apiV1MerchantsMerchantIDTokensGetWithHttpInfo($merchant_id, $page_number, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation apiV1MerchantsMerchantIDTokensGetWithHttpInfo
     *
     * Gets a list of a merchant&#39;s issued API tokens.
     *
     * @param  string $merchant_id The ID of the merchant to get the tokens for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTokensGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantTokenPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1MerchantsMerchantIDTokensGetWithHttpInfo($merchant_id, $page_number = null, $page_size = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTokensGet'][0])
    {
        $request = $this->apiV1MerchantsMerchantIDTokensGetRequest($merchant_id, $page_number, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantTokenPageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantTokenPageResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantTokenPageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantTokenPageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantTokenPageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1MerchantsMerchantIDTokensGetAsync
     *
     * Gets a list of a merchant&#39;s issued API tokens.
     *
     * @param  string $merchant_id The ID of the merchant to get the tokens for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTokensGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDTokensGetAsync($merchant_id, $page_number = null, $page_size = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTokensGet'][0])
    {
        return $this->apiV1MerchantsMerchantIDTokensGetAsyncWithHttpInfo($merchant_id, $page_number, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1MerchantsMerchantIDTokensGetAsyncWithHttpInfo
     *
     * Gets a list of a merchant&#39;s issued API tokens.
     *
     * @param  string $merchant_id The ID of the merchant to get the tokens for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTokensGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDTokensGetAsyncWithHttpInfo($merchant_id, $page_number = null, $page_size = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTokensGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantTokenPageResponse';
        $request = $this->apiV1MerchantsMerchantIDTokensGetRequest($merchant_id, $page_number, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1MerchantsMerchantIDTokensGet'
     *
     * @param  string $merchant_id The ID of the merchant to get the tokens for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTokensGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1MerchantsMerchantIDTokensGetRequest($merchant_id, $page_number = null, $page_size = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTokensGet'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling apiV1MerchantsMerchantIDTokensGet'
            );
        }




        $resourcePath = '/api/v1/merchants/{merchantID}/tokens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_number,
            'pageNumber', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantID' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1MerchantsMerchantIDTransactionsGet
     *
     * Gets a list of transactions for all a merchant&#39;s accounts.
     *
     * @param  string $merchant_id The ID of the merchant to get transactions for. (required)
     * @param  int $page_number The page number from where records are retrieved. Note that the paging starts from page 1.              If a 0 is supplied it will be treated as a 1 and the first page is returned. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve transactions added after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve transactions added up until this date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTransactionsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransactionPageResponse
     */
    public function apiV1MerchantsMerchantIDTransactionsGet($merchant_id, $page_number = null, $page_size = null, $from_date = null, $to_date = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTransactionsGet'][0])
    {
        list($response) = $this->apiV1MerchantsMerchantIDTransactionsGetWithHttpInfo($merchant_id, $page_number, $page_size, $from_date, $to_date, $contentType);
        return $response;
    }

    /**
     * Operation apiV1MerchantsMerchantIDTransactionsGetWithHttpInfo
     *
     * Gets a list of transactions for all a merchant&#39;s accounts.
     *
     * @param  string $merchant_id The ID of the merchant to get transactions for. (required)
     * @param  int $page_number The page number from where records are retrieved. Note that the paging starts from page 1.              If a 0 is supplied it will be treated as a 1 and the first page is returned. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve transactions added after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve transactions added up until this date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTransactionsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransactionPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1MerchantsMerchantIDTransactionsGetWithHttpInfo($merchant_id, $page_number = null, $page_size = null, $from_date = null, $to_date = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTransactionsGet'][0])
    {
        $request = $this->apiV1MerchantsMerchantIDTransactionsGetRequest($merchant_id, $page_number, $page_size, $from_date, $to_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransactionPageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransactionPageResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransactionPageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransactionPageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransactionPageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1MerchantsMerchantIDTransactionsGetAsync
     *
     * Gets a list of transactions for all a merchant&#39;s accounts.
     *
     * @param  string $merchant_id The ID of the merchant to get transactions for. (required)
     * @param  int $page_number The page number from where records are retrieved. Note that the paging starts from page 1.              If a 0 is supplied it will be treated as a 1 and the first page is returned. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve transactions added after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve transactions added up until this date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTransactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDTransactionsGetAsync($merchant_id, $page_number = null, $page_size = null, $from_date = null, $to_date = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTransactionsGet'][0])
    {
        return $this->apiV1MerchantsMerchantIDTransactionsGetAsyncWithHttpInfo($merchant_id, $page_number, $page_size, $from_date, $to_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1MerchantsMerchantIDTransactionsGetAsyncWithHttpInfo
     *
     * Gets a list of transactions for all a merchant&#39;s accounts.
     *
     * @param  string $merchant_id The ID of the merchant to get transactions for. (required)
     * @param  int $page_number The page number from where records are retrieved. Note that the paging starts from page 1.              If a 0 is supplied it will be treated as a 1 and the first page is returned. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve transactions added after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve transactions added up until this date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTransactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDTransactionsGetAsyncWithHttpInfo($merchant_id, $page_number = null, $page_size = null, $from_date = null, $to_date = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTransactionsGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransactionPageResponse';
        $request = $this->apiV1MerchantsMerchantIDTransactionsGetRequest($merchant_id, $page_number, $page_size, $from_date, $to_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1MerchantsMerchantIDTransactionsGet'
     *
     * @param  string $merchant_id The ID of the merchant to get transactions for. (required)
     * @param  int $page_number The page number from where records are retrieved. Note that the paging starts from page 1.              If a 0 is supplied it will be treated as a 1 and the first page is returned. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve transactions added after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve transactions added up until this date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDTransactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1MerchantsMerchantIDTransactionsGetRequest($merchant_id, $page_number = null, $page_size = null, $from_date = null, $to_date = null, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDTransactionsGet'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling apiV1MerchantsMerchantIDTransactionsGet'
            );
        }






        $resourcePath = '/api/v1/merchants/{merchantID}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_number,
            'pageNumber', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantID' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1MerchantsMerchantIDUserinvitesGet
     *
     * Gets user invites associated with merchant.
     *
     * @param  string $merchant_id The ID of the merchant to get the beneficiaries for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDUserinvitesGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserInvite[]
     */
    public function apiV1MerchantsMerchantIDUserinvitesGet($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDUserinvitesGet'][0])
    {
        list($response) = $this->apiV1MerchantsMerchantIDUserinvitesGetWithHttpInfo($merchant_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1MerchantsMerchantIDUserinvitesGetWithHttpInfo
     *
     * Gets user invites associated with merchant.
     *
     * @param  string $merchant_id The ID of the merchant to get the beneficiaries for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDUserinvitesGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserInvite[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1MerchantsMerchantIDUserinvitesGetWithHttpInfo($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDUserinvitesGet'][0])
    {
        $request = $this->apiV1MerchantsMerchantIDUserinvitesGetRequest($merchant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserInvite[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserInvite[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserInvite[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserInvite[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserInvite[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1MerchantsMerchantIDUserinvitesGetAsync
     *
     * Gets user invites associated with merchant.
     *
     * @param  string $merchant_id The ID of the merchant to get the beneficiaries for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDUserinvitesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDUserinvitesGetAsync($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDUserinvitesGet'][0])
    {
        return $this->apiV1MerchantsMerchantIDUserinvitesGetAsyncWithHttpInfo($merchant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1MerchantsMerchantIDUserinvitesGetAsyncWithHttpInfo
     *
     * Gets user invites associated with merchant.
     *
     * @param  string $merchant_id The ID of the merchant to get the beneficiaries for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDUserinvitesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDUserinvitesGetAsyncWithHttpInfo($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDUserinvitesGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserInvite[]';
        $request = $this->apiV1MerchantsMerchantIDUserinvitesGetRequest($merchant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1MerchantsMerchantIDUserinvitesGet'
     *
     * @param  string $merchant_id The ID of the merchant to get the beneficiaries for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDUserinvitesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1MerchantsMerchantIDUserinvitesGetRequest($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDUserinvitesGet'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling apiV1MerchantsMerchantIDUserinvitesGet'
            );
        }


        $resourcePath = '/api/v1/merchants/{merchantID}/userinvites';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantID' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1MerchantsMerchantIDUserrolesGet
     *
     * Gets user roles associated with merchant.
     *
     * @param  string $merchant_id The ID of the merchant to get the user roles for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDUserrolesGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRole[]
     */
    public function apiV1MerchantsMerchantIDUserrolesGet($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDUserrolesGet'][0])
    {
        list($response) = $this->apiV1MerchantsMerchantIDUserrolesGetWithHttpInfo($merchant_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1MerchantsMerchantIDUserrolesGetWithHttpInfo
     *
     * Gets user roles associated with merchant.
     *
     * @param  string $merchant_id The ID of the merchant to get the user roles for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDUserrolesGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRole[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1MerchantsMerchantIDUserrolesGetWithHttpInfo($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDUserrolesGet'][0])
    {
        $request = $this->apiV1MerchantsMerchantIDUserrolesGetRequest($merchant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRole[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRole[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRole[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRole[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRole[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1MerchantsMerchantIDUserrolesGetAsync
     *
     * Gets user roles associated with merchant.
     *
     * @param  string $merchant_id The ID of the merchant to get the user roles for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDUserrolesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDUserrolesGetAsync($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDUserrolesGet'][0])
    {
        return $this->apiV1MerchantsMerchantIDUserrolesGetAsyncWithHttpInfo($merchant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1MerchantsMerchantIDUserrolesGetAsyncWithHttpInfo
     *
     * Gets user roles associated with merchant.
     *
     * @param  string $merchant_id The ID of the merchant to get the user roles for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDUserrolesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDUserrolesGetAsyncWithHttpInfo($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDUserrolesGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRole[]';
        $request = $this->apiV1MerchantsMerchantIDUserrolesGetRequest($merchant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1MerchantsMerchantIDUserrolesGet'
     *
     * @param  string $merchant_id The ID of the merchant to get the user roles for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDUserrolesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1MerchantsMerchantIDUserrolesGetRequest($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDUserrolesGet'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling apiV1MerchantsMerchantIDUserrolesGet'
            );
        }


        $resourcePath = '/api/v1/merchants/{merchantID}/userroles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantID' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1MerchantsMerchantIDUsersGet
     *
     * Gets all users including invitees for a merchant.
     *
     * @param  string $merchant_id The ID of the merchant to get the user roles for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDUsersGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUser[]
     */
    public function apiV1MerchantsMerchantIDUsersGet($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDUsersGet'][0])
    {
        list($response) = $this->apiV1MerchantsMerchantIDUsersGetWithHttpInfo($merchant_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1MerchantsMerchantIDUsersGetWithHttpInfo
     *
     * Gets all users including invitees for a merchant.
     *
     * @param  string $merchant_id The ID of the merchant to get the user roles for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDUsersGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUser[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1MerchantsMerchantIDUsersGetWithHttpInfo($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDUsersGet'][0])
    {
        $request = $this->apiV1MerchantsMerchantIDUsersGetRequest($merchant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUser[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUser[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUser[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUser[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUser[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1MerchantsMerchantIDUsersGetAsync
     *
     * Gets all users including invitees for a merchant.
     *
     * @param  string $merchant_id The ID of the merchant to get the user roles for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDUsersGetAsync($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDUsersGet'][0])
    {
        return $this->apiV1MerchantsMerchantIDUsersGetAsyncWithHttpInfo($merchant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1MerchantsMerchantIDUsersGetAsyncWithHttpInfo
     *
     * Gets all users including invitees for a merchant.
     *
     * @param  string $merchant_id The ID of the merchant to get the user roles for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDUsersGetAsyncWithHttpInfo($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDUsersGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUser[]';
        $request = $this->apiV1MerchantsMerchantIDUsersGetRequest($merchant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1MerchantsMerchantIDUsersGet'
     *
     * @param  string $merchant_id The ID of the merchant to get the user roles for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1MerchantsMerchantIDUsersGetRequest($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDUsersGet'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling apiV1MerchantsMerchantIDUsersGet'
            );
        }


        $resourcePath = '/api/v1/merchants/{merchantID}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantID' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1MerchantsMerchantIDWebhooksGet
     *
     * Get all configured webhooks for a merchant.
     *
     * @param  string $merchant_id The ID of the merchant to get the webhooks for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDWebhooksGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsWebhook[]
     */
    public function apiV1MerchantsMerchantIDWebhooksGet($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDWebhooksGet'][0])
    {
        list($response) = $this->apiV1MerchantsMerchantIDWebhooksGetWithHttpInfo($merchant_id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1MerchantsMerchantIDWebhooksGetWithHttpInfo
     *
     * Get all configured webhooks for a merchant.
     *
     * @param  string $merchant_id The ID of the merchant to get the webhooks for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDWebhooksGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsWebhook[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1MerchantsMerchantIDWebhooksGetWithHttpInfo($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDWebhooksGet'][0])
    {
        $request = $this->apiV1MerchantsMerchantIDWebhooksGetRequest($merchant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsWebhook[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsWebhook[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsWebhook[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsWebhook[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsWebhook[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1MerchantsMerchantIDWebhooksGetAsync
     *
     * Get all configured webhooks for a merchant.
     *
     * @param  string $merchant_id The ID of the merchant to get the webhooks for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDWebhooksGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDWebhooksGetAsync($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDWebhooksGet'][0])
    {
        return $this->apiV1MerchantsMerchantIDWebhooksGetAsyncWithHttpInfo($merchant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1MerchantsMerchantIDWebhooksGetAsyncWithHttpInfo
     *
     * Get all configured webhooks for a merchant.
     *
     * @param  string $merchant_id The ID of the merchant to get the webhooks for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDWebhooksGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsMerchantIDWebhooksGetAsyncWithHttpInfo($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDWebhooksGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsWebhook[]';
        $request = $this->apiV1MerchantsMerchantIDWebhooksGetRequest($merchant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1MerchantsMerchantIDWebhooksGet'
     *
     * @param  string $merchant_id The ID of the merchant to get the webhooks for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsMerchantIDWebhooksGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1MerchantsMerchantIDWebhooksGetRequest($merchant_id, string $contentType = self::contentTypes['apiV1MerchantsMerchantIDWebhooksGet'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling apiV1MerchantsMerchantIDWebhooksGet'
            );
        }


        $resourcePath = '/api/v1/merchants/{merchantID}/webhooks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantID' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1MerchantsPagedGet
     *
     * Get a paged list of all the merchants the caller has access to.
     *
     * @param  int $page_number Optional. The page number to retrieve. (optional, default to 1)
     * @param  int $page_size Optional. The number of merchants per page. (optional, default to 10)
     * @param  string $search The text filter to apply to retrieve merchants with a similar name, ID etc. (optional)
     * @param  string $sort Optional expression to sort the order of the merchants. Example \&quot;Name desc,Inserted asc\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsPagedGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantPageResponse
     */
    public function apiV1MerchantsPagedGet($page_number = 1, $page_size = 10, $search = null, $sort = null, string $contentType = self::contentTypes['apiV1MerchantsPagedGet'][0])
    {
        list($response) = $this->apiV1MerchantsPagedGetWithHttpInfo($page_number, $page_size, $search, $sort, $contentType);
        return $response;
    }

    /**
     * Operation apiV1MerchantsPagedGetWithHttpInfo
     *
     * Get a paged list of all the merchants the caller has access to.
     *
     * @param  int $page_number Optional. The page number to retrieve. (optional, default to 1)
     * @param  int $page_size Optional. The number of merchants per page. (optional, default to 10)
     * @param  string $search The text filter to apply to retrieve merchants with a similar name, ID etc. (optional)
     * @param  string $sort Optional expression to sort the order of the merchants. Example \&quot;Name desc,Inserted asc\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsPagedGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1MerchantsPagedGetWithHttpInfo($page_number = 1, $page_size = 10, $search = null, $sort = null, string $contentType = self::contentTypes['apiV1MerchantsPagedGet'][0])
    {
        $request = $this->apiV1MerchantsPagedGetRequest($page_number, $page_size, $search, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantPageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantPageResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantPageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantPageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantPageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1MerchantsPagedGetAsync
     *
     * Get a paged list of all the merchants the caller has access to.
     *
     * @param  int $page_number Optional. The page number to retrieve. (optional, default to 1)
     * @param  int $page_size Optional. The number of merchants per page. (optional, default to 10)
     * @param  string $search The text filter to apply to retrieve merchants with a similar name, ID etc. (optional)
     * @param  string $sort Optional expression to sort the order of the merchants. Example \&quot;Name desc,Inserted asc\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsPagedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsPagedGetAsync($page_number = 1, $page_size = 10, $search = null, $sort = null, string $contentType = self::contentTypes['apiV1MerchantsPagedGet'][0])
    {
        return $this->apiV1MerchantsPagedGetAsyncWithHttpInfo($page_number, $page_size, $search, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1MerchantsPagedGetAsyncWithHttpInfo
     *
     * Get a paged list of all the merchants the caller has access to.
     *
     * @param  int $page_number Optional. The page number to retrieve. (optional, default to 1)
     * @param  int $page_size Optional. The number of merchants per page. (optional, default to 10)
     * @param  string $search The text filter to apply to retrieve merchants with a similar name, ID etc. (optional)
     * @param  string $sort Optional expression to sort the order of the merchants. Example \&quot;Name desc,Inserted asc\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsPagedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsPagedGetAsyncWithHttpInfo($page_number = 1, $page_size = 10, $search = null, $sort = null, string $contentType = self::contentTypes['apiV1MerchantsPagedGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsMerchantPageResponse';
        $request = $this->apiV1MerchantsPagedGetRequest($page_number, $page_size, $search, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1MerchantsPagedGet'
     *
     * @param  int $page_number Optional. The page number to retrieve. (optional, default to 1)
     * @param  int $page_size Optional. The number of merchants per page. (optional, default to 10)
     * @param  string $search The text filter to apply to retrieve merchants with a similar name, ID etc. (optional)
     * @param  string $sort Optional expression to sort the order of the merchants. Example \&quot;Name desc,Inserted asc\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsPagedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1MerchantsPagedGetRequest($page_number = 1, $page_size = 10, $search = null, $sort = null, string $contentType = self::contentTypes['apiV1MerchantsPagedGet'][0])
    {






        $resourcePath = '/api/v1/merchants/paged';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_number,
            'pageNumber', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1MerchantsUserrolesIdDelete
     *
     * Deletes user role.
     *
     * @param  string $id User Role Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsUserrolesIdDelete'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1MerchantsUserrolesIdDelete($id, string $contentType = self::contentTypes['apiV1MerchantsUserrolesIdDelete'][0])
    {
        $this->apiV1MerchantsUserrolesIdDeleteWithHttpInfo($id, $contentType);
    }

    /**
     * Operation apiV1MerchantsUserrolesIdDeleteWithHttpInfo
     *
     * Deletes user role.
     *
     * @param  string $id User Role Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsUserrolesIdDelete'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1MerchantsUserrolesIdDeleteWithHttpInfo($id, string $contentType = self::contentTypes['apiV1MerchantsUserrolesIdDelete'][0])
    {
        $request = $this->apiV1MerchantsUserrolesIdDeleteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1MerchantsUserrolesIdDeleteAsync
     *
     * Deletes user role.
     *
     * @param  string $id User Role Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsUserrolesIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsUserrolesIdDeleteAsync($id, string $contentType = self::contentTypes['apiV1MerchantsUserrolesIdDelete'][0])
    {
        return $this->apiV1MerchantsUserrolesIdDeleteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1MerchantsUserrolesIdDeleteAsyncWithHttpInfo
     *
     * Deletes user role.
     *
     * @param  string $id User Role Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsUserrolesIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsUserrolesIdDeleteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1MerchantsUserrolesIdDelete'][0])
    {
        $returnType = '';
        $request = $this->apiV1MerchantsUserrolesIdDeleteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1MerchantsUserrolesIdDelete'
     *
     * @param  string $id User Role Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsUserrolesIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1MerchantsUserrolesIdDeleteRequest($id, string $contentType = self::contentTypes['apiV1MerchantsUserrolesIdDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1MerchantsUserrolesIdDelete'
            );
        }


        $resourcePath = '/api/v1/merchants/userroles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1MerchantsUserrolesPost
     *
     * Assigns role to user.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRoleCreate $no_frixion_money_moov_models_user_role_create no_frixion_money_moov_models_user_role_create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsUserrolesPost'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRole
     */
    public function apiV1MerchantsUserrolesPost($no_frixion_money_moov_models_user_role_create = null, string $contentType = self::contentTypes['apiV1MerchantsUserrolesPost'][0])
    {
        list($response) = $this->apiV1MerchantsUserrolesPostWithHttpInfo($no_frixion_money_moov_models_user_role_create, $contentType);
        return $response;
    }

    /**
     * Operation apiV1MerchantsUserrolesPostWithHttpInfo
     *
     * Assigns role to user.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRoleCreate $no_frixion_money_moov_models_user_role_create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsUserrolesPost'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRole, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1MerchantsUserrolesPostWithHttpInfo($no_frixion_money_moov_models_user_role_create = null, string $contentType = self::contentTypes['apiV1MerchantsUserrolesPost'][0])
    {
        $request = $this->apiV1MerchantsUserrolesPostRequest($no_frixion_money_moov_models_user_role_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRole' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRole' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRole', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRole';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRole',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1MerchantsUserrolesPostAsync
     *
     * Assigns role to user.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRoleCreate $no_frixion_money_moov_models_user_role_create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsUserrolesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsUserrolesPostAsync($no_frixion_money_moov_models_user_role_create = null, string $contentType = self::contentTypes['apiV1MerchantsUserrolesPost'][0])
    {
        return $this->apiV1MerchantsUserrolesPostAsyncWithHttpInfo($no_frixion_money_moov_models_user_role_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1MerchantsUserrolesPostAsyncWithHttpInfo
     *
     * Assigns role to user.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRoleCreate $no_frixion_money_moov_models_user_role_create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsUserrolesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1MerchantsUserrolesPostAsyncWithHttpInfo($no_frixion_money_moov_models_user_role_create = null, string $contentType = self::contentTypes['apiV1MerchantsUserrolesPost'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRole';
        $request = $this->apiV1MerchantsUserrolesPostRequest($no_frixion_money_moov_models_user_role_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1MerchantsUserrolesPost'
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRoleCreate $no_frixion_money_moov_models_user_role_create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1MerchantsUserrolesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1MerchantsUserrolesPostRequest($no_frixion_money_moov_models_user_role_create = null, string $contentType = self::contentTypes['apiV1MerchantsUserrolesPost'][0])
    {



        $resourcePath = '/api/v1/merchants/userroles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($no_frixion_money_moov_models_user_role_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($no_frixion_money_moov_models_user_role_create));
            } else {
                $httpBody = $no_frixion_money_moov_models_user_role_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
