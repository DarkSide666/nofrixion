<?php
/**
 * BeneficiariesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Nofrixion\Client\ApiException;
use Nofrixion\Client\Configuration;
use Nofrixion\Client\HeaderSelector;
use Nofrixion\Client\ObjectSerializer;

/**
 * BeneficiariesApi Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BeneficiariesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV1BeneficiariesAuthoriseIdPost' => [
            'application/json',
        ],
        'apiV1BeneficiariesDisableIdPut' => [
            'application/json',
        ],
        'apiV1BeneficiariesEnableIdPut' => [
            'application/json',
        ],
        'apiV1BeneficiariesGet' => [
            'application/json',
        ],
        'apiV1BeneficiariesIdDelete' => [
            'application/json',
        ],
        'apiV1BeneficiariesIdPut' => [
            'application/json',
        ],
        'apiV1BeneficiariesPost' => [
            'application/json',
        ],
        'getBeneficiaryAsync' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV1BeneficiariesAuthoriseIdPost
     *
     * Authorises a beneficiary.
     *
     * @param  string $id The ID of the beneficiary record to authorise. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesAuthoriseIdPost'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1BeneficiariesAuthoriseIdPost($id, string $contentType = self::contentTypes['apiV1BeneficiariesAuthoriseIdPost'][0])
    {
        $this->apiV1BeneficiariesAuthoriseIdPostWithHttpInfo($id, $contentType);
    }

    /**
     * Operation apiV1BeneficiariesAuthoriseIdPostWithHttpInfo
     *
     * Authorises a beneficiary.
     *
     * @param  string $id The ID of the beneficiary record to authorise. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesAuthoriseIdPost'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1BeneficiariesAuthoriseIdPostWithHttpInfo($id, string $contentType = self::contentTypes['apiV1BeneficiariesAuthoriseIdPost'][0])
    {
        $request = $this->apiV1BeneficiariesAuthoriseIdPostRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1BeneficiariesAuthoriseIdPostAsync
     *
     * Authorises a beneficiary.
     *
     * @param  string $id The ID of the beneficiary record to authorise. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesAuthoriseIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1BeneficiariesAuthoriseIdPostAsync($id, string $contentType = self::contentTypes['apiV1BeneficiariesAuthoriseIdPost'][0])
    {
        return $this->apiV1BeneficiariesAuthoriseIdPostAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1BeneficiariesAuthoriseIdPostAsyncWithHttpInfo
     *
     * Authorises a beneficiary.
     *
     * @param  string $id The ID of the beneficiary record to authorise. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesAuthoriseIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1BeneficiariesAuthoriseIdPostAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1BeneficiariesAuthoriseIdPost'][0])
    {
        $returnType = '';
        $request = $this->apiV1BeneficiariesAuthoriseIdPostRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1BeneficiariesAuthoriseIdPost'
     *
     * @param  string $id The ID of the beneficiary record to authorise. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesAuthoriseIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1BeneficiariesAuthoriseIdPostRequest($id, string $contentType = self::contentTypes['apiV1BeneficiariesAuthoriseIdPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1BeneficiariesAuthoriseIdPost'
            );
        }


        $resourcePath = '/api/v1/beneficiaries/authorise/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1BeneficiariesDisableIdPut
     *
     * Attempts to disable a beneficiary. If successful the beneficiary will be disabled.
     *
     * @param  string $id The ID of the beneficiary to disable. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesDisableIdPut'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary
     */
    public function apiV1BeneficiariesDisableIdPut($id, string $contentType = self::contentTypes['apiV1BeneficiariesDisableIdPut'][0])
    {
        list($response) = $this->apiV1BeneficiariesDisableIdPutWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1BeneficiariesDisableIdPutWithHttpInfo
     *
     * Attempts to disable a beneficiary. If successful the beneficiary will be disabled.
     *
     * @param  string $id The ID of the beneficiary to disable. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesDisableIdPut'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1BeneficiariesDisableIdPutWithHttpInfo($id, string $contentType = self::contentTypes['apiV1BeneficiariesDisableIdPut'][0])
    {
        $request = $this->apiV1BeneficiariesDisableIdPutRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1BeneficiariesDisableIdPutAsync
     *
     * Attempts to disable a beneficiary. If successful the beneficiary will be disabled.
     *
     * @param  string $id The ID of the beneficiary to disable. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesDisableIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1BeneficiariesDisableIdPutAsync($id, string $contentType = self::contentTypes['apiV1BeneficiariesDisableIdPut'][0])
    {
        return $this->apiV1BeneficiariesDisableIdPutAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1BeneficiariesDisableIdPutAsyncWithHttpInfo
     *
     * Attempts to disable a beneficiary. If successful the beneficiary will be disabled.
     *
     * @param  string $id The ID of the beneficiary to disable. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesDisableIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1BeneficiariesDisableIdPutAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1BeneficiariesDisableIdPut'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary';
        $request = $this->apiV1BeneficiariesDisableIdPutRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1BeneficiariesDisableIdPut'
     *
     * @param  string $id The ID of the beneficiary to disable. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesDisableIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1BeneficiariesDisableIdPutRequest($id, string $contentType = self::contentTypes['apiV1BeneficiariesDisableIdPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1BeneficiariesDisableIdPut'
            );
        }


        $resourcePath = '/api/v1/beneficiaries/disable/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1BeneficiariesEnableIdPut
     *
     * Attempts to enable a beneficiary. If successful the beneficiary will be enabled.
     *
     * @param  string $id The ID of the beneficiary to enable. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesEnableIdPut'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary
     */
    public function apiV1BeneficiariesEnableIdPut($id, string $contentType = self::contentTypes['apiV1BeneficiariesEnableIdPut'][0])
    {
        list($response) = $this->apiV1BeneficiariesEnableIdPutWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1BeneficiariesEnableIdPutWithHttpInfo
     *
     * Attempts to enable a beneficiary. If successful the beneficiary will be enabled.
     *
     * @param  string $id The ID of the beneficiary to enable. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesEnableIdPut'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1BeneficiariesEnableIdPutWithHttpInfo($id, string $contentType = self::contentTypes['apiV1BeneficiariesEnableIdPut'][0])
    {
        $request = $this->apiV1BeneficiariesEnableIdPutRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1BeneficiariesEnableIdPutAsync
     *
     * Attempts to enable a beneficiary. If successful the beneficiary will be enabled.
     *
     * @param  string $id The ID of the beneficiary to enable. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesEnableIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1BeneficiariesEnableIdPutAsync($id, string $contentType = self::contentTypes['apiV1BeneficiariesEnableIdPut'][0])
    {
        return $this->apiV1BeneficiariesEnableIdPutAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1BeneficiariesEnableIdPutAsyncWithHttpInfo
     *
     * Attempts to enable a beneficiary. If successful the beneficiary will be enabled.
     *
     * @param  string $id The ID of the beneficiary to enable. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesEnableIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1BeneficiariesEnableIdPutAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1BeneficiariesEnableIdPut'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary';
        $request = $this->apiV1BeneficiariesEnableIdPutRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1BeneficiariesEnableIdPut'
     *
     * @param  string $id The ID of the beneficiary to enable. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesEnableIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1BeneficiariesEnableIdPutRequest($id, string $contentType = self::contentTypes['apiV1BeneficiariesEnableIdPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1BeneficiariesEnableIdPut'
            );
        }


        $resourcePath = '/api/v1/beneficiaries/enable/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1BeneficiariesGet
     *
     * Gets a list of all beneficiaries.
     *
     * @param  string $merchant_id Optional. The ID of the merchant to retrieve the beneficiaries for.               If not set beneficiaries for all merchants the user has access to will be returned (optional)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string $search The text filter used to retrieve the records. (optional)
     * @param  string $currency The currency filter used to retrieve the records.. (optional)
     * @param  bool $include_disabled If set to true will include disabled beneficiaries as well (optional, default to false)
     * @param  string $sort Optional expression to sort the order of the beneficiaries. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryPageResponse
     */
    public function apiV1BeneficiariesGet($merchant_id = null, $page_number = null, $page_size = null, $search = null, $currency = null, $include_disabled = false, $sort = null, string $contentType = self::contentTypes['apiV1BeneficiariesGet'][0])
    {
        list($response) = $this->apiV1BeneficiariesGetWithHttpInfo($merchant_id, $page_number, $page_size, $search, $currency, $include_disabled, $sort, $contentType);
        return $response;
    }

    /**
     * Operation apiV1BeneficiariesGetWithHttpInfo
     *
     * Gets a list of all beneficiaries.
     *
     * @param  string $merchant_id Optional. The ID of the merchant to retrieve the beneficiaries for.               If not set beneficiaries for all merchants the user has access to will be returned (optional)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string $search The text filter used to retrieve the records. (optional)
     * @param  string $currency The currency filter used to retrieve the records.. (optional)
     * @param  bool $include_disabled If set to true will include disabled beneficiaries as well (optional, default to false)
     * @param  string $sort Optional expression to sort the order of the beneficiaries. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1BeneficiariesGetWithHttpInfo($merchant_id = null, $page_number = null, $page_size = null, $search = null, $currency = null, $include_disabled = false, $sort = null, string $contentType = self::contentTypes['apiV1BeneficiariesGet'][0])
    {
        $request = $this->apiV1BeneficiariesGetRequest($merchant_id, $page_number, $page_size, $search, $currency, $include_disabled, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryPageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryPageResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryPageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryPageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryPageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1BeneficiariesGetAsync
     *
     * Gets a list of all beneficiaries.
     *
     * @param  string $merchant_id Optional. The ID of the merchant to retrieve the beneficiaries for.               If not set beneficiaries for all merchants the user has access to will be returned (optional)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string $search The text filter used to retrieve the records. (optional)
     * @param  string $currency The currency filter used to retrieve the records.. (optional)
     * @param  bool $include_disabled If set to true will include disabled beneficiaries as well (optional, default to false)
     * @param  string $sort Optional expression to sort the order of the beneficiaries. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1BeneficiariesGetAsync($merchant_id = null, $page_number = null, $page_size = null, $search = null, $currency = null, $include_disabled = false, $sort = null, string $contentType = self::contentTypes['apiV1BeneficiariesGet'][0])
    {
        return $this->apiV1BeneficiariesGetAsyncWithHttpInfo($merchant_id, $page_number, $page_size, $search, $currency, $include_disabled, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1BeneficiariesGetAsyncWithHttpInfo
     *
     * Gets a list of all beneficiaries.
     *
     * @param  string $merchant_id Optional. The ID of the merchant to retrieve the beneficiaries for.               If not set beneficiaries for all merchants the user has access to will be returned (optional)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string $search The text filter used to retrieve the records. (optional)
     * @param  string $currency The currency filter used to retrieve the records.. (optional)
     * @param  bool $include_disabled If set to true will include disabled beneficiaries as well (optional, default to false)
     * @param  string $sort Optional expression to sort the order of the beneficiaries. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1BeneficiariesGetAsyncWithHttpInfo($merchant_id = null, $page_number = null, $page_size = null, $search = null, $currency = null, $include_disabled = false, $sort = null, string $contentType = self::contentTypes['apiV1BeneficiariesGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryPageResponse';
        $request = $this->apiV1BeneficiariesGetRequest($merchant_id, $page_number, $page_size, $search, $currency, $include_disabled, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1BeneficiariesGet'
     *
     * @param  string $merchant_id Optional. The ID of the merchant to retrieve the beneficiaries for.               If not set beneficiaries for all merchants the user has access to will be returned (optional)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string $search The text filter used to retrieve the records. (optional)
     * @param  string $currency The currency filter used to retrieve the records.. (optional)
     * @param  bool $include_disabled If set to true will include disabled beneficiaries as well (optional, default to false)
     * @param  string $sort Optional expression to sort the order of the beneficiaries. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1BeneficiariesGetRequest($merchant_id = null, $page_number = null, $page_size = null, $search = null, $currency = null, $include_disabled = false, $sort = null, string $contentType = self::contentTypes['apiV1BeneficiariesGet'][0])
    {









        $resourcePath = '/api/v1/beneficiaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $merchant_id,
            'merchantID', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_number,
            'pageNumber', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_disabled,
            'includeDisabled', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1BeneficiariesIdDelete
     *
     * Deletes a beneficiary
     *
     * @param  string $id The id of the beneficiary to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesIdDelete'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1BeneficiariesIdDelete($id, string $contentType = self::contentTypes['apiV1BeneficiariesIdDelete'][0])
    {
        $this->apiV1BeneficiariesIdDeleteWithHttpInfo($id, $contentType);
    }

    /**
     * Operation apiV1BeneficiariesIdDeleteWithHttpInfo
     *
     * Deletes a beneficiary
     *
     * @param  string $id The id of the beneficiary to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesIdDelete'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1BeneficiariesIdDeleteWithHttpInfo($id, string $contentType = self::contentTypes['apiV1BeneficiariesIdDelete'][0])
    {
        $request = $this->apiV1BeneficiariesIdDeleteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1BeneficiariesIdDeleteAsync
     *
     * Deletes a beneficiary
     *
     * @param  string $id The id of the beneficiary to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1BeneficiariesIdDeleteAsync($id, string $contentType = self::contentTypes['apiV1BeneficiariesIdDelete'][0])
    {
        return $this->apiV1BeneficiariesIdDeleteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1BeneficiariesIdDeleteAsyncWithHttpInfo
     *
     * Deletes a beneficiary
     *
     * @param  string $id The id of the beneficiary to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1BeneficiariesIdDeleteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1BeneficiariesIdDelete'][0])
    {
        $returnType = '';
        $request = $this->apiV1BeneficiariesIdDeleteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1BeneficiariesIdDelete'
     *
     * @param  string $id The id of the beneficiary to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1BeneficiariesIdDeleteRequest($id, string $contentType = self::contentTypes['apiV1BeneficiariesIdDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1BeneficiariesIdDelete'
            );
        }


        $resourcePath = '/api/v1/beneficiaries/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1BeneficiariesIdPut
     *
     * Updates a beneficiary.
     *
     * @param  string $id The ID of the beneficiary to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryUpdate $no_frixion_money_moov_models_beneficiary_update The beneficiary to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesIdPut'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary
     */
    public function apiV1BeneficiariesIdPut($id, $no_frixion_money_moov_models_beneficiary_update = null, string $contentType = self::contentTypes['apiV1BeneficiariesIdPut'][0])
    {
        list($response) = $this->apiV1BeneficiariesIdPutWithHttpInfo($id, $no_frixion_money_moov_models_beneficiary_update, $contentType);
        return $response;
    }

    /**
     * Operation apiV1BeneficiariesIdPutWithHttpInfo
     *
     * Updates a beneficiary.
     *
     * @param  string $id The ID of the beneficiary to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryUpdate $no_frixion_money_moov_models_beneficiary_update The beneficiary to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesIdPut'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1BeneficiariesIdPutWithHttpInfo($id, $no_frixion_money_moov_models_beneficiary_update = null, string $contentType = self::contentTypes['apiV1BeneficiariesIdPut'][0])
    {
        $request = $this->apiV1BeneficiariesIdPutRequest($id, $no_frixion_money_moov_models_beneficiary_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1BeneficiariesIdPutAsync
     *
     * Updates a beneficiary.
     *
     * @param  string $id The ID of the beneficiary to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryUpdate $no_frixion_money_moov_models_beneficiary_update The beneficiary to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1BeneficiariesIdPutAsync($id, $no_frixion_money_moov_models_beneficiary_update = null, string $contentType = self::contentTypes['apiV1BeneficiariesIdPut'][0])
    {
        return $this->apiV1BeneficiariesIdPutAsyncWithHttpInfo($id, $no_frixion_money_moov_models_beneficiary_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1BeneficiariesIdPutAsyncWithHttpInfo
     *
     * Updates a beneficiary.
     *
     * @param  string $id The ID of the beneficiary to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryUpdate $no_frixion_money_moov_models_beneficiary_update The beneficiary to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1BeneficiariesIdPutAsyncWithHttpInfo($id, $no_frixion_money_moov_models_beneficiary_update = null, string $contentType = self::contentTypes['apiV1BeneficiariesIdPut'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary';
        $request = $this->apiV1BeneficiariesIdPutRequest($id, $no_frixion_money_moov_models_beneficiary_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1BeneficiariesIdPut'
     *
     * @param  string $id The ID of the beneficiary to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryUpdate $no_frixion_money_moov_models_beneficiary_update The beneficiary to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1BeneficiariesIdPutRequest($id, $no_frixion_money_moov_models_beneficiary_update = null, string $contentType = self::contentTypes['apiV1BeneficiariesIdPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1BeneficiariesIdPut'
            );
        }



        $resourcePath = '/api/v1/beneficiaries/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($no_frixion_money_moov_models_beneficiary_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($no_frixion_money_moov_models_beneficiary_update));
            } else {
                $httpBody = $no_frixion_money_moov_models_beneficiary_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1BeneficiariesPost
     *
     * Creates a new beneficiary.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryCreate $no_frixion_money_moov_models_beneficiary_create The beneficiary to create. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesPost'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary
     */
    public function apiV1BeneficiariesPost($no_frixion_money_moov_models_beneficiary_create = null, string $contentType = self::contentTypes['apiV1BeneficiariesPost'][0])
    {
        list($response) = $this->apiV1BeneficiariesPostWithHttpInfo($no_frixion_money_moov_models_beneficiary_create, $contentType);
        return $response;
    }

    /**
     * Operation apiV1BeneficiariesPostWithHttpInfo
     *
     * Creates a new beneficiary.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryCreate $no_frixion_money_moov_models_beneficiary_create The beneficiary to create. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesPost'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1BeneficiariesPostWithHttpInfo($no_frixion_money_moov_models_beneficiary_create = null, string $contentType = self::contentTypes['apiV1BeneficiariesPost'][0])
    {
        $request = $this->apiV1BeneficiariesPostRequest($no_frixion_money_moov_models_beneficiary_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1BeneficiariesPostAsync
     *
     * Creates a new beneficiary.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryCreate $no_frixion_money_moov_models_beneficiary_create The beneficiary to create. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1BeneficiariesPostAsync($no_frixion_money_moov_models_beneficiary_create = null, string $contentType = self::contentTypes['apiV1BeneficiariesPost'][0])
    {
        return $this->apiV1BeneficiariesPostAsyncWithHttpInfo($no_frixion_money_moov_models_beneficiary_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1BeneficiariesPostAsyncWithHttpInfo
     *
     * Creates a new beneficiary.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryCreate $no_frixion_money_moov_models_beneficiary_create The beneficiary to create. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1BeneficiariesPostAsyncWithHttpInfo($no_frixion_money_moov_models_beneficiary_create = null, string $contentType = self::contentTypes['apiV1BeneficiariesPost'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary';
        $request = $this->apiV1BeneficiariesPostRequest($no_frixion_money_moov_models_beneficiary_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1BeneficiariesPost'
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryCreate $no_frixion_money_moov_models_beneficiary_create The beneficiary to create. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1BeneficiariesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1BeneficiariesPostRequest($no_frixion_money_moov_models_beneficiary_create = null, string $contentType = self::contentTypes['apiV1BeneficiariesPost'][0])
    {



        $resourcePath = '/api/v1/beneficiaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($no_frixion_money_moov_models_beneficiary_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($no_frixion_money_moov_models_beneficiary_create));
            } else {
                $httpBody = $no_frixion_money_moov_models_beneficiary_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBeneficiaryAsync
     *
     * Get&#39;s a beneficiary by beneficiary ID.
     *
     * @param  string $id The beneficiaryID of the beneficiary to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBeneficiaryAsync'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary
     */
    public function getBeneficiaryAsync($id, string $contentType = self::contentTypes['getBeneficiaryAsync'][0])
    {
        list($response) = $this->getBeneficiaryAsyncWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getBeneficiaryAsyncWithHttpInfo
     *
     * Get&#39;s a beneficiary by beneficiary ID.
     *
     * @param  string $id The beneficiaryID of the beneficiary to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBeneficiaryAsync'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBeneficiaryAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getBeneficiaryAsync'][0])
    {
        $request = $this->getBeneficiaryAsyncRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBeneficiaryAsyncAsync
     *
     * Get&#39;s a beneficiary by beneficiary ID.
     *
     * @param  string $id The beneficiaryID of the beneficiary to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBeneficiaryAsync'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBeneficiaryAsyncAsync($id, string $contentType = self::contentTypes['getBeneficiaryAsync'][0])
    {
        return $this->getBeneficiaryAsyncAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBeneficiaryAsyncAsyncWithHttpInfo
     *
     * Get&#39;s a beneficiary by beneficiary ID.
     *
     * @param  string $id The beneficiaryID of the beneficiary to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBeneficiaryAsync'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBeneficiaryAsyncAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getBeneficiaryAsync'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiary';
        $request = $this->getBeneficiaryAsyncRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBeneficiaryAsync'
     *
     * @param  string $id The beneficiaryID of the beneficiary to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBeneficiaryAsync'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBeneficiaryAsyncRequest($id, string $contentType = self::contentTypes['getBeneficiaryAsync'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getBeneficiaryAsync'
            );
        }


        $resourcePath = '/api/v1/beneficiaries/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
