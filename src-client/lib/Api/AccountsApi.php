<?php
/**
 * AccountsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Nofrixion\Client\ApiException;
use Nofrixion\Client\Configuration;
use Nofrixion\Client\HeaderSelector;
use Nofrixion\Client\ObjectSerializer;

/**
 * AccountsApi Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AccountsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV1AccountsAccountIDPayoutsGet' => [
            'application/json',
        ],
        'apiV1AccountsAccountIDStatementsIdGet' => [
            'application/json',
        ],
        'apiV1AccountsAccountIDStatementsPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1AccountsAccountIDTransactionsGet' => [
            'application/json',
        ],
        'apiV1AccountsAccountIDTransactionsIdGet' => [
            'application/json',
        ],
        'apiV1AccountsArchiveIdDelete' => [
            'application/json',
        ],
        'apiV1AccountsGet' => [
            'application/json',
        ],
        'apiV1AccountsIdPut' => [
            'application/json',
        ],
        'apiV1AccountsPagedGet' => [
            'application/json',
        ],
        'apiV1AccountsPost' => [
            'application/json',
        ],
        'apiV1AccountsStatementsDelete' => [
            'application/json',
        ],
        'apiV1AccountsStatementsGet' => [
            'application/json',
        ],
        'apiV1AccountsUnarchiveIdPut' => [
            'application/json',
        ],
        'getAccountAsync' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV1AccountsAccountIDPayoutsGet
     *
     * Gets a list of all payouts for a specific account.
     *
     * @param  string $account_id Required. The ID of the account to get the payouts for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string[] $statuses An optional status filter for the payout records. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payouts created after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payouts created up until this date. (optional)
     * @param  string $search The text filter to apply to retrieve payouts with a similar title, description, merchant name or contact information. (optional)
     * @param  string $currency The currency filter to apply to retrieve payouts with this currency. (optional)
     * @param  float $min_amount The amount filter to apply to retrieve payouts that exceed this amount. (optional)
     * @param  float $max_amount The amount filter to apply to retrieve payouts that don&#39;t exceed this amount. (optional)
     * @param  string[] $tags The tag filter to apply to retrieve payouts with at least one of these tags. (optional)
     * @param  string $sort Optional expression to sort the order of the payouts. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDPayoutsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse
     */
    public function apiV1AccountsAccountIDPayoutsGet($account_id, $page_number = null, $page_size = null, $statuses = null, $from_date = null, $to_date = null, $search = null, $currency = null, $min_amount = null, $max_amount = null, $tags = null, $sort = null, string $contentType = self::contentTypes['apiV1AccountsAccountIDPayoutsGet'][0])
    {
        list($response) = $this->apiV1AccountsAccountIDPayoutsGetWithHttpInfo($account_id, $page_number, $page_size, $statuses, $from_date, $to_date, $search, $currency, $min_amount, $max_amount, $tags, $sort, $contentType);
        return $response;
    }

    /**
     * Operation apiV1AccountsAccountIDPayoutsGetWithHttpInfo
     *
     * Gets a list of all payouts for a specific account.
     *
     * @param  string $account_id Required. The ID of the account to get the payouts for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string[] $statuses An optional status filter for the payout records. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payouts created after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payouts created up until this date. (optional)
     * @param  string $search The text filter to apply to retrieve payouts with a similar title, description, merchant name or contact information. (optional)
     * @param  string $currency The currency filter to apply to retrieve payouts with this currency. (optional)
     * @param  float $min_amount The amount filter to apply to retrieve payouts that exceed this amount. (optional)
     * @param  float $max_amount The amount filter to apply to retrieve payouts that don&#39;t exceed this amount. (optional)
     * @param  string[] $tags The tag filter to apply to retrieve payouts with at least one of these tags. (optional)
     * @param  string $sort Optional expression to sort the order of the payouts. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDPayoutsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1AccountsAccountIDPayoutsGetWithHttpInfo($account_id, $page_number = null, $page_size = null, $statuses = null, $from_date = null, $to_date = null, $search = null, $currency = null, $min_amount = null, $max_amount = null, $tags = null, $sort = null, string $contentType = self::contentTypes['apiV1AccountsAccountIDPayoutsGet'][0])
    {
        $request = $this->apiV1AccountsAccountIDPayoutsGetRequest($account_id, $page_number, $page_size, $statuses, $from_date, $to_date, $search, $currency, $min_amount, $max_amount, $tags, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1AccountsAccountIDPayoutsGetAsync
     *
     * Gets a list of all payouts for a specific account.
     *
     * @param  string $account_id Required. The ID of the account to get the payouts for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string[] $statuses An optional status filter for the payout records. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payouts created after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payouts created up until this date. (optional)
     * @param  string $search The text filter to apply to retrieve payouts with a similar title, description, merchant name or contact information. (optional)
     * @param  string $currency The currency filter to apply to retrieve payouts with this currency. (optional)
     * @param  float $min_amount The amount filter to apply to retrieve payouts that exceed this amount. (optional)
     * @param  float $max_amount The amount filter to apply to retrieve payouts that don&#39;t exceed this amount. (optional)
     * @param  string[] $tags The tag filter to apply to retrieve payouts with at least one of these tags. (optional)
     * @param  string $sort Optional expression to sort the order of the payouts. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDPayoutsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsAccountIDPayoutsGetAsync($account_id, $page_number = null, $page_size = null, $statuses = null, $from_date = null, $to_date = null, $search = null, $currency = null, $min_amount = null, $max_amount = null, $tags = null, $sort = null, string $contentType = self::contentTypes['apiV1AccountsAccountIDPayoutsGet'][0])
    {
        return $this->apiV1AccountsAccountIDPayoutsGetAsyncWithHttpInfo($account_id, $page_number, $page_size, $statuses, $from_date, $to_date, $search, $currency, $min_amount, $max_amount, $tags, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1AccountsAccountIDPayoutsGetAsyncWithHttpInfo
     *
     * Gets a list of all payouts for a specific account.
     *
     * @param  string $account_id Required. The ID of the account to get the payouts for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string[] $statuses An optional status filter for the payout records. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payouts created after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payouts created up until this date. (optional)
     * @param  string $search The text filter to apply to retrieve payouts with a similar title, description, merchant name or contact information. (optional)
     * @param  string $currency The currency filter to apply to retrieve payouts with this currency. (optional)
     * @param  float $min_amount The amount filter to apply to retrieve payouts that exceed this amount. (optional)
     * @param  float $max_amount The amount filter to apply to retrieve payouts that don&#39;t exceed this amount. (optional)
     * @param  string[] $tags The tag filter to apply to retrieve payouts with at least one of these tags. (optional)
     * @param  string $sort Optional expression to sort the order of the payouts. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDPayoutsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsAccountIDPayoutsGetAsyncWithHttpInfo($account_id, $page_number = null, $page_size = null, $statuses = null, $from_date = null, $to_date = null, $search = null, $currency = null, $min_amount = null, $max_amount = null, $tags = null, $sort = null, string $contentType = self::contentTypes['apiV1AccountsAccountIDPayoutsGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse';
        $request = $this->apiV1AccountsAccountIDPayoutsGetRequest($account_id, $page_number, $page_size, $statuses, $from_date, $to_date, $search, $currency, $min_amount, $max_amount, $tags, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1AccountsAccountIDPayoutsGet'
     *
     * @param  string $account_id Required. The ID of the account to get the payouts for. (required)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string[] $statuses An optional status filter for the payout records. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payouts created after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payouts created up until this date. (optional)
     * @param  string $search The text filter to apply to retrieve payouts with a similar title, description, merchant name or contact information. (optional)
     * @param  string $currency The currency filter to apply to retrieve payouts with this currency. (optional)
     * @param  float $min_amount The amount filter to apply to retrieve payouts that exceed this amount. (optional)
     * @param  float $max_amount The amount filter to apply to retrieve payouts that don&#39;t exceed this amount. (optional)
     * @param  string[] $tags The tag filter to apply to retrieve payouts with at least one of these tags. (optional)
     * @param  string $sort Optional expression to sort the order of the payouts. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDPayoutsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1AccountsAccountIDPayoutsGetRequest($account_id, $page_number = null, $page_size = null, $statuses = null, $from_date = null, $to_date = null, $search = null, $currency = null, $min_amount = null, $max_amount = null, $tags = null, $sort = null, string $contentType = self::contentTypes['apiV1AccountsAccountIDPayoutsGet'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling apiV1AccountsAccountIDPayoutsGet'
            );
        }













        $resourcePath = '/api/v1/accounts/{accountID}/payouts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_number,
            'pageNumber', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_amount,
            'minAmount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_amount,
            'maxAmount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tags,
            'tags', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1AccountsAccountIDStatementsIdGet
     *
     * Gets the specified statement from the user&#39;s cache.
     *
     * @param  string $account_id The account id (required)
     * @param  string $id ID of the requested statement. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDStatementsIdGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1AccountsAccountIDStatementsIdGet($account_id, $id, string $contentType = self::contentTypes['apiV1AccountsAccountIDStatementsIdGet'][0])
    {
        $this->apiV1AccountsAccountIDStatementsIdGetWithHttpInfo($account_id, $id, $contentType);
    }

    /**
     * Operation apiV1AccountsAccountIDStatementsIdGetWithHttpInfo
     *
     * Gets the specified statement from the user&#39;s cache.
     *
     * @param  string $account_id The account id (required)
     * @param  string $id ID of the requested statement. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDStatementsIdGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1AccountsAccountIDStatementsIdGetWithHttpInfo($account_id, $id, string $contentType = self::contentTypes['apiV1AccountsAccountIDStatementsIdGet'][0])
    {
        $request = $this->apiV1AccountsAccountIDStatementsIdGetRequest($account_id, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1AccountsAccountIDStatementsIdGetAsync
     *
     * Gets the specified statement from the user&#39;s cache.
     *
     * @param  string $account_id The account id (required)
     * @param  string $id ID of the requested statement. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDStatementsIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsAccountIDStatementsIdGetAsync($account_id, $id, string $contentType = self::contentTypes['apiV1AccountsAccountIDStatementsIdGet'][0])
    {
        return $this->apiV1AccountsAccountIDStatementsIdGetAsyncWithHttpInfo($account_id, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1AccountsAccountIDStatementsIdGetAsyncWithHttpInfo
     *
     * Gets the specified statement from the user&#39;s cache.
     *
     * @param  string $account_id The account id (required)
     * @param  string $id ID of the requested statement. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDStatementsIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsAccountIDStatementsIdGetAsyncWithHttpInfo($account_id, $id, string $contentType = self::contentTypes['apiV1AccountsAccountIDStatementsIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV1AccountsAccountIDStatementsIdGetRequest($account_id, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1AccountsAccountIDStatementsIdGet'
     *
     * @param  string $account_id The account id (required)
     * @param  string $id ID of the requested statement. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDStatementsIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1AccountsAccountIDStatementsIdGetRequest($account_id, $id, string $contentType = self::contentTypes['apiV1AccountsAccountIDStatementsIdGet'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling apiV1AccountsAccountIDStatementsIdGet'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1AccountsAccountIDStatementsIdGet'
            );
        }


        $resourcePath = '/api/v1/accounts/{accountID}/statements/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1AccountsAccountIDStatementsPost
     *
     * Sends a message to the transaction statement queue to generate a statement with the supplied parameters.
     *
     * @param  string $account_id The account id (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsGenerateStatementRequest $no_frixion_money_moov_models_generate_statement_request Request object containing the parameters for the statement generation. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDStatementsPost'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1AccountsAccountIDStatementsPost($account_id, $no_frixion_money_moov_models_generate_statement_request = null, string $contentType = self::contentTypes['apiV1AccountsAccountIDStatementsPost'][0])
    {
        $this->apiV1AccountsAccountIDStatementsPostWithHttpInfo($account_id, $no_frixion_money_moov_models_generate_statement_request, $contentType);
    }

    /**
     * Operation apiV1AccountsAccountIDStatementsPostWithHttpInfo
     *
     * Sends a message to the transaction statement queue to generate a statement with the supplied parameters.
     *
     * @param  string $account_id The account id (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsGenerateStatementRequest $no_frixion_money_moov_models_generate_statement_request Request object containing the parameters for the statement generation. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDStatementsPost'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1AccountsAccountIDStatementsPostWithHttpInfo($account_id, $no_frixion_money_moov_models_generate_statement_request = null, string $contentType = self::contentTypes['apiV1AccountsAccountIDStatementsPost'][0])
    {
        $request = $this->apiV1AccountsAccountIDStatementsPostRequest($account_id, $no_frixion_money_moov_models_generate_statement_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1AccountsAccountIDStatementsPostAsync
     *
     * Sends a message to the transaction statement queue to generate a statement with the supplied parameters.
     *
     * @param  string $account_id The account id (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsGenerateStatementRequest $no_frixion_money_moov_models_generate_statement_request Request object containing the parameters for the statement generation. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDStatementsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsAccountIDStatementsPostAsync($account_id, $no_frixion_money_moov_models_generate_statement_request = null, string $contentType = self::contentTypes['apiV1AccountsAccountIDStatementsPost'][0])
    {
        return $this->apiV1AccountsAccountIDStatementsPostAsyncWithHttpInfo($account_id, $no_frixion_money_moov_models_generate_statement_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1AccountsAccountIDStatementsPostAsyncWithHttpInfo
     *
     * Sends a message to the transaction statement queue to generate a statement with the supplied parameters.
     *
     * @param  string $account_id The account id (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsGenerateStatementRequest $no_frixion_money_moov_models_generate_statement_request Request object containing the parameters for the statement generation. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDStatementsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsAccountIDStatementsPostAsyncWithHttpInfo($account_id, $no_frixion_money_moov_models_generate_statement_request = null, string $contentType = self::contentTypes['apiV1AccountsAccountIDStatementsPost'][0])
    {
        $returnType = '';
        $request = $this->apiV1AccountsAccountIDStatementsPostRequest($account_id, $no_frixion_money_moov_models_generate_statement_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1AccountsAccountIDStatementsPost'
     *
     * @param  string $account_id The account id (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsGenerateStatementRequest $no_frixion_money_moov_models_generate_statement_request Request object containing the parameters for the statement generation. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDStatementsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1AccountsAccountIDStatementsPostRequest($account_id, $no_frixion_money_moov_models_generate_statement_request = null, string $contentType = self::contentTypes['apiV1AccountsAccountIDStatementsPost'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling apiV1AccountsAccountIDStatementsPost'
            );
        }



        $resourcePath = '/api/v1/accounts/{accountID}/statements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($no_frixion_money_moov_models_generate_statement_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($no_frixion_money_moov_models_generate_statement_request));
            } else {
                $httpBody = $no_frixion_money_moov_models_generate_statement_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1AccountsAccountIDTransactionsGet
     *
     * Get a list of the transactions for a single payment account.
     *
     * @param  string $account_id The ID of the account to retrieve transactions for. (required)
     * @param  \DateTime $from_date The start date to retrieve transactions from. (optional)
     * @param  int $page_number The page number to retrieve. (optional)
     * @param  int $page_size The number of transactions per page. (optional, default to 20)
     * @param  \DateTime $to_date The end date to retrieve transactions from. (optional)
     * @param  string $credit_type The type of transactions to retrieve from. (optional)
     * @param  string $search The text filter to apply to retrieve transactions with a similar title, description, merchant name. (optional)
     * @param  string $sort Optional expression to sort the order of the transactions. Example \&quot;Amount desc,Inserted asc\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDTransactionsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransactionPageResponse
     */
    public function apiV1AccountsAccountIDTransactionsGet($account_id, $from_date = null, $page_number = null, $page_size = 20, $to_date = null, $credit_type = null, $search = null, $sort = null, string $contentType = self::contentTypes['apiV1AccountsAccountIDTransactionsGet'][0])
    {
        list($response) = $this->apiV1AccountsAccountIDTransactionsGetWithHttpInfo($account_id, $from_date, $page_number, $page_size, $to_date, $credit_type, $search, $sort, $contentType);
        return $response;
    }

    /**
     * Operation apiV1AccountsAccountIDTransactionsGetWithHttpInfo
     *
     * Get a list of the transactions for a single payment account.
     *
     * @param  string $account_id The ID of the account to retrieve transactions for. (required)
     * @param  \DateTime $from_date The start date to retrieve transactions from. (optional)
     * @param  int $page_number The page number to retrieve. (optional)
     * @param  int $page_size The number of transactions per page. (optional, default to 20)
     * @param  \DateTime $to_date The end date to retrieve transactions from. (optional)
     * @param  string $credit_type The type of transactions to retrieve from. (optional)
     * @param  string $search The text filter to apply to retrieve transactions with a similar title, description, merchant name. (optional)
     * @param  string $sort Optional expression to sort the order of the transactions. Example \&quot;Amount desc,Inserted asc\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDTransactionsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransactionPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1AccountsAccountIDTransactionsGetWithHttpInfo($account_id, $from_date = null, $page_number = null, $page_size = 20, $to_date = null, $credit_type = null, $search = null, $sort = null, string $contentType = self::contentTypes['apiV1AccountsAccountIDTransactionsGet'][0])
    {
        $request = $this->apiV1AccountsAccountIDTransactionsGetRequest($account_id, $from_date, $page_number, $page_size, $to_date, $credit_type, $search, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransactionPageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransactionPageResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransactionPageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransactionPageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransactionPageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1AccountsAccountIDTransactionsGetAsync
     *
     * Get a list of the transactions for a single payment account.
     *
     * @param  string $account_id The ID of the account to retrieve transactions for. (required)
     * @param  \DateTime $from_date The start date to retrieve transactions from. (optional)
     * @param  int $page_number The page number to retrieve. (optional)
     * @param  int $page_size The number of transactions per page. (optional, default to 20)
     * @param  \DateTime $to_date The end date to retrieve transactions from. (optional)
     * @param  string $credit_type The type of transactions to retrieve from. (optional)
     * @param  string $search The text filter to apply to retrieve transactions with a similar title, description, merchant name. (optional)
     * @param  string $sort Optional expression to sort the order of the transactions. Example \&quot;Amount desc,Inserted asc\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDTransactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsAccountIDTransactionsGetAsync($account_id, $from_date = null, $page_number = null, $page_size = 20, $to_date = null, $credit_type = null, $search = null, $sort = null, string $contentType = self::contentTypes['apiV1AccountsAccountIDTransactionsGet'][0])
    {
        return $this->apiV1AccountsAccountIDTransactionsGetAsyncWithHttpInfo($account_id, $from_date, $page_number, $page_size, $to_date, $credit_type, $search, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1AccountsAccountIDTransactionsGetAsyncWithHttpInfo
     *
     * Get a list of the transactions for a single payment account.
     *
     * @param  string $account_id The ID of the account to retrieve transactions for. (required)
     * @param  \DateTime $from_date The start date to retrieve transactions from. (optional)
     * @param  int $page_number The page number to retrieve. (optional)
     * @param  int $page_size The number of transactions per page. (optional, default to 20)
     * @param  \DateTime $to_date The end date to retrieve transactions from. (optional)
     * @param  string $credit_type The type of transactions to retrieve from. (optional)
     * @param  string $search The text filter to apply to retrieve transactions with a similar title, description, merchant name. (optional)
     * @param  string $sort Optional expression to sort the order of the transactions. Example \&quot;Amount desc,Inserted asc\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDTransactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsAccountIDTransactionsGetAsyncWithHttpInfo($account_id, $from_date = null, $page_number = null, $page_size = 20, $to_date = null, $credit_type = null, $search = null, $sort = null, string $contentType = self::contentTypes['apiV1AccountsAccountIDTransactionsGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransactionPageResponse';
        $request = $this->apiV1AccountsAccountIDTransactionsGetRequest($account_id, $from_date, $page_number, $page_size, $to_date, $credit_type, $search, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1AccountsAccountIDTransactionsGet'
     *
     * @param  string $account_id The ID of the account to retrieve transactions for. (required)
     * @param  \DateTime $from_date The start date to retrieve transactions from. (optional)
     * @param  int $page_number The page number to retrieve. (optional)
     * @param  int $page_size The number of transactions per page. (optional, default to 20)
     * @param  \DateTime $to_date The end date to retrieve transactions from. (optional)
     * @param  string $credit_type The type of transactions to retrieve from. (optional)
     * @param  string $search The text filter to apply to retrieve transactions with a similar title, description, merchant name. (optional)
     * @param  string $sort Optional expression to sort the order of the transactions. Example \&quot;Amount desc,Inserted asc\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDTransactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1AccountsAccountIDTransactionsGetRequest($account_id, $from_date = null, $page_number = null, $page_size = 20, $to_date = null, $credit_type = null, $search = null, $sort = null, string $contentType = self::contentTypes['apiV1AccountsAccountIDTransactionsGet'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling apiV1AccountsAccountIDTransactionsGet'
            );
        }









        $resourcePath = '/api/v1/accounts/{accountID}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_number,
            'pageNumber', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $credit_type,
            'creditType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1AccountsAccountIDTransactionsIdGet
     *
     * Get a transaction.
     *
     * @param  string $account_id The ID of the account to retrieve transactions for. (required)
     * @param  string $id The transaction ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDTransactionsIdGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransaction
     */
    public function apiV1AccountsAccountIDTransactionsIdGet($account_id, $id, string $contentType = self::contentTypes['apiV1AccountsAccountIDTransactionsIdGet'][0])
    {
        list($response) = $this->apiV1AccountsAccountIDTransactionsIdGetWithHttpInfo($account_id, $id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1AccountsAccountIDTransactionsIdGetWithHttpInfo
     *
     * Get a transaction.
     *
     * @param  string $account_id The ID of the account to retrieve transactions for. (required)
     * @param  string $id The transaction ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDTransactionsIdGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1AccountsAccountIDTransactionsIdGetWithHttpInfo($account_id, $id, string $contentType = self::contentTypes['apiV1AccountsAccountIDTransactionsIdGet'][0])
    {
        $request = $this->apiV1AccountsAccountIDTransactionsIdGetRequest($account_id, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransaction' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransaction' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransaction', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransaction';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1AccountsAccountIDTransactionsIdGetAsync
     *
     * Get a transaction.
     *
     * @param  string $account_id The ID of the account to retrieve transactions for. (required)
     * @param  string $id The transaction ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDTransactionsIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsAccountIDTransactionsIdGetAsync($account_id, $id, string $contentType = self::contentTypes['apiV1AccountsAccountIDTransactionsIdGet'][0])
    {
        return $this->apiV1AccountsAccountIDTransactionsIdGetAsyncWithHttpInfo($account_id, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1AccountsAccountIDTransactionsIdGetAsyncWithHttpInfo
     *
     * Get a transaction.
     *
     * @param  string $account_id The ID of the account to retrieve transactions for. (required)
     * @param  string $id The transaction ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDTransactionsIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsAccountIDTransactionsIdGetAsyncWithHttpInfo($account_id, $id, string $contentType = self::contentTypes['apiV1AccountsAccountIDTransactionsIdGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTransaction';
        $request = $this->apiV1AccountsAccountIDTransactionsIdGetRequest($account_id, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1AccountsAccountIDTransactionsIdGet'
     *
     * @param  string $account_id The ID of the account to retrieve transactions for. (required)
     * @param  string $id The transaction ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsAccountIDTransactionsIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1AccountsAccountIDTransactionsIdGetRequest($account_id, $id, string $contentType = self::contentTypes['apiV1AccountsAccountIDTransactionsIdGet'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling apiV1AccountsAccountIDTransactionsIdGet'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1AccountsAccountIDTransactionsIdGet'
            );
        }


        $resourcePath = '/api/v1/accounts/{accountID}/transactions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1AccountsArchiveIdDelete
     *
     * Sets the specified account as archived.
     *
     * @param  string $id The id of the account to archive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsArchiveIdDelete'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1AccountsArchiveIdDelete($id, string $contentType = self::contentTypes['apiV1AccountsArchiveIdDelete'][0])
    {
        $this->apiV1AccountsArchiveIdDeleteWithHttpInfo($id, $contentType);
    }

    /**
     * Operation apiV1AccountsArchiveIdDeleteWithHttpInfo
     *
     * Sets the specified account as archived.
     *
     * @param  string $id The id of the account to archive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsArchiveIdDelete'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1AccountsArchiveIdDeleteWithHttpInfo($id, string $contentType = self::contentTypes['apiV1AccountsArchiveIdDelete'][0])
    {
        $request = $this->apiV1AccountsArchiveIdDeleteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1AccountsArchiveIdDeleteAsync
     *
     * Sets the specified account as archived.
     *
     * @param  string $id The id of the account to archive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsArchiveIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsArchiveIdDeleteAsync($id, string $contentType = self::contentTypes['apiV1AccountsArchiveIdDelete'][0])
    {
        return $this->apiV1AccountsArchiveIdDeleteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1AccountsArchiveIdDeleteAsyncWithHttpInfo
     *
     * Sets the specified account as archived.
     *
     * @param  string $id The id of the account to archive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsArchiveIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsArchiveIdDeleteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1AccountsArchiveIdDelete'][0])
    {
        $returnType = '';
        $request = $this->apiV1AccountsArchiveIdDeleteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1AccountsArchiveIdDelete'
     *
     * @param  string $id The id of the account to archive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsArchiveIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1AccountsArchiveIdDeleteRequest($id, string $contentType = self::contentTypes['apiV1AccountsArchiveIdDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1AccountsArchiveIdDelete'
            );
        }


        $resourcePath = '/api/v1/accounts/archive/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1AccountsGet
     *
     * Get a list of all payment accounts the user has access to.
     *
     * @param  string $merchant_id The merchantID of the accounts to retrieve. (optional)
     * @param  bool $connected_accounts Optional include connected accounts along with payment accounts. (optional, default to false)
     * @param  bool $only_connect_accounts Only return connected accounts (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[]
     */
    public function apiV1AccountsGet($merchant_id = null, $connected_accounts = false, $only_connect_accounts = false, string $contentType = self::contentTypes['apiV1AccountsGet'][0])
    {
        list($response) = $this->apiV1AccountsGetWithHttpInfo($merchant_id, $connected_accounts, $only_connect_accounts, $contentType);
        return $response;
    }

    /**
     * Operation apiV1AccountsGetWithHttpInfo
     *
     * Get a list of all payment accounts the user has access to.
     *
     * @param  string $merchant_id The merchantID of the accounts to retrieve. (optional)
     * @param  bool $connected_accounts Optional include connected accounts along with payment accounts. (optional, default to false)
     * @param  bool $only_connect_accounts Only return connected accounts (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1AccountsGetWithHttpInfo($merchant_id = null, $connected_accounts = false, $only_connect_accounts = false, string $contentType = self::contentTypes['apiV1AccountsGet'][0])
    {
        $request = $this->apiV1AccountsGetRequest($merchant_id, $connected_accounts, $only_connect_accounts, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1AccountsGetAsync
     *
     * Get a list of all payment accounts the user has access to.
     *
     * @param  string $merchant_id The merchantID of the accounts to retrieve. (optional)
     * @param  bool $connected_accounts Optional include connected accounts along with payment accounts. (optional, default to false)
     * @param  bool $only_connect_accounts Only return connected accounts (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsGetAsync($merchant_id = null, $connected_accounts = false, $only_connect_accounts = false, string $contentType = self::contentTypes['apiV1AccountsGet'][0])
    {
        return $this->apiV1AccountsGetAsyncWithHttpInfo($merchant_id, $connected_accounts, $only_connect_accounts, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1AccountsGetAsyncWithHttpInfo
     *
     * Get a list of all payment accounts the user has access to.
     *
     * @param  string $merchant_id The merchantID of the accounts to retrieve. (optional)
     * @param  bool $connected_accounts Optional include connected accounts along with payment accounts. (optional, default to false)
     * @param  bool $only_connect_accounts Only return connected accounts (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsGetAsyncWithHttpInfo($merchant_id = null, $connected_accounts = false, $only_connect_accounts = false, string $contentType = self::contentTypes['apiV1AccountsGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[]';
        $request = $this->apiV1AccountsGetRequest($merchant_id, $connected_accounts, $only_connect_accounts, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1AccountsGet'
     *
     * @param  string $merchant_id The merchantID of the accounts to retrieve. (optional)
     * @param  bool $connected_accounts Optional include connected accounts along with payment accounts. (optional, default to false)
     * @param  bool $only_connect_accounts Only return connected accounts (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1AccountsGetRequest($merchant_id = null, $connected_accounts = false, $only_connect_accounts = false, string $contentType = self::contentTypes['apiV1AccountsGet'][0])
    {





        $resourcePath = '/api/v1/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $merchant_id,
            'merchantID', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $connected_accounts,
            'connectedAccounts', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $only_connect_accounts,
            'onlyConnectAccounts', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1AccountsIdPut
     *
     * Updates an account record.
     *
     * @param  string $id The ID of the account to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsAccountUpdate $no_frixion_money_moov_models_account_update The object containing the details of account to update (only name is editable). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsIdPut'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount
     */
    public function apiV1AccountsIdPut($id, $no_frixion_money_moov_models_account_update = null, string $contentType = self::contentTypes['apiV1AccountsIdPut'][0])
    {
        list($response) = $this->apiV1AccountsIdPutWithHttpInfo($id, $no_frixion_money_moov_models_account_update, $contentType);
        return $response;
    }

    /**
     * Operation apiV1AccountsIdPutWithHttpInfo
     *
     * Updates an account record.
     *
     * @param  string $id The ID of the account to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsAccountUpdate $no_frixion_money_moov_models_account_update The object containing the details of account to update (only name is editable). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsIdPut'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1AccountsIdPutWithHttpInfo($id, $no_frixion_money_moov_models_account_update = null, string $contentType = self::contentTypes['apiV1AccountsIdPut'][0])
    {
        $request = $this->apiV1AccountsIdPutRequest($id, $no_frixion_money_moov_models_account_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1AccountsIdPutAsync
     *
     * Updates an account record.
     *
     * @param  string $id The ID of the account to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsAccountUpdate $no_frixion_money_moov_models_account_update The object containing the details of account to update (only name is editable). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsIdPutAsync($id, $no_frixion_money_moov_models_account_update = null, string $contentType = self::contentTypes['apiV1AccountsIdPut'][0])
    {
        return $this->apiV1AccountsIdPutAsyncWithHttpInfo($id, $no_frixion_money_moov_models_account_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1AccountsIdPutAsyncWithHttpInfo
     *
     * Updates an account record.
     *
     * @param  string $id The ID of the account to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsAccountUpdate $no_frixion_money_moov_models_account_update The object containing the details of account to update (only name is editable). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsIdPutAsyncWithHttpInfo($id, $no_frixion_money_moov_models_account_update = null, string $contentType = self::contentTypes['apiV1AccountsIdPut'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount';
        $request = $this->apiV1AccountsIdPutRequest($id, $no_frixion_money_moov_models_account_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1AccountsIdPut'
     *
     * @param  string $id The ID of the account to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsAccountUpdate $no_frixion_money_moov_models_account_update The object containing the details of account to update (only name is editable). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1AccountsIdPutRequest($id, $no_frixion_money_moov_models_account_update = null, string $contentType = self::contentTypes['apiV1AccountsIdPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1AccountsIdPut'
            );
        }



        $resourcePath = '/api/v1/accounts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($no_frixion_money_moov_models_account_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($no_frixion_money_moov_models_account_update));
            } else {
                $httpBody = $no_frixion_money_moov_models_account_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1AccountsPagedGet
     *
     * Get a paged list of all payment accounts the user has access to for a specific merchant.
     *
     * @param  string $merchant_id The merchantID of the accounts to retrieve. (optional)
     * @param  bool $connected_accounts Optional include connected accounts along with payment accounts. (optional, default to false)
     * @param  int $page_number Optional. The page number to retrieve. (optional)
     * @param  int $page_size Optional. The number of accounts per page. (optional)
     * @param  string $currency Optional. If specified will only return accounts for this currency. (optional)
     * @param  string $search The text filter to apply to retrieve accounts with a similar account name, IBAN etc. (optional)
     * @param  string $sort Optional expression to sort the order of the accounts. Example \&quot;AvailableBalance desc,Inserted asc\&quot;. (optional)
     * @param  bool $only_connect_accounts Only return connected accounts (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsPagedGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccountPageResponse
     */
    public function apiV1AccountsPagedGet($merchant_id = null, $connected_accounts = false, $page_number = null, $page_size = null, $currency = null, $search = null, $sort = null, $only_connect_accounts = false, string $contentType = self::contentTypes['apiV1AccountsPagedGet'][0])
    {
        list($response) = $this->apiV1AccountsPagedGetWithHttpInfo($merchant_id, $connected_accounts, $page_number, $page_size, $currency, $search, $sort, $only_connect_accounts, $contentType);
        return $response;
    }

    /**
     * Operation apiV1AccountsPagedGetWithHttpInfo
     *
     * Get a paged list of all payment accounts the user has access to for a specific merchant.
     *
     * @param  string $merchant_id The merchantID of the accounts to retrieve. (optional)
     * @param  bool $connected_accounts Optional include connected accounts along with payment accounts. (optional, default to false)
     * @param  int $page_number Optional. The page number to retrieve. (optional)
     * @param  int $page_size Optional. The number of accounts per page. (optional)
     * @param  string $currency Optional. If specified will only return accounts for this currency. (optional)
     * @param  string $search The text filter to apply to retrieve accounts with a similar account name, IBAN etc. (optional)
     * @param  string $sort Optional expression to sort the order of the accounts. Example \&quot;AvailableBalance desc,Inserted asc\&quot;. (optional)
     * @param  bool $only_connect_accounts Only return connected accounts (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsPagedGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccountPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1AccountsPagedGetWithHttpInfo($merchant_id = null, $connected_accounts = false, $page_number = null, $page_size = null, $currency = null, $search = null, $sort = null, $only_connect_accounts = false, string $contentType = self::contentTypes['apiV1AccountsPagedGet'][0])
    {
        $request = $this->apiV1AccountsPagedGetRequest($merchant_id, $connected_accounts, $page_number, $page_size, $currency, $search, $sort, $only_connect_accounts, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccountPageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccountPageResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccountPageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccountPageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccountPageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1AccountsPagedGetAsync
     *
     * Get a paged list of all payment accounts the user has access to for a specific merchant.
     *
     * @param  string $merchant_id The merchantID of the accounts to retrieve. (optional)
     * @param  bool $connected_accounts Optional include connected accounts along with payment accounts. (optional, default to false)
     * @param  int $page_number Optional. The page number to retrieve. (optional)
     * @param  int $page_size Optional. The number of accounts per page. (optional)
     * @param  string $currency Optional. If specified will only return accounts for this currency. (optional)
     * @param  string $search The text filter to apply to retrieve accounts with a similar account name, IBAN etc. (optional)
     * @param  string $sort Optional expression to sort the order of the accounts. Example \&quot;AvailableBalance desc,Inserted asc\&quot;. (optional)
     * @param  bool $only_connect_accounts Only return connected accounts (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsPagedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsPagedGetAsync($merchant_id = null, $connected_accounts = false, $page_number = null, $page_size = null, $currency = null, $search = null, $sort = null, $only_connect_accounts = false, string $contentType = self::contentTypes['apiV1AccountsPagedGet'][0])
    {
        return $this->apiV1AccountsPagedGetAsyncWithHttpInfo($merchant_id, $connected_accounts, $page_number, $page_size, $currency, $search, $sort, $only_connect_accounts, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1AccountsPagedGetAsyncWithHttpInfo
     *
     * Get a paged list of all payment accounts the user has access to for a specific merchant.
     *
     * @param  string $merchant_id The merchantID of the accounts to retrieve. (optional)
     * @param  bool $connected_accounts Optional include connected accounts along with payment accounts. (optional, default to false)
     * @param  int $page_number Optional. The page number to retrieve. (optional)
     * @param  int $page_size Optional. The number of accounts per page. (optional)
     * @param  string $currency Optional. If specified will only return accounts for this currency. (optional)
     * @param  string $search The text filter to apply to retrieve accounts with a similar account name, IBAN etc. (optional)
     * @param  string $sort Optional expression to sort the order of the accounts. Example \&quot;AvailableBalance desc,Inserted asc\&quot;. (optional)
     * @param  bool $only_connect_accounts Only return connected accounts (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsPagedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsPagedGetAsyncWithHttpInfo($merchant_id = null, $connected_accounts = false, $page_number = null, $page_size = null, $currency = null, $search = null, $sort = null, $only_connect_accounts = false, string $contentType = self::contentTypes['apiV1AccountsPagedGet'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccountPageResponse';
        $request = $this->apiV1AccountsPagedGetRequest($merchant_id, $connected_accounts, $page_number, $page_size, $currency, $search, $sort, $only_connect_accounts, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1AccountsPagedGet'
     *
     * @param  string $merchant_id The merchantID of the accounts to retrieve. (optional)
     * @param  bool $connected_accounts Optional include connected accounts along with payment accounts. (optional, default to false)
     * @param  int $page_number Optional. The page number to retrieve. (optional)
     * @param  int $page_size Optional. The number of accounts per page. (optional)
     * @param  string $currency Optional. If specified will only return accounts for this currency. (optional)
     * @param  string $search The text filter to apply to retrieve accounts with a similar account name, IBAN etc. (optional)
     * @param  string $sort Optional expression to sort the order of the accounts. Example \&quot;AvailableBalance desc,Inserted asc\&quot;. (optional)
     * @param  bool $only_connect_accounts Only return connected accounts (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsPagedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1AccountsPagedGetRequest($merchant_id = null, $connected_accounts = false, $page_number = null, $page_size = null, $currency = null, $search = null, $sort = null, $only_connect_accounts = false, string $contentType = self::contentTypes['apiV1AccountsPagedGet'][0])
    {










        $resourcePath = '/api/v1/accounts/paged';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $merchant_id,
            'merchantID', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $connected_accounts,
            'connectedAccounts', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_number,
            'pageNumber', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $only_connect_accounts,
            'onlyConnectAccounts', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1AccountsPost
     *
     * Creates a new merchant payment account.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccountCreate $no_frixion_money_moov_models_payment_account_create The details of the payment account to create. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsPost'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount
     */
    public function apiV1AccountsPost($no_frixion_money_moov_models_payment_account_create = null, string $contentType = self::contentTypes['apiV1AccountsPost'][0])
    {
        list($response) = $this->apiV1AccountsPostWithHttpInfo($no_frixion_money_moov_models_payment_account_create, $contentType);
        return $response;
    }

    /**
     * Operation apiV1AccountsPostWithHttpInfo
     *
     * Creates a new merchant payment account.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccountCreate $no_frixion_money_moov_models_payment_account_create The details of the payment account to create. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsPost'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1AccountsPostWithHttpInfo($no_frixion_money_moov_models_payment_account_create = null, string $contentType = self::contentTypes['apiV1AccountsPost'][0])
    {
        $request = $this->apiV1AccountsPostRequest($no_frixion_money_moov_models_payment_account_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1AccountsPostAsync
     *
     * Creates a new merchant payment account.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccountCreate $no_frixion_money_moov_models_payment_account_create The details of the payment account to create. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsPostAsync($no_frixion_money_moov_models_payment_account_create = null, string $contentType = self::contentTypes['apiV1AccountsPost'][0])
    {
        return $this->apiV1AccountsPostAsyncWithHttpInfo($no_frixion_money_moov_models_payment_account_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1AccountsPostAsyncWithHttpInfo
     *
     * Creates a new merchant payment account.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccountCreate $no_frixion_money_moov_models_payment_account_create The details of the payment account to create. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsPostAsyncWithHttpInfo($no_frixion_money_moov_models_payment_account_create = null, string $contentType = self::contentTypes['apiV1AccountsPost'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount';
        $request = $this->apiV1AccountsPostRequest($no_frixion_money_moov_models_payment_account_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1AccountsPost'
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccountCreate $no_frixion_money_moov_models_payment_account_create The details of the payment account to create. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1AccountsPostRequest($no_frixion_money_moov_models_payment_account_create = null, string $contentType = self::contentTypes['apiV1AccountsPost'][0])
    {



        $resourcePath = '/api/v1/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($no_frixion_money_moov_models_payment_account_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($no_frixion_money_moov_models_payment_account_create));
            } else {
                $httpBody = $no_frixion_money_moov_models_payment_account_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1AccountsStatementsDelete
     *
     * Clears the cached user statements for a user.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsStatementsDelete'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1AccountsStatementsDelete(string $contentType = self::contentTypes['apiV1AccountsStatementsDelete'][0])
    {
        $this->apiV1AccountsStatementsDeleteWithHttpInfo($contentType);
    }

    /**
     * Operation apiV1AccountsStatementsDeleteWithHttpInfo
     *
     * Clears the cached user statements for a user.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsStatementsDelete'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1AccountsStatementsDeleteWithHttpInfo(string $contentType = self::contentTypes['apiV1AccountsStatementsDelete'][0])
    {
        $request = $this->apiV1AccountsStatementsDeleteRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1AccountsStatementsDeleteAsync
     *
     * Clears the cached user statements for a user.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsStatementsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsStatementsDeleteAsync(string $contentType = self::contentTypes['apiV1AccountsStatementsDelete'][0])
    {
        return $this->apiV1AccountsStatementsDeleteAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1AccountsStatementsDeleteAsyncWithHttpInfo
     *
     * Clears the cached user statements for a user.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsStatementsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsStatementsDeleteAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV1AccountsStatementsDelete'][0])
    {
        $returnType = '';
        $request = $this->apiV1AccountsStatementsDeleteRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1AccountsStatementsDelete'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsStatementsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1AccountsStatementsDeleteRequest(string $contentType = self::contentTypes['apiV1AccountsStatementsDelete'][0])
    {


        $resourcePath = '/api/v1/accounts/statements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1AccountsStatementsGet
     *
     * Gets all active statement generation requests for the user.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsStatementsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1AccountsStatementsGet(string $contentType = self::contentTypes['apiV1AccountsStatementsGet'][0])
    {
        $this->apiV1AccountsStatementsGetWithHttpInfo($contentType);
    }

    /**
     * Operation apiV1AccountsStatementsGetWithHttpInfo
     *
     * Gets all active statement generation requests for the user.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsStatementsGet'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1AccountsStatementsGetWithHttpInfo(string $contentType = self::contentTypes['apiV1AccountsStatementsGet'][0])
    {
        $request = $this->apiV1AccountsStatementsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1AccountsStatementsGetAsync
     *
     * Gets all active statement generation requests for the user.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsStatementsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsStatementsGetAsync(string $contentType = self::contentTypes['apiV1AccountsStatementsGet'][0])
    {
        return $this->apiV1AccountsStatementsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1AccountsStatementsGetAsyncWithHttpInfo
     *
     * Gets all active statement generation requests for the user.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsStatementsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsStatementsGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV1AccountsStatementsGet'][0])
    {
        $returnType = '';
        $request = $this->apiV1AccountsStatementsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1AccountsStatementsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsStatementsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1AccountsStatementsGetRequest(string $contentType = self::contentTypes['apiV1AccountsStatementsGet'][0])
    {


        $resourcePath = '/api/v1/accounts/statements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1AccountsUnarchiveIdPut
     *
     * Sets the specified account as unarchived / active.
     *
     * @param  string $id The id of the account to unarchive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsUnarchiveIdPut'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV1AccountsUnarchiveIdPut($id, string $contentType = self::contentTypes['apiV1AccountsUnarchiveIdPut'][0])
    {
        $this->apiV1AccountsUnarchiveIdPutWithHttpInfo($id, $contentType);
    }

    /**
     * Operation apiV1AccountsUnarchiveIdPutWithHttpInfo
     *
     * Sets the specified account as unarchived / active.
     *
     * @param  string $id The id of the account to unarchive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsUnarchiveIdPut'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1AccountsUnarchiveIdPutWithHttpInfo($id, string $contentType = self::contentTypes['apiV1AccountsUnarchiveIdPut'][0])
    {
        $request = $this->apiV1AccountsUnarchiveIdPutRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1AccountsUnarchiveIdPutAsync
     *
     * Sets the specified account as unarchived / active.
     *
     * @param  string $id The id of the account to unarchive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsUnarchiveIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsUnarchiveIdPutAsync($id, string $contentType = self::contentTypes['apiV1AccountsUnarchiveIdPut'][0])
    {
        return $this->apiV1AccountsUnarchiveIdPutAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1AccountsUnarchiveIdPutAsyncWithHttpInfo
     *
     * Sets the specified account as unarchived / active.
     *
     * @param  string $id The id of the account to unarchive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsUnarchiveIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1AccountsUnarchiveIdPutAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1AccountsUnarchiveIdPut'][0])
    {
        $returnType = '';
        $request = $this->apiV1AccountsUnarchiveIdPutRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1AccountsUnarchiveIdPut'
     *
     * @param  string $id The id of the account to unarchive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1AccountsUnarchiveIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1AccountsUnarchiveIdPutRequest($id, string $contentType = self::contentTypes['apiV1AccountsUnarchiveIdPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1AccountsUnarchiveIdPut'
            );
        }


        $resourcePath = '/api/v1/accounts/unarchive/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountAsync
     *
     * Get an account.
     *
     * @param  string $account_id The accountID of the account to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountAsync'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount
     */
    public function getAccountAsync($account_id, string $contentType = self::contentTypes['getAccountAsync'][0])
    {
        list($response) = $this->getAccountAsyncWithHttpInfo($account_id, $contentType);
        return $response;
    }

    /**
     * Operation getAccountAsyncWithHttpInfo
     *
     * Get an account.
     *
     * @param  string $account_id The accountID of the account to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountAsync'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountAsyncWithHttpInfo($account_id, string $contentType = self::contentTypes['getAccountAsync'][0])
    {
        $request = $this->getAccountAsyncRequest($account_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountAsyncAsync
     *
     * Get an account.
     *
     * @param  string $account_id The accountID of the account to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountAsync'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountAsyncAsync($account_id, string $contentType = self::contentTypes['getAccountAsync'][0])
    {
        return $this->getAccountAsyncAsyncWithHttpInfo($account_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountAsyncAsyncWithHttpInfo
     *
     * Get an account.
     *
     * @param  string $account_id The accountID of the account to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountAsync'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountAsyncAsyncWithHttpInfo($account_id, string $contentType = self::contentTypes['getAccountAsync'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount';
        $request = $this->getAccountAsyncRequest($account_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountAsync'
     *
     * @param  string $account_id The accountID of the account to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountAsync'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountAsyncRequest($account_id, string $contentType = self::contentTypes['getAccountAsync'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getAccountAsync'
            );
        }


        $resourcePath = '/api/v1/accounts/{accountID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
