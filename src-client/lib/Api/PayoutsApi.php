<?php
/**
 * PayoutsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Nofrixion\Client\ApiException;
use Nofrixion\Client\Configuration;
use Nofrixion\Client\HeaderSelector;
use Nofrixion\Client\ObjectSerializer;

/**
 * PayoutsApi Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PayoutsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'cancelScheduledPayout' => [
            'application/json',
        ],
        'createBatchPayout' => [
            'application/json',
        ],
        'createPayout' => [
            'application/json',
        ],
        'createPayouts' => [
            'application/json',
        ],
        'deletePayout' => [
            'application/json',
        ],
        'deletePayouts' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'getBatchPayout' => [
            'application/json',
        ],
        'getPayout' => [
            'application/json',
        ],
        'getPayoutForInvoice' => [
            'application/json',
        ],
        'getPayoutMetrics' => [
            'application/json',
        ],
        'getPayoutStatus' => [
            'application/json',
        ],
        'getPayoutsPaged' => [
            'application/json',
        ],
        'rejectPayout' => [
            'application/json',
        ],
        'sendPayout' => [
            'application/json',
        ],
        'submitBatchPayout' => [
            'application/json',
        ],
        'submitPayout' => [
            'application/json',
        ],
        'updatePayout' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelScheduledPayout
     *
     * Attempts to cancel a scheduled payout.
     *
     * @param  string $id The ID of the payout to cancel. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelScheduledPayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout
     */
    public function cancelScheduledPayout($id, string $contentType = self::contentTypes['cancelScheduledPayout'][0])
    {
        list($response) = $this->cancelScheduledPayoutWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation cancelScheduledPayoutWithHttpInfo
     *
     * Attempts to cancel a scheduled payout.
     *
     * @param  string $id The ID of the payout to cancel. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelScheduledPayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelScheduledPayoutWithHttpInfo($id, string $contentType = self::contentTypes['cancelScheduledPayout'][0])
    {
        $request = $this->cancelScheduledPayoutRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelScheduledPayoutAsync
     *
     * Attempts to cancel a scheduled payout.
     *
     * @param  string $id The ID of the payout to cancel. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelScheduledPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelScheduledPayoutAsync($id, string $contentType = self::contentTypes['cancelScheduledPayout'][0])
    {
        return $this->cancelScheduledPayoutAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelScheduledPayoutAsyncWithHttpInfo
     *
     * Attempts to cancel a scheduled payout.
     *
     * @param  string $id The ID of the payout to cancel. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelScheduledPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelScheduledPayoutAsyncWithHttpInfo($id, string $contentType = self::contentTypes['cancelScheduledPayout'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout';
        $request = $this->cancelScheduledPayoutRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelScheduledPayout'
     *
     * @param  string $id The ID of the payout to cancel. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelScheduledPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelScheduledPayoutRequest($id, string $contentType = self::contentTypes['cancelScheduledPayout'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cancelScheduledPayout'
            );
        }


        $resourcePath = '/api/v1/payouts/cancel/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBatchPayout
     *
     * Creates a new batch payout.
     *
     * @param  string[] $request_body The IDs of the payout to include in the batch. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBatchPayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBatchPayout
     */
    public function createBatchPayout($request_body = null, string $contentType = self::contentTypes['createBatchPayout'][0])
    {
        list($response) = $this->createBatchPayoutWithHttpInfo($request_body, $contentType);
        return $response;
    }

    /**
     * Operation createBatchPayoutWithHttpInfo
     *
     * Creates a new batch payout.
     *
     * @param  string[] $request_body The IDs of the payout to include in the batch. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBatchPayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBatchPayout, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBatchPayoutWithHttpInfo($request_body = null, string $contentType = self::contentTypes['createBatchPayout'][0])
    {
        $request = $this->createBatchPayoutRequest($request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBatchPayout' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBatchPayout' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBatchPayout', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBatchPayout';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBatchPayout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBatchPayoutAsync
     *
     * Creates a new batch payout.
     *
     * @param  string[] $request_body The IDs of the payout to include in the batch. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBatchPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBatchPayoutAsync($request_body = null, string $contentType = self::contentTypes['createBatchPayout'][0])
    {
        return $this->createBatchPayoutAsyncWithHttpInfo($request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBatchPayoutAsyncWithHttpInfo
     *
     * Creates a new batch payout.
     *
     * @param  string[] $request_body The IDs of the payout to include in the batch. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBatchPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBatchPayoutAsyncWithHttpInfo($request_body = null, string $contentType = self::contentTypes['createBatchPayout'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBatchPayout';
        $request = $this->createBatchPayoutRequest($request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBatchPayout'
     *
     * @param  string[] $request_body The IDs of the payout to include in the batch. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBatchPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createBatchPayoutRequest($request_body = null, string $contentType = self::contentTypes['createBatchPayout'][0])
    {



        $resourcePath = '/api/v1/payouts/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPayout
     *
     * Creates a new payout.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutCreate $no_frixion_money_moov_models_payout_create The object containing the details of the payout to create. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout
     */
    public function createPayout($no_frixion_money_moov_models_payout_create = null, string $contentType = self::contentTypes['createPayout'][0])
    {
        list($response) = $this->createPayoutWithHttpInfo($no_frixion_money_moov_models_payout_create, $contentType);
        return $response;
    }

    /**
     * Operation createPayoutWithHttpInfo
     *
     * Creates a new payout.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutCreate $no_frixion_money_moov_models_payout_create The object containing the details of the payout to create. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPayoutWithHttpInfo($no_frixion_money_moov_models_payout_create = null, string $contentType = self::contentTypes['createPayout'][0])
    {
        $request = $this->createPayoutRequest($no_frixion_money_moov_models_payout_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPayoutAsync
     *
     * Creates a new payout.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutCreate $no_frixion_money_moov_models_payout_create The object containing the details of the payout to create. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPayoutAsync($no_frixion_money_moov_models_payout_create = null, string $contentType = self::contentTypes['createPayout'][0])
    {
        return $this->createPayoutAsyncWithHttpInfo($no_frixion_money_moov_models_payout_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPayoutAsyncWithHttpInfo
     *
     * Creates a new payout.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutCreate $no_frixion_money_moov_models_payout_create The object containing the details of the payout to create. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPayoutAsyncWithHttpInfo($no_frixion_money_moov_models_payout_create = null, string $contentType = self::contentTypes['createPayout'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout';
        $request = $this->createPayoutRequest($no_frixion_money_moov_models_payout_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPayout'
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutCreate $no_frixion_money_moov_models_payout_create The object containing the details of the payout to create. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPayoutRequest($no_frixion_money_moov_models_payout_create = null, string $contentType = self::contentTypes['createPayout'][0])
    {



        $resourcePath = '/api/v1/payouts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($no_frixion_money_moov_models_payout_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($no_frixion_money_moov_models_payout_create));
            } else {
                $httpBody = $no_frixion_money_moov_models_payout_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPayouts
     *
     * Creates payouts.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutCreate[] $no_frixion_money_moov_models_payout_create A list of objects containing the details of the payouts to create. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayouts'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutsPayoutsCreateResponse
     */
    public function createPayouts($no_frixion_money_moov_models_payout_create = null, string $contentType = self::contentTypes['createPayouts'][0])
    {
        list($response) = $this->createPayoutsWithHttpInfo($no_frixion_money_moov_models_payout_create, $contentType);
        return $response;
    }

    /**
     * Operation createPayoutsWithHttpInfo
     *
     * Creates payouts.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutCreate[] $no_frixion_money_moov_models_payout_create A list of objects containing the details of the payouts to create. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayouts'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutsPayoutsCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPayoutsWithHttpInfo($no_frixion_money_moov_models_payout_create = null, string $contentType = self::contentTypes['createPayouts'][0])
    {
        $request = $this->createPayoutsRequest($no_frixion_money_moov_models_payout_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutsPayoutsCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutsPayoutsCreateResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutsPayoutsCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutsPayoutsCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutsPayoutsCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPayoutsAsync
     *
     * Creates payouts.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutCreate[] $no_frixion_money_moov_models_payout_create A list of objects containing the details of the payouts to create. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayouts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPayoutsAsync($no_frixion_money_moov_models_payout_create = null, string $contentType = self::contentTypes['createPayouts'][0])
    {
        return $this->createPayoutsAsyncWithHttpInfo($no_frixion_money_moov_models_payout_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPayoutsAsyncWithHttpInfo
     *
     * Creates payouts.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutCreate[] $no_frixion_money_moov_models_payout_create A list of objects containing the details of the payouts to create. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayouts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPayoutsAsyncWithHttpInfo($no_frixion_money_moov_models_payout_create = null, string $contentType = self::contentTypes['createPayouts'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutsPayoutsCreateResponse';
        $request = $this->createPayoutsRequest($no_frixion_money_moov_models_payout_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPayouts'
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutCreate[] $no_frixion_money_moov_models_payout_create A list of objects containing the details of the payouts to create. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayouts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPayoutsRequest($no_frixion_money_moov_models_payout_create = null, string $contentType = self::contentTypes['createPayouts'][0])
    {



        $resourcePath = '/api/v1/payouts/batchcreate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($no_frixion_money_moov_models_payout_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($no_frixion_money_moov_models_payout_create));
            } else {
                $httpBody = $no_frixion_money_moov_models_payout_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePayout
     *
     * Deletes a payout record.
     *
     * @param  string $id The ID of the payment record to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePayout($id, string $contentType = self::contentTypes['deletePayout'][0])
    {
        $this->deletePayoutWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deletePayoutWithHttpInfo
     *
     * Deletes a payout record.
     *
     * @param  string $id The ID of the payment record to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePayoutWithHttpInfo($id, string $contentType = self::contentTypes['deletePayout'][0])
    {
        $request = $this->deletePayoutRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePayoutAsync
     *
     * Deletes a payout record.
     *
     * @param  string $id The ID of the payment record to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePayoutAsync($id, string $contentType = self::contentTypes['deletePayout'][0])
    {
        return $this->deletePayoutAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePayoutAsyncWithHttpInfo
     *
     * Deletes a payout record.
     *
     * @param  string $id The ID of the payment record to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePayoutAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deletePayout'][0])
    {
        $returnType = '';
        $request = $this->deletePayoutRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePayout'
     *
     * @param  string $id The ID of the payment record to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePayoutRequest($id, string $contentType = self::contentTypes['deletePayout'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deletePayout'
            );
        }


        $resourcePath = '/api/v1/payouts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePayouts
     *
     * Deletes a list of payout records.
     *
     * @param  string[] $request_body The IDs of the payouts to be deleted (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayouts'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePayouts($request_body = null, string $contentType = self::contentTypes['deletePayouts'][0])
    {
        $this->deletePayoutsWithHttpInfo($request_body, $contentType);
    }

    /**
     * Operation deletePayoutsWithHttpInfo
     *
     * Deletes a list of payout records.
     *
     * @param  string[] $request_body The IDs of the payouts to be deleted (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayouts'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePayoutsWithHttpInfo($request_body = null, string $contentType = self::contentTypes['deletePayouts'][0])
    {
        $request = $this->deletePayoutsRequest($request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePayoutsAsync
     *
     * Deletes a list of payout records.
     *
     * @param  string[] $request_body The IDs of the payouts to be deleted (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayouts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePayoutsAsync($request_body = null, string $contentType = self::contentTypes['deletePayouts'][0])
    {
        return $this->deletePayoutsAsyncWithHttpInfo($request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePayoutsAsyncWithHttpInfo
     *
     * Deletes a list of payout records.
     *
     * @param  string[] $request_body The IDs of the payouts to be deleted (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayouts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePayoutsAsyncWithHttpInfo($request_body = null, string $contentType = self::contentTypes['deletePayouts'][0])
    {
        $returnType = '';
        $request = $this->deletePayoutsRequest($request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePayouts'
     *
     * @param  string[] $request_body The IDs of the payouts to be deleted (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayouts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePayoutsRequest($request_body = null, string $contentType = self::contentTypes['deletePayouts'][0])
    {



        $resourcePath = '/api/v1/payouts/batchdelete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBatchPayout
     *
     * Gets a list of all the payouts contained in a batch.
     *
     * @param  string $id The ID of the batch payout to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBatchPayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBatchPayout
     */
    public function getBatchPayout($id, string $contentType = self::contentTypes['getBatchPayout'][0])
    {
        list($response) = $this->getBatchPayoutWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getBatchPayoutWithHttpInfo
     *
     * Gets a list of all the payouts contained in a batch.
     *
     * @param  string $id The ID of the batch payout to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBatchPayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBatchPayout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBatchPayoutWithHttpInfo($id, string $contentType = self::contentTypes['getBatchPayout'][0])
    {
        $request = $this->getBatchPayoutRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBatchPayout' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBatchPayout' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBatchPayout', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBatchPayout';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBatchPayout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBatchPayoutAsync
     *
     * Gets a list of all the payouts contained in a batch.
     *
     * @param  string $id The ID of the batch payout to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBatchPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBatchPayoutAsync($id, string $contentType = self::contentTypes['getBatchPayout'][0])
    {
        return $this->getBatchPayoutAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBatchPayoutAsyncWithHttpInfo
     *
     * Gets a list of all the payouts contained in a batch.
     *
     * @param  string $id The ID of the batch payout to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBatchPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBatchPayoutAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getBatchPayout'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBatchPayout';
        $request = $this->getBatchPayoutRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBatchPayout'
     *
     * @param  string $id The ID of the batch payout to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBatchPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBatchPayoutRequest($id, string $contentType = self::contentTypes['getBatchPayout'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getBatchPayout'
            );
        }


        $resourcePath = '/api/v1/payouts/batch/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayout
     *
     * Gets a single payout.
     *
     * @param  string $id The ID of the payout record to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout
     */
    public function getPayout($id, string $contentType = self::contentTypes['getPayout'][0])
    {
        list($response) = $this->getPayoutWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getPayoutWithHttpInfo
     *
     * Gets a single payout.
     *
     * @param  string $id The ID of the payout record to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayoutWithHttpInfo($id, string $contentType = self::contentTypes['getPayout'][0])
    {
        $request = $this->getPayoutRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayoutAsync
     *
     * Gets a single payout.
     *
     * @param  string $id The ID of the payout record to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayoutAsync($id, string $contentType = self::contentTypes['getPayout'][0])
    {
        return $this->getPayoutAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayoutAsyncWithHttpInfo
     *
     * Gets a single payout.
     *
     * @param  string $id The ID of the payout record to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayoutAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getPayout'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout';
        $request = $this->getPayoutRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayout'
     *
     * @param  string $id The ID of the payout record to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayoutRequest($id, string $contentType = self::contentTypes['getPayout'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getPayout'
            );
        }


        $resourcePath = '/api/v1/payouts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayoutForInvoice
     *
     * Gets a payout by its invoice ID.
     *
     * @param  string $invoice_id The invoice ID of the payout to retrieve. Useful when the              payout has been created by an external application such as Xero. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutForInvoice'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentRequest
     */
    public function getPayoutForInvoice($invoice_id, string $contentType = self::contentTypes['getPayoutForInvoice'][0])
    {
        list($response) = $this->getPayoutForInvoiceWithHttpInfo($invoice_id, $contentType);
        return $response;
    }

    /**
     * Operation getPayoutForInvoiceWithHttpInfo
     *
     * Gets a payout by its invoice ID.
     *
     * @param  string $invoice_id The invoice ID of the payout to retrieve. Useful when the              payout has been created by an external application such as Xero. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutForInvoice'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayoutForInvoiceWithHttpInfo($invoice_id, string $contentType = self::contentTypes['getPayoutForInvoice'][0])
    {
        $request = $this->getPayoutForInvoiceRequest($invoice_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentRequest' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentRequest';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayoutForInvoiceAsync
     *
     * Gets a payout by its invoice ID.
     *
     * @param  string $invoice_id The invoice ID of the payout to retrieve. Useful when the              payout has been created by an external application such as Xero. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutForInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayoutForInvoiceAsync($invoice_id, string $contentType = self::contentTypes['getPayoutForInvoice'][0])
    {
        return $this->getPayoutForInvoiceAsyncWithHttpInfo($invoice_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayoutForInvoiceAsyncWithHttpInfo
     *
     * Gets a payout by its invoice ID.
     *
     * @param  string $invoice_id The invoice ID of the payout to retrieve. Useful when the              payout has been created by an external application such as Xero. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutForInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayoutForInvoiceAsyncWithHttpInfo($invoice_id, string $contentType = self::contentTypes['getPayoutForInvoice'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentRequest';
        $request = $this->getPayoutForInvoiceRequest($invoice_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayoutForInvoice'
     *
     * @param  string $invoice_id The invoice ID of the payout to retrieve. Useful when the              payout has been created by an external application such as Xero. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutForInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayoutForInvoiceRequest($invoice_id, string $contentType = self::contentTypes['getPayoutForInvoice'][0])
    {

        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling getPayoutForInvoice'
            );
        }


        $resourcePath = '/api/v1/payouts/getbyinvoiceid/{invoiceID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayoutMetrics
     *
     * Gets a list of all payout metrics for a specific merchant.
     *
     * @param  string $merchant_id Required. The ID of the merchant to get the payout metrics for. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payouts created after this date as metrics. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payouts created up until this date as metrics. (optional)
     * @param  string $search The text filter to apply to retrieve payouts with a similar title, description, merchant name or contact information as metrics. (optional)
     * @param  string $currency The currency filter to apply to retrieve payouts with this currency as metrics. (optional)
     * @param  float $min_amount The amount filter to apply to retrieve payouts that exceed this amount as metrics. (optional)
     * @param  float $max_amount The amount filter to apply to retrieve payouts that don&#39;t exceed this amount as metrics. (optional)
     * @param  string[] $tags The tag filter to apply to retrieve payouts with at least one of these tags as metrics. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutMetrics'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutMetrics
     */
    public function getPayoutMetrics($merchant_id = null, $from_date = null, $to_date = null, $search = null, $currency = null, $min_amount = null, $max_amount = null, $tags = null, string $contentType = self::contentTypes['getPayoutMetrics'][0])
    {
        list($response) = $this->getPayoutMetricsWithHttpInfo($merchant_id, $from_date, $to_date, $search, $currency, $min_amount, $max_amount, $tags, $contentType);
        return $response;
    }

    /**
     * Operation getPayoutMetricsWithHttpInfo
     *
     * Gets a list of all payout metrics for a specific merchant.
     *
     * @param  string $merchant_id Required. The ID of the merchant to get the payout metrics for. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payouts created after this date as metrics. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payouts created up until this date as metrics. (optional)
     * @param  string $search The text filter to apply to retrieve payouts with a similar title, description, merchant name or contact information as metrics. (optional)
     * @param  string $currency The currency filter to apply to retrieve payouts with this currency as metrics. (optional)
     * @param  float $min_amount The amount filter to apply to retrieve payouts that exceed this amount as metrics. (optional)
     * @param  float $max_amount The amount filter to apply to retrieve payouts that don&#39;t exceed this amount as metrics. (optional)
     * @param  string[] $tags The tag filter to apply to retrieve payouts with at least one of these tags as metrics. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutMetrics'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutMetrics, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayoutMetricsWithHttpInfo($merchant_id = null, $from_date = null, $to_date = null, $search = null, $currency = null, $min_amount = null, $max_amount = null, $tags = null, string $contentType = self::contentTypes['getPayoutMetrics'][0])
    {
        $request = $this->getPayoutMetricsRequest($merchant_id, $from_date, $to_date, $search, $currency, $min_amount, $max_amount, $tags, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutMetrics' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutMetrics' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutMetrics', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutMetrics';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutMetrics',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayoutMetricsAsync
     *
     * Gets a list of all payout metrics for a specific merchant.
     *
     * @param  string $merchant_id Required. The ID of the merchant to get the payout metrics for. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payouts created after this date as metrics. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payouts created up until this date as metrics. (optional)
     * @param  string $search The text filter to apply to retrieve payouts with a similar title, description, merchant name or contact information as metrics. (optional)
     * @param  string $currency The currency filter to apply to retrieve payouts with this currency as metrics. (optional)
     * @param  float $min_amount The amount filter to apply to retrieve payouts that exceed this amount as metrics. (optional)
     * @param  float $max_amount The amount filter to apply to retrieve payouts that don&#39;t exceed this amount as metrics. (optional)
     * @param  string[] $tags The tag filter to apply to retrieve payouts with at least one of these tags as metrics. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutMetrics'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayoutMetricsAsync($merchant_id = null, $from_date = null, $to_date = null, $search = null, $currency = null, $min_amount = null, $max_amount = null, $tags = null, string $contentType = self::contentTypes['getPayoutMetrics'][0])
    {
        return $this->getPayoutMetricsAsyncWithHttpInfo($merchant_id, $from_date, $to_date, $search, $currency, $min_amount, $max_amount, $tags, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayoutMetricsAsyncWithHttpInfo
     *
     * Gets a list of all payout metrics for a specific merchant.
     *
     * @param  string $merchant_id Required. The ID of the merchant to get the payout metrics for. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payouts created after this date as metrics. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payouts created up until this date as metrics. (optional)
     * @param  string $search The text filter to apply to retrieve payouts with a similar title, description, merchant name or contact information as metrics. (optional)
     * @param  string $currency The currency filter to apply to retrieve payouts with this currency as metrics. (optional)
     * @param  float $min_amount The amount filter to apply to retrieve payouts that exceed this amount as metrics. (optional)
     * @param  float $max_amount The amount filter to apply to retrieve payouts that don&#39;t exceed this amount as metrics. (optional)
     * @param  string[] $tags The tag filter to apply to retrieve payouts with at least one of these tags as metrics. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutMetrics'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayoutMetricsAsyncWithHttpInfo($merchant_id = null, $from_date = null, $to_date = null, $search = null, $currency = null, $min_amount = null, $max_amount = null, $tags = null, string $contentType = self::contentTypes['getPayoutMetrics'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutMetrics';
        $request = $this->getPayoutMetricsRequest($merchant_id, $from_date, $to_date, $search, $currency, $min_amount, $max_amount, $tags, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayoutMetrics'
     *
     * @param  string $merchant_id Required. The ID of the merchant to get the payout metrics for. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payouts created after this date as metrics. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payouts created up until this date as metrics. (optional)
     * @param  string $search The text filter to apply to retrieve payouts with a similar title, description, merchant name or contact information as metrics. (optional)
     * @param  string $currency The currency filter to apply to retrieve payouts with this currency as metrics. (optional)
     * @param  float $min_amount The amount filter to apply to retrieve payouts that exceed this amount as metrics. (optional)
     * @param  float $max_amount The amount filter to apply to retrieve payouts that don&#39;t exceed this amount as metrics. (optional)
     * @param  string[] $tags The tag filter to apply to retrieve payouts with at least one of these tags as metrics. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutMetrics'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayoutMetricsRequest($merchant_id = null, $from_date = null, $to_date = null, $search = null, $currency = null, $min_amount = null, $max_amount = null, $tags = null, string $contentType = self::contentTypes['getPayoutMetrics'][0])
    {










        $resourcePath = '/api/v1/payouts/metrics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $merchant_id,
            'merchantID', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_amount,
            'minAmount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_amount,
            'maxAmount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tags,
            'tags', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayoutStatus
     *
     * Gets a single payout status from.
     *
     * @param  string $id The ID of the payout record to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutStatus'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout
     */
    public function getPayoutStatus($id, string $contentType = self::contentTypes['getPayoutStatus'][0])
    {
        list($response) = $this->getPayoutStatusWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getPayoutStatusWithHttpInfo
     *
     * Gets a single payout status from.
     *
     * @param  string $id The ID of the payout record to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutStatus'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayoutStatusWithHttpInfo($id, string $contentType = self::contentTypes['getPayoutStatus'][0])
    {
        $request = $this->getPayoutStatusRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayoutStatusAsync
     *
     * Gets a single payout status from.
     *
     * @param  string $id The ID of the payout record to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayoutStatusAsync($id, string $contentType = self::contentTypes['getPayoutStatus'][0])
    {
        return $this->getPayoutStatusAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayoutStatusAsyncWithHttpInfo
     *
     * Gets a single payout status from.
     *
     * @param  string $id The ID of the payout record to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayoutStatusAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getPayoutStatus'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout';
        $request = $this->getPayoutStatusRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayoutStatus'
     *
     * @param  string $id The ID of the payout record to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayoutStatusRequest($id, string $contentType = self::contentTypes['getPayoutStatus'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getPayoutStatus'
            );
        }


        $resourcePath = '/api/v1/payouts/status/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayoutsPaged
     *
     * Gets a list of all payouts for a specific merchant.
     *
     * @param  string $merchant_id Required. The ID of the merchant to get the payouts for. (optional)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string[] $statuses An optional status filter for the payout records. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payouts created after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payouts created up until this date. (optional)
     * @param  string $search The text filter to apply to retrieve payouts with a similar title, description, merchant name or contact information. (optional)
     * @param  string $currency The currency filter to apply to retrieve payouts with this currency. (optional)
     * @param  float $min_amount The amount filter to apply to retrieve payouts that exceed this amount. (optional)
     * @param  float $max_amount The amount filter to apply to retrieve payouts that don&#39;t exceed this amount. (optional)
     * @param  string[] $tags The tag filter to apply to retrieve payouts with at least one of these tags. (optional)
     * @param  string $sort Optional expression to sort the order of the payouts. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutsPaged'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse
     */
    public function getPayoutsPaged($merchant_id = null, $page_number = null, $page_size = null, $statuses = null, $from_date = null, $to_date = null, $search = null, $currency = null, $min_amount = null, $max_amount = null, $tags = null, $sort = null, string $contentType = self::contentTypes['getPayoutsPaged'][0])
    {
        list($response) = $this->getPayoutsPagedWithHttpInfo($merchant_id, $page_number, $page_size, $statuses, $from_date, $to_date, $search, $currency, $min_amount, $max_amount, $tags, $sort, $contentType);
        return $response;
    }

    /**
     * Operation getPayoutsPagedWithHttpInfo
     *
     * Gets a list of all payouts for a specific merchant.
     *
     * @param  string $merchant_id Required. The ID of the merchant to get the payouts for. (optional)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string[] $statuses An optional status filter for the payout records. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payouts created after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payouts created up until this date. (optional)
     * @param  string $search The text filter to apply to retrieve payouts with a similar title, description, merchant name or contact information. (optional)
     * @param  string $currency The currency filter to apply to retrieve payouts with this currency. (optional)
     * @param  float $min_amount The amount filter to apply to retrieve payouts that exceed this amount. (optional)
     * @param  float $max_amount The amount filter to apply to retrieve payouts that don&#39;t exceed this amount. (optional)
     * @param  string[] $tags The tag filter to apply to retrieve payouts with at least one of these tags. (optional)
     * @param  string $sort Optional expression to sort the order of the payouts. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutsPaged'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayoutsPagedWithHttpInfo($merchant_id = null, $page_number = null, $page_size = null, $statuses = null, $from_date = null, $to_date = null, $search = null, $currency = null, $min_amount = null, $max_amount = null, $tags = null, $sort = null, string $contentType = self::contentTypes['getPayoutsPaged'][0])
    {
        $request = $this->getPayoutsPagedRequest($merchant_id, $page_number, $page_size, $statuses, $from_date, $to_date, $search, $currency, $min_amount, $max_amount, $tags, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayoutsPagedAsync
     *
     * Gets a list of all payouts for a specific merchant.
     *
     * @param  string $merchant_id Required. The ID of the merchant to get the payouts for. (optional)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string[] $statuses An optional status filter for the payout records. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payouts created after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payouts created up until this date. (optional)
     * @param  string $search The text filter to apply to retrieve payouts with a similar title, description, merchant name or contact information. (optional)
     * @param  string $currency The currency filter to apply to retrieve payouts with this currency. (optional)
     * @param  float $min_amount The amount filter to apply to retrieve payouts that exceed this amount. (optional)
     * @param  float $max_amount The amount filter to apply to retrieve payouts that don&#39;t exceed this amount. (optional)
     * @param  string[] $tags The tag filter to apply to retrieve payouts with at least one of these tags. (optional)
     * @param  string $sort Optional expression to sort the order of the payouts. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutsPaged'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayoutsPagedAsync($merchant_id = null, $page_number = null, $page_size = null, $statuses = null, $from_date = null, $to_date = null, $search = null, $currency = null, $min_amount = null, $max_amount = null, $tags = null, $sort = null, string $contentType = self::contentTypes['getPayoutsPaged'][0])
    {
        return $this->getPayoutsPagedAsyncWithHttpInfo($merchant_id, $page_number, $page_size, $statuses, $from_date, $to_date, $search, $currency, $min_amount, $max_amount, $tags, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayoutsPagedAsyncWithHttpInfo
     *
     * Gets a list of all payouts for a specific merchant.
     *
     * @param  string $merchant_id Required. The ID of the merchant to get the payouts for. (optional)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string[] $statuses An optional status filter for the payout records. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payouts created after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payouts created up until this date. (optional)
     * @param  string $search The text filter to apply to retrieve payouts with a similar title, description, merchant name or contact information. (optional)
     * @param  string $currency The currency filter to apply to retrieve payouts with this currency. (optional)
     * @param  float $min_amount The amount filter to apply to retrieve payouts that exceed this amount. (optional)
     * @param  float $max_amount The amount filter to apply to retrieve payouts that don&#39;t exceed this amount. (optional)
     * @param  string[] $tags The tag filter to apply to retrieve payouts with at least one of these tags. (optional)
     * @param  string $sort Optional expression to sort the order of the payouts. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutsPaged'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayoutsPagedAsyncWithHttpInfo($merchant_id = null, $page_number = null, $page_size = null, $statuses = null, $from_date = null, $to_date = null, $search = null, $currency = null, $min_amount = null, $max_amount = null, $tags = null, $sort = null, string $contentType = self::contentTypes['getPayoutsPaged'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayoutPageResponse';
        $request = $this->getPayoutsPagedRequest($merchant_id, $page_number, $page_size, $statuses, $from_date, $to_date, $search, $currency, $min_amount, $max_amount, $tags, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayoutsPaged'
     *
     * @param  string $merchant_id Required. The ID of the merchant to get the payouts for. (optional)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  string[] $statuses An optional status filter for the payout records. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payouts created after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payouts created up until this date. (optional)
     * @param  string $search The text filter to apply to retrieve payouts with a similar title, description, merchant name or contact information. (optional)
     * @param  string $currency The currency filter to apply to retrieve payouts with this currency. (optional)
     * @param  float $min_amount The amount filter to apply to retrieve payouts that exceed this amount. (optional)
     * @param  float $max_amount The amount filter to apply to retrieve payouts that don&#39;t exceed this amount. (optional)
     * @param  string[] $tags The tag filter to apply to retrieve payouts with at least one of these tags. (optional)
     * @param  string $sort Optional expression to sort the order of the payouts. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutsPaged'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayoutsPagedRequest($merchant_id = null, $page_number = null, $page_size = null, $statuses = null, $from_date = null, $to_date = null, $search = null, $currency = null, $min_amount = null, $max_amount = null, $tags = null, $sort = null, string $contentType = self::contentTypes['getPayoutsPaged'][0])
    {














        $resourcePath = '/api/v1/payouts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $merchant_id,
            'merchantID', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_number,
            'pageNumber', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_amount,
            'minAmount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_amount,
            'maxAmount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tags,
            'tags', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rejectPayout
     *
     * Rejects the authorisation for a payout.
     *
     * @param  string $id The ID of the payout to reject. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutReject $no_frixion_money_moov_models_payout_reject Reason for rejection. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectPayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout
     */
    public function rejectPayout($id, $no_frixion_money_moov_models_payout_reject = null, string $contentType = self::contentTypes['rejectPayout'][0])
    {
        list($response) = $this->rejectPayoutWithHttpInfo($id, $no_frixion_money_moov_models_payout_reject, $contentType);
        return $response;
    }

    /**
     * Operation rejectPayoutWithHttpInfo
     *
     * Rejects the authorisation for a payout.
     *
     * @param  string $id The ID of the payout to reject. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutReject $no_frixion_money_moov_models_payout_reject Reason for rejection. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectPayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout, HTTP status code, HTTP response headers (array of strings)
     */
    public function rejectPayoutWithHttpInfo($id, $no_frixion_money_moov_models_payout_reject = null, string $contentType = self::contentTypes['rejectPayout'][0])
    {
        $request = $this->rejectPayoutRequest($id, $no_frixion_money_moov_models_payout_reject, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rejectPayoutAsync
     *
     * Rejects the authorisation for a payout.
     *
     * @param  string $id The ID of the payout to reject. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutReject $no_frixion_money_moov_models_payout_reject Reason for rejection. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rejectPayoutAsync($id, $no_frixion_money_moov_models_payout_reject = null, string $contentType = self::contentTypes['rejectPayout'][0])
    {
        return $this->rejectPayoutAsyncWithHttpInfo($id, $no_frixion_money_moov_models_payout_reject, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rejectPayoutAsyncWithHttpInfo
     *
     * Rejects the authorisation for a payout.
     *
     * @param  string $id The ID of the payout to reject. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutReject $no_frixion_money_moov_models_payout_reject Reason for rejection. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rejectPayoutAsyncWithHttpInfo($id, $no_frixion_money_moov_models_payout_reject = null, string $contentType = self::contentTypes['rejectPayout'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout';
        $request = $this->rejectPayoutRequest($id, $no_frixion_money_moov_models_payout_reject, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rejectPayout'
     *
     * @param  string $id The ID of the payout to reject. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutReject $no_frixion_money_moov_models_payout_reject Reason for rejection. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rejectPayoutRequest($id, $no_frixion_money_moov_models_payout_reject = null, string $contentType = self::contentTypes['rejectPayout'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling rejectPayout'
            );
        }



        $resourcePath = '/api/v1/payouts/reject/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($no_frixion_money_moov_models_payout_reject)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($no_frixion_money_moov_models_payout_reject));
            } else {
                $httpBody = $no_frixion_money_moov_models_payout_reject;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendPayout
     *
     * Creates and submits a payout for a trusted caller.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutCreate $no_frixion_money_moov_models_payout_create The object containing the details of the payout to create and submit. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout
     */
    public function sendPayout($no_frixion_money_moov_models_payout_create = null, string $contentType = self::contentTypes['sendPayout'][0])
    {
        list($response) = $this->sendPayoutWithHttpInfo($no_frixion_money_moov_models_payout_create, $contentType);
        return $response;
    }

    /**
     * Operation sendPayoutWithHttpInfo
     *
     * Creates and submits a payout for a trusted caller.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutCreate $no_frixion_money_moov_models_payout_create The object containing the details of the payout to create and submit. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendPayoutWithHttpInfo($no_frixion_money_moov_models_payout_create = null, string $contentType = self::contentTypes['sendPayout'][0])
    {
        $request = $this->sendPayoutRequest($no_frixion_money_moov_models_payout_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendPayoutAsync
     *
     * Creates and submits a payout for a trusted caller.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutCreate $no_frixion_money_moov_models_payout_create The object containing the details of the payout to create and submit. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendPayoutAsync($no_frixion_money_moov_models_payout_create = null, string $contentType = self::contentTypes['sendPayout'][0])
    {
        return $this->sendPayoutAsyncWithHttpInfo($no_frixion_money_moov_models_payout_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendPayoutAsyncWithHttpInfo
     *
     * Creates and submits a payout for a trusted caller.
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutCreate $no_frixion_money_moov_models_payout_create The object containing the details of the payout to create and submit. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendPayoutAsyncWithHttpInfo($no_frixion_money_moov_models_payout_create = null, string $contentType = self::contentTypes['sendPayout'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout';
        $request = $this->sendPayoutRequest($no_frixion_money_moov_models_payout_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendPayout'
     *
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutCreate $no_frixion_money_moov_models_payout_create The object containing the details of the payout to create and submit. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendPayoutRequest($no_frixion_money_moov_models_payout_create = null, string $contentType = self::contentTypes['sendPayout'][0])
    {



        $resourcePath = '/api/v1/payouts/send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($no_frixion_money_moov_models_payout_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($no_frixion_money_moov_models_payout_create));
            } else {
                $httpBody = $no_frixion_money_moov_models_payout_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation submitBatchPayout
     *
     * Submits a batch payout for processing.
     *
     * @param  string $id The ID of the batch payout to submit. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitBatchPayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function submitBatchPayout($id, string $contentType = self::contentTypes['submitBatchPayout'][0])
    {
        $this->submitBatchPayoutWithHttpInfo($id, $contentType);
    }

    /**
     * Operation submitBatchPayoutWithHttpInfo
     *
     * Submits a batch payout for processing.
     *
     * @param  string $id The ID of the batch payout to submit. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitBatchPayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function submitBatchPayoutWithHttpInfo($id, string $contentType = self::contentTypes['submitBatchPayout'][0])
    {
        $request = $this->submitBatchPayoutRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation submitBatchPayoutAsync
     *
     * Submits a batch payout for processing.
     *
     * @param  string $id The ID of the batch payout to submit. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitBatchPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitBatchPayoutAsync($id, string $contentType = self::contentTypes['submitBatchPayout'][0])
    {
        return $this->submitBatchPayoutAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation submitBatchPayoutAsyncWithHttpInfo
     *
     * Submits a batch payout for processing.
     *
     * @param  string $id The ID of the batch payout to submit. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitBatchPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitBatchPayoutAsyncWithHttpInfo($id, string $contentType = self::contentTypes['submitBatchPayout'][0])
    {
        $returnType = '';
        $request = $this->submitBatchPayoutRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'submitBatchPayout'
     *
     * @param  string $id The ID of the batch payout to submit. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitBatchPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function submitBatchPayoutRequest($id, string $contentType = self::contentTypes['submitBatchPayout'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling submitBatchPayout'
            );
        }


        $resourcePath = '/api/v1/payouts/batch/submit/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation submitPayout
     *
     * Submits a payout for processing.
     *
     * @param  string $id The ID of the payout to submit. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitPayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function submitPayout($id, string $contentType = self::contentTypes['submitPayout'][0])
    {
        $this->submitPayoutWithHttpInfo($id, $contentType);
    }

    /**
     * Operation submitPayoutWithHttpInfo
     *
     * Submits a payout for processing.
     *
     * @param  string $id The ID of the payout to submit. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitPayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function submitPayoutWithHttpInfo($id, string $contentType = self::contentTypes['submitPayout'][0])
    {
        $request = $this->submitPayoutRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation submitPayoutAsync
     *
     * Submits a payout for processing.
     *
     * @param  string $id The ID of the payout to submit. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitPayoutAsync($id, string $contentType = self::contentTypes['submitPayout'][0])
    {
        return $this->submitPayoutAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation submitPayoutAsyncWithHttpInfo
     *
     * Submits a payout for processing.
     *
     * @param  string $id The ID of the payout to submit. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitPayoutAsyncWithHttpInfo($id, string $contentType = self::contentTypes['submitPayout'][0])
    {
        $returnType = '';
        $request = $this->submitPayoutRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'submitPayout'
     *
     * @param  string $id The ID of the payout to submit. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function submitPayoutRequest($id, string $contentType = self::contentTypes['submitPayout'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling submitPayout'
            );
        }


        $resourcePath = '/api/v1/payouts/submit/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePayout
     *
     * Updates a payout record.
     *
     * @param  string $id The ID of the payout to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutUpdate $no_frixion_money_moov_models_payout_update The object containing the details of payout to update. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout
     */
    public function updatePayout($id, $no_frixion_money_moov_models_payout_update = null, string $contentType = self::contentTypes['updatePayout'][0])
    {
        list($response) = $this->updatePayoutWithHttpInfo($id, $no_frixion_money_moov_models_payout_update, $contentType);
        return $response;
    }

    /**
     * Operation updatePayoutWithHttpInfo
     *
     * Updates a payout record.
     *
     * @param  string $id The ID of the payout to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutUpdate $no_frixion_money_moov_models_payout_update The object containing the details of payout to update. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayout'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePayoutWithHttpInfo($id, $no_frixion_money_moov_models_payout_update = null, string $contentType = self::contentTypes['updatePayout'][0])
    {
        $request = $this->updatePayoutRequest($id, $no_frixion_money_moov_models_payout_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePayoutAsync
     *
     * Updates a payout record.
     *
     * @param  string $id The ID of the payout to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutUpdate $no_frixion_money_moov_models_payout_update The object containing the details of payout to update. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePayoutAsync($id, $no_frixion_money_moov_models_payout_update = null, string $contentType = self::contentTypes['updatePayout'][0])
    {
        return $this->updatePayoutAsyncWithHttpInfo($id, $no_frixion_money_moov_models_payout_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePayoutAsyncWithHttpInfo
     *
     * Updates a payout record.
     *
     * @param  string $id The ID of the payout to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutUpdate $no_frixion_money_moov_models_payout_update The object containing the details of payout to update. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePayoutAsyncWithHttpInfo($id, $no_frixion_money_moov_models_payout_update = null, string $contentType = self::contentTypes['updatePayout'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayout';
        $request = $this->updatePayoutRequest($id, $no_frixion_money_moov_models_payout_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePayout'
     *
     * @param  string $id The ID of the payout to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayoutUpdate $no_frixion_money_moov_models_payout_update The object containing the details of payout to update. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePayoutRequest($id, $no_frixion_money_moov_models_payout_update = null, string $contentType = self::contentTypes['updatePayout'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updatePayout'
            );
        }



        $resourcePath = '/api/v1/payouts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($no_frixion_money_moov_models_payout_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($no_frixion_money_moov_models_payout_update));
            } else {
                $httpBody = $no_frixion_money_moov_models_payout_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
