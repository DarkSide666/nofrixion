<?php
/**
 * PayrunsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Nofrixion\Client\ApiException;
use Nofrixion\Client\Configuration;
use Nofrixion\Client\HeaderSelector;
use Nofrixion\Client\ObjectSerializer;

/**
 * PayrunsApi Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PayrunsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'archivePayrun' => [
            'application/json',
        ],
        'cancelPayrun' => [
            'application/json',
        ],
        'createPayrun' => [
            'application/json',
        ],
        'deletePayrun' => [
            'application/json',
        ],
        'getPayrun' => [
            'application/json',
        ],
        'getPayrunsPaged' => [
            'application/json',
        ],
        'rejectPayrun' => [
            'application/json',
        ],
        'requestPayrunAuthorisation' => [
            'application/json',
        ],
        'submitPayrun' => [
            'application/json',
        ],
        'unarchivePayrun' => [
            'application/json',
        ],
        'updatePayrun' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation archivePayrun
     *
     * Archives a pay run, excluding it from most actions.
     *
     * @param  string $id The id of the pay run to archive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archivePayrun'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function archivePayrun($id, string $contentType = self::contentTypes['archivePayrun'][0])
    {
        $this->archivePayrunWithHttpInfo($id, $contentType);
    }

    /**
     * Operation archivePayrunWithHttpInfo
     *
     * Archives a pay run, excluding it from most actions.
     *
     * @param  string $id The id of the pay run to archive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archivePayrun'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function archivePayrunWithHttpInfo($id, string $contentType = self::contentTypes['archivePayrun'][0])
    {
        $request = $this->archivePayrunRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation archivePayrunAsync
     *
     * Archives a pay run, excluding it from most actions.
     *
     * @param  string $id The id of the pay run to archive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archivePayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archivePayrunAsync($id, string $contentType = self::contentTypes['archivePayrun'][0])
    {
        return $this->archivePayrunAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation archivePayrunAsyncWithHttpInfo
     *
     * Archives a pay run, excluding it from most actions.
     *
     * @param  string $id The id of the pay run to archive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archivePayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archivePayrunAsyncWithHttpInfo($id, string $contentType = self::contentTypes['archivePayrun'][0])
    {
        $returnType = '';
        $request = $this->archivePayrunRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'archivePayrun'
     *
     * @param  string $id The id of the pay run to archive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archivePayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function archivePayrunRequest($id, string $contentType = self::contentTypes['archivePayrun'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling archivePayrun'
            );
        }


        $resourcePath = '/api/v1/payruns/{id}/archive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelPayrun
     *
     * Cancels the schedule of a pay run and delete&#39;s all it&#39;s payouts.
     *
     * @param  string $id The id of the pay run to cancel the schedule. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPayrun'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelPayrun($id, string $contentType = self::contentTypes['cancelPayrun'][0])
    {
        $this->cancelPayrunWithHttpInfo($id, $contentType);
    }

    /**
     * Operation cancelPayrunWithHttpInfo
     *
     * Cancels the schedule of a pay run and delete&#39;s all it&#39;s payouts.
     *
     * @param  string $id The id of the pay run to cancel the schedule. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPayrun'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelPayrunWithHttpInfo($id, string $contentType = self::contentTypes['cancelPayrun'][0])
    {
        $request = $this->cancelPayrunRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation cancelPayrunAsync
     *
     * Cancels the schedule of a pay run and delete&#39;s all it&#39;s payouts.
     *
     * @param  string $id The id of the pay run to cancel the schedule. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPayrunAsync($id, string $contentType = self::contentTypes['cancelPayrun'][0])
    {
        return $this->cancelPayrunAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelPayrunAsyncWithHttpInfo
     *
     * Cancels the schedule of a pay run and delete&#39;s all it&#39;s payouts.
     *
     * @param  string $id The id of the pay run to cancel the schedule. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPayrunAsyncWithHttpInfo($id, string $contentType = self::contentTypes['cancelPayrun'][0])
    {
        $returnType = '';
        $request = $this->cancelPayrunRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelPayrun'
     *
     * @param  string $id The id of the pay run to cancel the schedule. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelPayrunRequest($id, string $contentType = self::contentTypes['cancelPayrun'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cancelPayrun'
            );
        }


        $resourcePath = '/api/v1/payruns/{id}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPayrun
     *
     * Create a new Payrun from a list of invoices.
     *
     * @param  string $merchant_id The merchant ID to create the Payrun for. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunCreate $no_frixion_money_moov_models_payrun_create The properties, including the list of invocies, for the PayRun. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayrun'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createPayrun($merchant_id, $no_frixion_money_moov_models_payrun_create = null, string $contentType = self::contentTypes['createPayrun'][0])
    {
        $this->createPayrunWithHttpInfo($merchant_id, $no_frixion_money_moov_models_payrun_create, $contentType);
    }

    /**
     * Operation createPayrunWithHttpInfo
     *
     * Create a new Payrun from a list of invoices.
     *
     * @param  string $merchant_id The merchant ID to create the Payrun for. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunCreate $no_frixion_money_moov_models_payrun_create The properties, including the list of invocies, for the PayRun. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayrun'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPayrunWithHttpInfo($merchant_id, $no_frixion_money_moov_models_payrun_create = null, string $contentType = self::contentTypes['createPayrun'][0])
    {
        $request = $this->createPayrunRequest($merchant_id, $no_frixion_money_moov_models_payrun_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createPayrunAsync
     *
     * Create a new Payrun from a list of invoices.
     *
     * @param  string $merchant_id The merchant ID to create the Payrun for. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunCreate $no_frixion_money_moov_models_payrun_create The properties, including the list of invocies, for the PayRun. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPayrunAsync($merchant_id, $no_frixion_money_moov_models_payrun_create = null, string $contentType = self::contentTypes['createPayrun'][0])
    {
        return $this->createPayrunAsyncWithHttpInfo($merchant_id, $no_frixion_money_moov_models_payrun_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPayrunAsyncWithHttpInfo
     *
     * Create a new Payrun from a list of invoices.
     *
     * @param  string $merchant_id The merchant ID to create the Payrun for. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunCreate $no_frixion_money_moov_models_payrun_create The properties, including the list of invocies, for the PayRun. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPayrunAsyncWithHttpInfo($merchant_id, $no_frixion_money_moov_models_payrun_create = null, string $contentType = self::contentTypes['createPayrun'][0])
    {
        $returnType = '';
        $request = $this->createPayrunRequest($merchant_id, $no_frixion_money_moov_models_payrun_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPayrun'
     *
     * @param  string $merchant_id The merchant ID to create the Payrun for. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunCreate $no_frixion_money_moov_models_payrun_create The properties, including the list of invocies, for the PayRun. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPayrunRequest($merchant_id, $no_frixion_money_moov_models_payrun_create = null, string $contentType = self::contentTypes['createPayrun'][0])
    {

        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling createPayrun'
            );
        }



        $resourcePath = '/api/v1/payruns/{merchantID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantID' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($no_frixion_money_moov_models_payrun_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($no_frixion_money_moov_models_payrun_create));
            } else {
                $httpBody = $no_frixion_money_moov_models_payrun_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePayrun
     *
     * Deletes a pay run, along with its invoices, if it&#39;s in a Draft state.
     *
     * @param  string $id The id of the pay run to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayrun'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePayrun($id, string $contentType = self::contentTypes['deletePayrun'][0])
    {
        $this->deletePayrunWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deletePayrunWithHttpInfo
     *
     * Deletes a pay run, along with its invoices, if it&#39;s in a Draft state.
     *
     * @param  string $id The id of the pay run to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayrun'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePayrunWithHttpInfo($id, string $contentType = self::contentTypes['deletePayrun'][0])
    {
        $request = $this->deletePayrunRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePayrunAsync
     *
     * Deletes a pay run, along with its invoices, if it&#39;s in a Draft state.
     *
     * @param  string $id The id of the pay run to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePayrunAsync($id, string $contentType = self::contentTypes['deletePayrun'][0])
    {
        return $this->deletePayrunAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePayrunAsyncWithHttpInfo
     *
     * Deletes a pay run, along with its invoices, if it&#39;s in a Draft state.
     *
     * @param  string $id The id of the pay run to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePayrunAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deletePayrun'][0])
    {
        $returnType = '';
        $request = $this->deletePayrunRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePayrun'
     *
     * @param  string $id The id of the pay run to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePayrunRequest($id, string $contentType = self::contentTypes['deletePayrun'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deletePayrun'
            );
        }


        $resourcePath = '/api/v1/payruns/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayrun
     *
     * Gets a single payrun.
     *
     * @param  string $id The ID of the payrun record to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayrun'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun
     */
    public function getPayrun($id, string $contentType = self::contentTypes['getPayrun'][0])
    {
        list($response) = $this->getPayrunWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getPayrunWithHttpInfo
     *
     * Gets a single payrun.
     *
     * @param  string $id The ID of the payrun record to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayrun'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayrunWithHttpInfo($id, string $contentType = self::contentTypes['getPayrun'][0])
    {
        $request = $this->getPayrunRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayrunAsync
     *
     * Gets a single payrun.
     *
     * @param  string $id The ID of the payrun record to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayrunAsync($id, string $contentType = self::contentTypes['getPayrun'][0])
    {
        return $this->getPayrunAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayrunAsyncWithHttpInfo
     *
     * Gets a single payrun.
     *
     * @param  string $id The ID of the payrun record to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayrunAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getPayrun'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun';
        $request = $this->getPayrunRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayrun'
     *
     * @param  string $id The ID of the payrun record to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayrunRequest($id, string $contentType = self::contentTypes['getPayrun'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getPayrun'
            );
        }


        $resourcePath = '/api/v1/payruns/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayrunsPaged
     *
     * Gets all payruns for a merchant.
     *
     * @param  string $merchant_id The merchant ID to get the payruns for (optional)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payruns created after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payruns created up until this date. (optional)
     * @param  string $sort Optional expression to sort the order of the payruns. (optional)
     * @param  string[] $statuses An optional status filter list (optional)
     * @param  string $search The text filter to apply to retrieve payruns (optional)
     * @param  bool $only_archived Flag that indicates whether to fetch only archived payruns or not (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayrunsPaged'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayrunPageResponse
     */
    public function getPayrunsPaged($merchant_id = null, $page_number = null, $page_size = null, $from_date = null, $to_date = null, $sort = null, $statuses = null, $search = null, $only_archived = false, string $contentType = self::contentTypes['getPayrunsPaged'][0])
    {
        list($response) = $this->getPayrunsPagedWithHttpInfo($merchant_id, $page_number, $page_size, $from_date, $to_date, $sort, $statuses, $search, $only_archived, $contentType);
        return $response;
    }

    /**
     * Operation getPayrunsPagedWithHttpInfo
     *
     * Gets all payruns for a merchant.
     *
     * @param  string $merchant_id The merchant ID to get the payruns for (optional)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payruns created after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payruns created up until this date. (optional)
     * @param  string $sort Optional expression to sort the order of the payruns. (optional)
     * @param  string[] $statuses An optional status filter list (optional)
     * @param  string $search The text filter to apply to retrieve payruns (optional)
     * @param  bool $only_archived Flag that indicates whether to fetch only archived payruns or not (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayrunsPaged'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayrunPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayrunsPagedWithHttpInfo($merchant_id = null, $page_number = null, $page_size = null, $from_date = null, $to_date = null, $sort = null, $statuses = null, $search = null, $only_archived = false, string $contentType = self::contentTypes['getPayrunsPaged'][0])
    {
        $request = $this->getPayrunsPagedRequest($merchant_id, $page_number, $page_size, $from_date, $to_date, $sort, $statuses, $search, $only_archived, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayrunPageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayrunPageResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayrunPageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayrunPageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayrunPageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayrunsPagedAsync
     *
     * Gets all payruns for a merchant.
     *
     * @param  string $merchant_id The merchant ID to get the payruns for (optional)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payruns created after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payruns created up until this date. (optional)
     * @param  string $sort Optional expression to sort the order of the payruns. (optional)
     * @param  string[] $statuses An optional status filter list (optional)
     * @param  string $search The text filter to apply to retrieve payruns (optional)
     * @param  bool $only_archived Flag that indicates whether to fetch only archived payruns or not (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayrunsPaged'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayrunsPagedAsync($merchant_id = null, $page_number = null, $page_size = null, $from_date = null, $to_date = null, $sort = null, $statuses = null, $search = null, $only_archived = false, string $contentType = self::contentTypes['getPayrunsPaged'][0])
    {
        return $this->getPayrunsPagedAsyncWithHttpInfo($merchant_id, $page_number, $page_size, $from_date, $to_date, $sort, $statuses, $search, $only_archived, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayrunsPagedAsyncWithHttpInfo
     *
     * Gets all payruns for a merchant.
     *
     * @param  string $merchant_id The merchant ID to get the payruns for (optional)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payruns created after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payruns created up until this date. (optional)
     * @param  string $sort Optional expression to sort the order of the payruns. (optional)
     * @param  string[] $statuses An optional status filter list (optional)
     * @param  string $search The text filter to apply to retrieve payruns (optional)
     * @param  bool $only_archived Flag that indicates whether to fetch only archived payruns or not (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayrunsPaged'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayrunsPagedAsyncWithHttpInfo($merchant_id = null, $page_number = null, $page_size = null, $from_date = null, $to_date = null, $sort = null, $statuses = null, $search = null, $only_archived = false, string $contentType = self::contentTypes['getPayrunsPaged'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionBizBizModelsPagingPayrunPageResponse';
        $request = $this->getPayrunsPagedRequest($merchant_id, $page_number, $page_size, $from_date, $to_date, $sort, $statuses, $search, $only_archived, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayrunsPaged'
     *
     * @param  string $merchant_id The merchant ID to get the payruns for (optional)
     * @param  int $page_number The page number from where records are retrieved. (optional)
     * @param  int $page_size The number of records to be retrieved from a page. (optional)
     * @param  \DateTime $from_date The date filter to apply to retrieve payruns created after this date. (optional)
     * @param  \DateTime $to_date The date filter to apply to retrieve payruns created up until this date. (optional)
     * @param  string $sort Optional expression to sort the order of the payruns. (optional)
     * @param  string[] $statuses An optional status filter list (optional)
     * @param  string $search The text filter to apply to retrieve payruns (optional)
     * @param  bool $only_archived Flag that indicates whether to fetch only archived payruns or not (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayrunsPaged'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayrunsPagedRequest($merchant_id = null, $page_number = null, $page_size = null, $from_date = null, $to_date = null, $sort = null, $statuses = null, $search = null, $only_archived = false, string $contentType = self::contentTypes['getPayrunsPaged'][0])
    {











        $resourcePath = '/api/v1/payruns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $merchant_id,
            'merchantID', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_number,
            'pageNumber', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $only_archived,
            'onlyArchived', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rejectPayrun
     *
     * Rejects a payrun.
     *
     * @param  string $id The ID of the payrun to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunReject $no_frixion_money_moov_models_payrun_reject The object containing the details of the payrun to reject. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectPayrun'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun
     */
    public function rejectPayrun($id, $no_frixion_money_moov_models_payrun_reject = null, string $contentType = self::contentTypes['rejectPayrun'][0])
    {
        list($response) = $this->rejectPayrunWithHttpInfo($id, $no_frixion_money_moov_models_payrun_reject, $contentType);
        return $response;
    }

    /**
     * Operation rejectPayrunWithHttpInfo
     *
     * Rejects a payrun.
     *
     * @param  string $id The ID of the payrun to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunReject $no_frixion_money_moov_models_payrun_reject The object containing the details of the payrun to reject. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectPayrun'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun, HTTP status code, HTTP response headers (array of strings)
     */
    public function rejectPayrunWithHttpInfo($id, $no_frixion_money_moov_models_payrun_reject = null, string $contentType = self::contentTypes['rejectPayrun'][0])
    {
        $request = $this->rejectPayrunRequest($id, $no_frixion_money_moov_models_payrun_reject, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rejectPayrunAsync
     *
     * Rejects a payrun.
     *
     * @param  string $id The ID of the payrun to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunReject $no_frixion_money_moov_models_payrun_reject The object containing the details of the payrun to reject. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectPayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rejectPayrunAsync($id, $no_frixion_money_moov_models_payrun_reject = null, string $contentType = self::contentTypes['rejectPayrun'][0])
    {
        return $this->rejectPayrunAsyncWithHttpInfo($id, $no_frixion_money_moov_models_payrun_reject, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rejectPayrunAsyncWithHttpInfo
     *
     * Rejects a payrun.
     *
     * @param  string $id The ID of the payrun to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunReject $no_frixion_money_moov_models_payrun_reject The object containing the details of the payrun to reject. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectPayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rejectPayrunAsyncWithHttpInfo($id, $no_frixion_money_moov_models_payrun_reject = null, string $contentType = self::contentTypes['rejectPayrun'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun';
        $request = $this->rejectPayrunRequest($id, $no_frixion_money_moov_models_payrun_reject, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rejectPayrun'
     *
     * @param  string $id The ID of the payrun to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunReject $no_frixion_money_moov_models_payrun_reject The object containing the details of the payrun to reject. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectPayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rejectPayrunRequest($id, $no_frixion_money_moov_models_payrun_reject = null, string $contentType = self::contentTypes['rejectPayrun'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling rejectPayrun'
            );
        }



        $resourcePath = '/api/v1/payruns/{id}/reject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($no_frixion_money_moov_models_payrun_reject)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($no_frixion_money_moov_models_payrun_reject));
            } else {
                $httpBody = $no_frixion_money_moov_models_payrun_reject;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation requestPayrunAuthorisation
     *
     * Request authorisation from authorisers for this payrun.
     *
     * @param  string $id The payrun id (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunAuthorisation $no_frixion_money_moov_models_payrun_authorisation The payrun authorisation request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestPayrunAuthorisation'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function requestPayrunAuthorisation($id, $no_frixion_money_moov_models_payrun_authorisation = null, string $contentType = self::contentTypes['requestPayrunAuthorisation'][0])
    {
        $this->requestPayrunAuthorisationWithHttpInfo($id, $no_frixion_money_moov_models_payrun_authorisation, $contentType);
    }

    /**
     * Operation requestPayrunAuthorisationWithHttpInfo
     *
     * Request authorisation from authorisers for this payrun.
     *
     * @param  string $id The payrun id (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunAuthorisation $no_frixion_money_moov_models_payrun_authorisation The payrun authorisation request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestPayrunAuthorisation'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestPayrunAuthorisationWithHttpInfo($id, $no_frixion_money_moov_models_payrun_authorisation = null, string $contentType = self::contentTypes['requestPayrunAuthorisation'][0])
    {
        $request = $this->requestPayrunAuthorisationRequest($id, $no_frixion_money_moov_models_payrun_authorisation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation requestPayrunAuthorisationAsync
     *
     * Request authorisation from authorisers for this payrun.
     *
     * @param  string $id The payrun id (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunAuthorisation $no_frixion_money_moov_models_payrun_authorisation The payrun authorisation request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestPayrunAuthorisation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestPayrunAuthorisationAsync($id, $no_frixion_money_moov_models_payrun_authorisation = null, string $contentType = self::contentTypes['requestPayrunAuthorisation'][0])
    {
        return $this->requestPayrunAuthorisationAsyncWithHttpInfo($id, $no_frixion_money_moov_models_payrun_authorisation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestPayrunAuthorisationAsyncWithHttpInfo
     *
     * Request authorisation from authorisers for this payrun.
     *
     * @param  string $id The payrun id (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunAuthorisation $no_frixion_money_moov_models_payrun_authorisation The payrun authorisation request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestPayrunAuthorisation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestPayrunAuthorisationAsyncWithHttpInfo($id, $no_frixion_money_moov_models_payrun_authorisation = null, string $contentType = self::contentTypes['requestPayrunAuthorisation'][0])
    {
        $returnType = '';
        $request = $this->requestPayrunAuthorisationRequest($id, $no_frixion_money_moov_models_payrun_authorisation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestPayrunAuthorisation'
     *
     * @param  string $id The payrun id (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunAuthorisation $no_frixion_money_moov_models_payrun_authorisation The payrun authorisation request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestPayrunAuthorisation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function requestPayrunAuthorisationRequest($id, $no_frixion_money_moov_models_payrun_authorisation = null, string $contentType = self::contentTypes['requestPayrunAuthorisation'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling requestPayrunAuthorisation'
            );
        }



        $resourcePath = '/api/v1/payruns/{id}/request-authorisation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($no_frixion_money_moov_models_payrun_authorisation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($no_frixion_money_moov_models_payrun_authorisation));
            } else {
                $httpBody = $no_frixion_money_moov_models_payrun_authorisation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation submitPayrun
     *
     * Submits a payrun for processing.
     *
     * @param  string $id The payrun id (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunApprove $no_frixion_money_moov_models_payrun_approve The object containing some optional values to override the existent payrun (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitPayrun'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function submitPayrun($id, $no_frixion_money_moov_models_payrun_approve = null, string $contentType = self::contentTypes['submitPayrun'][0])
    {
        $this->submitPayrunWithHttpInfo($id, $no_frixion_money_moov_models_payrun_approve, $contentType);
    }

    /**
     * Operation submitPayrunWithHttpInfo
     *
     * Submits a payrun for processing.
     *
     * @param  string $id The payrun id (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunApprove $no_frixion_money_moov_models_payrun_approve The object containing some optional values to override the existent payrun (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitPayrun'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function submitPayrunWithHttpInfo($id, $no_frixion_money_moov_models_payrun_approve = null, string $contentType = self::contentTypes['submitPayrun'][0])
    {
        $request = $this->submitPayrunRequest($id, $no_frixion_money_moov_models_payrun_approve, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation submitPayrunAsync
     *
     * Submits a payrun for processing.
     *
     * @param  string $id The payrun id (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunApprove $no_frixion_money_moov_models_payrun_approve The object containing some optional values to override the existent payrun (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitPayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitPayrunAsync($id, $no_frixion_money_moov_models_payrun_approve = null, string $contentType = self::contentTypes['submitPayrun'][0])
    {
        return $this->submitPayrunAsyncWithHttpInfo($id, $no_frixion_money_moov_models_payrun_approve, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation submitPayrunAsyncWithHttpInfo
     *
     * Submits a payrun for processing.
     *
     * @param  string $id The payrun id (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunApprove $no_frixion_money_moov_models_payrun_approve The object containing some optional values to override the existent payrun (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitPayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitPayrunAsyncWithHttpInfo($id, $no_frixion_money_moov_models_payrun_approve = null, string $contentType = self::contentTypes['submitPayrun'][0])
    {
        $returnType = '';
        $request = $this->submitPayrunRequest($id, $no_frixion_money_moov_models_payrun_approve, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'submitPayrun'
     *
     * @param  string $id The payrun id (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunApprove $no_frixion_money_moov_models_payrun_approve The object containing some optional values to override the existent payrun (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitPayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function submitPayrunRequest($id, $no_frixion_money_moov_models_payrun_approve = null, string $contentType = self::contentTypes['submitPayrun'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling submitPayrun'
            );
        }



        $resourcePath = '/api/v1/payruns/{id}/submit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($no_frixion_money_moov_models_payrun_approve)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($no_frixion_money_moov_models_payrun_approve));
            } else {
                $httpBody = $no_frixion_money_moov_models_payrun_approve;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unarchivePayrun
     *
     * Restores an archived pay run, making it retrievable from most actions.
     *
     * @param  string $id The id of the pay run to unarchive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unarchivePayrun'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function unarchivePayrun($id, string $contentType = self::contentTypes['unarchivePayrun'][0])
    {
        $this->unarchivePayrunWithHttpInfo($id, $contentType);
    }

    /**
     * Operation unarchivePayrunWithHttpInfo
     *
     * Restores an archived pay run, making it retrievable from most actions.
     *
     * @param  string $id The id of the pay run to unarchive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unarchivePayrun'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function unarchivePayrunWithHttpInfo($id, string $contentType = self::contentTypes['unarchivePayrun'][0])
    {
        $request = $this->unarchivePayrunRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation unarchivePayrunAsync
     *
     * Restores an archived pay run, making it retrievable from most actions.
     *
     * @param  string $id The id of the pay run to unarchive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unarchivePayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unarchivePayrunAsync($id, string $contentType = self::contentTypes['unarchivePayrun'][0])
    {
        return $this->unarchivePayrunAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unarchivePayrunAsyncWithHttpInfo
     *
     * Restores an archived pay run, making it retrievable from most actions.
     *
     * @param  string $id The id of the pay run to unarchive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unarchivePayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unarchivePayrunAsyncWithHttpInfo($id, string $contentType = self::contentTypes['unarchivePayrun'][0])
    {
        $returnType = '';
        $request = $this->unarchivePayrunRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unarchivePayrun'
     *
     * @param  string $id The id of the pay run to unarchive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unarchivePayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unarchivePayrunRequest($id, string $contentType = self::contentTypes['unarchivePayrun'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling unarchivePayrun'
            );
        }


        $resourcePath = '/api/v1/payruns/{id}/unarchive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePayrun
     *
     * Updates a payrun.
     *
     * @param  string $id The ID of the payrun to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunUpdate $no_frixion_money_moov_models_payrun_update The object containing the details of the payrun to update. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayrun'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun
     */
    public function updatePayrun($id, $no_frixion_money_moov_models_payrun_update = null, string $contentType = self::contentTypes['updatePayrun'][0])
    {
        list($response) = $this->updatePayrunWithHttpInfo($id, $no_frixion_money_moov_models_payrun_update, $contentType);
        return $response;
    }

    /**
     * Operation updatePayrunWithHttpInfo
     *
     * Updates a payrun.
     *
     * @param  string $id The ID of the payrun to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunUpdate $no_frixion_money_moov_models_payrun_update The object containing the details of the payrun to update. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayrun'] to see the possible values for this operation
     *
     * @throws \Nofrixion\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePayrunWithHttpInfo($id, $no_frixion_money_moov_models_payrun_update = null, string $contentType = self::contentTypes['updatePayrun'][0])
    {
        $request = $this->updatePayrunRequest($id, $no_frixion_money_moov_models_payrun_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePayrunAsync
     *
     * Updates a payrun.
     *
     * @param  string $id The ID of the payrun to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunUpdate $no_frixion_money_moov_models_payrun_update The object containing the details of the payrun to update. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePayrunAsync($id, $no_frixion_money_moov_models_payrun_update = null, string $contentType = self::contentTypes['updatePayrun'][0])
    {
        return $this->updatePayrunAsyncWithHttpInfo($id, $no_frixion_money_moov_models_payrun_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePayrunAsyncWithHttpInfo
     *
     * Updates a payrun.
     *
     * @param  string $id The ID of the payrun to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunUpdate $no_frixion_money_moov_models_payrun_update The object containing the details of the payrun to update. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePayrunAsyncWithHttpInfo($id, $no_frixion_money_moov_models_payrun_update = null, string $contentType = self::contentTypes['updatePayrun'][0])
    {
        $returnType = '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrun';
        $request = $this->updatePayrunRequest($id, $no_frixion_money_moov_models_payrun_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePayrun'
     *
     * @param  string $id The ID of the payrun to update. (required)
     * @param  \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPayrunUpdate $no_frixion_money_moov_models_payrun_update The object containing the details of the payrun to update. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayrun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePayrunRequest($id, $no_frixion_money_moov_models_payrun_update = null, string $contentType = self::contentTypes['updatePayrun'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updatePayrun'
            );
        }



        $resourcePath = '/api/v1/payruns/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($no_frixion_money_moov_models_payrun_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($no_frixion_money_moov_models_payrun_update));
            } else {
                $httpBody = $no_frixion_money_moov_models_payrun_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
