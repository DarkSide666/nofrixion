<?php
/**
 * NoFrixionDataModelsPayoutEventEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionDataModelsPayoutEventEntity Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionDataModelsPayoutEventEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.DataModels.PayoutEventEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'payout_id' => 'string',
        'event_status' => 'string',
        'amount' => 'float',
        'currency' => 'string',
        'event_type' => 'string',
        'inserted' => '\DateTime',
        'raw_response' => 'string',
        'raw_response_hash' => 'string',
        'error_reason' => 'string',
        'error_message' => 'string',
        'supplier_payment_id' => 'string',
        'supplier' => 'string',
        'invoice_id' => 'string',
        'user_id' => 'string',
        'authoriser_hash' => 'string',
        'rule_name' => 'string',
        'signature' => 'string',
        'payout' => '\Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity',
        'user' => '\Nofrixion\Client\Model\NoFrixionDataModelsUserEntity'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'payout_id' => 'uuid',
        'event_status' => null,
        'amount' => 'double',
        'currency' => null,
        'event_type' => null,
        'inserted' => 'date-time',
        'raw_response' => null,
        'raw_response_hash' => null,
        'error_reason' => null,
        'error_message' => null,
        'supplier_payment_id' => null,
        'supplier' => null,
        'invoice_id' => null,
        'user_id' => 'uuid',
        'authoriser_hash' => null,
        'rule_name' => null,
        'signature' => null,
        'payout' => null,
        'user' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'payout_id' => false,
        'event_status' => true,
        'amount' => false,
        'currency' => false,
        'event_type' => false,
        'inserted' => false,
        'raw_response' => true,
        'raw_response_hash' => true,
        'error_reason' => true,
        'error_message' => true,
        'supplier_payment_id' => true,
        'supplier' => false,
        'invoice_id' => true,
        'user_id' => true,
        'authoriser_hash' => true,
        'rule_name' => true,
        'signature' => true,
        'payout' => false,
        'user' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'payout_id' => 'payoutID',
        'event_status' => 'eventStatus',
        'amount' => 'amount',
        'currency' => 'currency',
        'event_type' => 'eventType',
        'inserted' => 'inserted',
        'raw_response' => 'rawResponse',
        'raw_response_hash' => 'rawResponseHash',
        'error_reason' => 'errorReason',
        'error_message' => 'errorMessage',
        'supplier_payment_id' => 'supplierPaymentID',
        'supplier' => 'supplier',
        'invoice_id' => 'invoiceID',
        'user_id' => 'userID',
        'authoriser_hash' => 'authoriserHash',
        'rule_name' => 'ruleName',
        'signature' => 'signature',
        'payout' => 'payout',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'payout_id' => 'setPayoutId',
        'event_status' => 'setEventStatus',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'event_type' => 'setEventType',
        'inserted' => 'setInserted',
        'raw_response' => 'setRawResponse',
        'raw_response_hash' => 'setRawResponseHash',
        'error_reason' => 'setErrorReason',
        'error_message' => 'setErrorMessage',
        'supplier_payment_id' => 'setSupplierPaymentId',
        'supplier' => 'setSupplier',
        'invoice_id' => 'setInvoiceId',
        'user_id' => 'setUserId',
        'authoriser_hash' => 'setAuthoriserHash',
        'rule_name' => 'setRuleName',
        'signature' => 'setSignature',
        'payout' => 'setPayout',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'payout_id' => 'getPayoutId',
        'event_status' => 'getEventStatus',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'event_type' => 'getEventType',
        'inserted' => 'getInserted',
        'raw_response' => 'getRawResponse',
        'raw_response_hash' => 'getRawResponseHash',
        'error_reason' => 'getErrorReason',
        'error_message' => 'getErrorMessage',
        'supplier_payment_id' => 'getSupplierPaymentId',
        'supplier' => 'getSupplier',
        'invoice_id' => 'getInvoiceId',
        'user_id' => 'getUserId',
        'authoriser_hash' => 'getAuthoriserHash',
        'rule_name' => 'getRuleName',
        'signature' => 'getSignature',
        'payout' => 'getPayout',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CURRENCY_NONE = 'NONE';
    public const CURRENCY_GBP = 'GBP';
    public const CURRENCY_EUR = 'EUR';
    public const CURRENCY_BTC = 'BTC';
    public const EVENT_TYPE_UNKNOWN = 'Unknown';
    public const EVENT_TYPE_AUTHORISE = 'Authorise';
    public const EVENT_TYPE_INITIATE = 'Initiate';
    public const EVENT_TYPE_WEBHOOK = 'Webhook';
    public const EVENT_TYPE_SETTLE = 'Settle';
    public const EVENT_TYPE_FAILURE = 'Failure';
    public const EVENT_TYPE_CREATED = 'Created';
    public const EVENT_TYPE_QUEUED = 'Queued';
    public const EVENT_TYPE_SCHEDULED = 'Scheduled';
    public const EVENT_TYPE_BENEFICIARY_UPDATED = 'BeneficiaryUpdated';
    public const EVENT_TYPE_BENEFICIARY_DISABLED = 'BeneficiaryDisabled';
    public const EVENT_TYPE_EDITED = 'Edited';
    public const EVENT_TYPE_REJECTED_APPROVAL = 'RejectedApproval';
    public const EVENT_TYPE_TRUSTED_AUTHORISE = 'TrustedAuthorise';
    public const EVENT_TYPE_SIGNED = 'Signed';
    public const EVENT_TYPE_BENEFICIARY_ENABLED = 'BeneficiaryEnabled';
    public const SUPPLIER_NONE = 'None';
    public const SUPPLIER_CYBER_SOURCE = 'CyberSource';
    public const SUPPLIER_CHECKOUT = 'Checkout';
    public const SUPPLIER_STRIPE = 'Stripe';
    public const SUPPLIER_MODULR = 'Modulr';
    public const SUPPLIER_PLAID = 'Plaid';
    public const SUPPLIER_YAPILY = 'Yapily';
    public const SUPPLIER_NOFRIXION = 'Nofrixion';
    public const SUPPLIER_BITCOIN = 'Bitcoin';
    public const SUPPLIER_BITCOIN_TESTNET = 'BitcoinTestnet';
    public const SUPPLIER_BANKING_CIRCLE = 'BankingCircle';
    public const SUPPLIER_BANKING_CIRCLE_AGENCY = 'BankingCircleAgency';
    public const SUPPLIER_SIMULATOR = 'Simulator';
    public const SUPPLIER_LIGHTNING = 'Lightning';
    public const SUPPLIER_LIGHTNING_TESTNET = 'LightningTestnet';
    public const SUPPLIER_BANKING_CIRCLE_DIRECT_DEBIT = 'BankingCircleDirectDebit';
    public const SUPPLIER_TRIBE = 'Tribe';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_NONE,
            self::CURRENCY_GBP,
            self::CURRENCY_EUR,
            self::CURRENCY_BTC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventTypeAllowableValues()
    {
        return [
            self::EVENT_TYPE_UNKNOWN,
            self::EVENT_TYPE_AUTHORISE,
            self::EVENT_TYPE_INITIATE,
            self::EVENT_TYPE_WEBHOOK,
            self::EVENT_TYPE_SETTLE,
            self::EVENT_TYPE_FAILURE,
            self::EVENT_TYPE_CREATED,
            self::EVENT_TYPE_QUEUED,
            self::EVENT_TYPE_SCHEDULED,
            self::EVENT_TYPE_BENEFICIARY_UPDATED,
            self::EVENT_TYPE_BENEFICIARY_DISABLED,
            self::EVENT_TYPE_EDITED,
            self::EVENT_TYPE_REJECTED_APPROVAL,
            self::EVENT_TYPE_TRUSTED_AUTHORISE,
            self::EVENT_TYPE_SIGNED,
            self::EVENT_TYPE_BENEFICIARY_ENABLED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupplierAllowableValues()
    {
        return [
            self::SUPPLIER_NONE,
            self::SUPPLIER_CYBER_SOURCE,
            self::SUPPLIER_CHECKOUT,
            self::SUPPLIER_STRIPE,
            self::SUPPLIER_MODULR,
            self::SUPPLIER_PLAID,
            self::SUPPLIER_YAPILY,
            self::SUPPLIER_NOFRIXION,
            self::SUPPLIER_BITCOIN,
            self::SUPPLIER_BITCOIN_TESTNET,
            self::SUPPLIER_BANKING_CIRCLE,
            self::SUPPLIER_BANKING_CIRCLE_AGENCY,
            self::SUPPLIER_SIMULATOR,
            self::SUPPLIER_LIGHTNING,
            self::SUPPLIER_LIGHTNING_TESTNET,
            self::SUPPLIER_BANKING_CIRCLE_DIRECT_DEBIT,
            self::SUPPLIER_TRIBE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('payout_id', $data ?? [], null);
        $this->setIfExists('event_status', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('event_type', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('raw_response', $data ?? [], null);
        $this->setIfExists('raw_response_hash', $data ?? [], null);
        $this->setIfExists('error_reason', $data ?? [], null);
        $this->setIfExists('error_message', $data ?? [], null);
        $this->setIfExists('supplier_payment_id', $data ?? [], null);
        $this->setIfExists('supplier', $data ?? [], null);
        $this->setIfExists('invoice_id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('authoriser_hash', $data ?? [], null);
        $this->setIfExists('rule_name', $data ?? [], null);
        $this->setIfExists('signature', $data ?? [], null);
        $this->setIfExists('payout', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventTypeAllowableValues();
        if (!is_null($this->container['event_type']) && !in_array($this->container['event_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_type', must be one of '%s'",
                $this->container['event_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSupplierAllowableValues();
        if (!is_null($this->container['supplier']) && !in_array($this->container['supplier'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'supplier', must be one of '%s'",
                $this->container['supplier'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets payout_id
     *
     * @return string|null
     */
    public function getPayoutId()
    {
        return $this->container['payout_id'];
    }

    /**
     * Sets payout_id
     *
     * @param string|null $payout_id payout_id
     *
     * @return self
     */
    public function setPayoutId($payout_id)
    {
        if (is_null($payout_id)) {
            throw new \InvalidArgumentException('non-nullable payout_id cannot be null');
        }
        $this->container['payout_id'] = $payout_id;

        return $this;
    }

    /**
     * Gets event_status
     *
     * @return string|null
     */
    public function getEventStatus()
    {
        return $this->container['event_status'];
    }

    /**
     * Sets event_status
     *
     * @param string|null $event_status event_status
     *
     * @return self
     */
    public function setEventStatus($event_status)
    {
        if (is_null($event_status)) {
            array_push($this->openAPINullablesSetToNull, 'event_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('event_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['event_status'] = $event_status;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets event_type
     *
     * @return string|null
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     *
     * @param string|null $event_type event_type
     *
     * @return self
     */
    public function setEventType($event_type)
    {
        if (is_null($event_type)) {
            throw new \InvalidArgumentException('non-nullable event_type cannot be null');
        }
        $allowedValues = $this->getEventTypeAllowableValues();
        if (!in_array($event_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_type', must be one of '%s'",
                    $event_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted inserted
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets raw_response
     *
     * @return string|null
     */
    public function getRawResponse()
    {
        return $this->container['raw_response'];
    }

    /**
     * Sets raw_response
     *
     * @param string|null $raw_response raw_response
     *
     * @return self
     */
    public function setRawResponse($raw_response)
    {
        if (is_null($raw_response)) {
            array_push($this->openAPINullablesSetToNull, 'raw_response');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('raw_response', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['raw_response'] = $raw_response;

        return $this;
    }

    /**
     * Gets raw_response_hash
     *
     * @return string|null
     */
    public function getRawResponseHash()
    {
        return $this->container['raw_response_hash'];
    }

    /**
     * Sets raw_response_hash
     *
     * @param string|null $raw_response_hash raw_response_hash
     *
     * @return self
     */
    public function setRawResponseHash($raw_response_hash)
    {
        if (is_null($raw_response_hash)) {
            array_push($this->openAPINullablesSetToNull, 'raw_response_hash');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('raw_response_hash', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['raw_response_hash'] = $raw_response_hash;

        return $this;
    }

    /**
     * Gets error_reason
     *
     * @return string|null
     */
    public function getErrorReason()
    {
        return $this->container['error_reason'];
    }

    /**
     * Sets error_reason
     *
     * @param string|null $error_reason error_reason
     *
     * @return self
     */
    public function setErrorReason($error_reason)
    {
        if (is_null($error_reason)) {
            array_push($this->openAPINullablesSetToNull, 'error_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error_reason'] = $error_reason;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string|null
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string|null $error_message error_message
     *
     * @return self
     */
    public function setErrorMessage($error_message)
    {
        if (is_null($error_message)) {
            array_push($this->openAPINullablesSetToNull, 'error_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets supplier_payment_id
     *
     * @return string|null
     */
    public function getSupplierPaymentId()
    {
        return $this->container['supplier_payment_id'];
    }

    /**
     * Sets supplier_payment_id
     *
     * @param string|null $supplier_payment_id supplier_payment_id
     *
     * @return self
     */
    public function setSupplierPaymentId($supplier_payment_id)
    {
        if (is_null($supplier_payment_id)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_payment_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_payment_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplier_payment_id'] = $supplier_payment_id;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return string|null
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param string|null $supplier Lists the supported card and PIS processors.
     *
     * @return self
     */
    public function setSupplier($supplier)
    {
        if (is_null($supplier)) {
            throw new \InvalidArgumentException('non-nullable supplier cannot be null');
        }
        $allowedValues = $this->getSupplierAllowableValues();
        if (!in_array($supplier, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'supplier', must be one of '%s'",
                    $supplier,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets invoice_id
     *
     * @return string|null
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param string|null $invoice_id invoice_id
     *
     * @return self
     */
    public function setInvoiceId($invoice_id)
    {
        if (is_null($invoice_id)) {
            array_push($this->openAPINullablesSetToNull, 'invoice_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoice_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets authoriser_hash
     *
     * @return string|null
     */
    public function getAuthoriserHash()
    {
        return $this->container['authoriser_hash'];
    }

    /**
     * Sets authoriser_hash
     *
     * @param string|null $authoriser_hash authoriser_hash
     *
     * @return self
     */
    public function setAuthoriserHash($authoriser_hash)
    {
        if (is_null($authoriser_hash)) {
            array_push($this->openAPINullablesSetToNull, 'authoriser_hash');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authoriser_hash', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authoriser_hash'] = $authoriser_hash;

        return $this;
    }

    /**
     * Gets rule_name
     *
     * @return string|null
     */
    public function getRuleName()
    {
        return $this->container['rule_name'];
    }

    /**
     * Sets rule_name
     *
     * @param string|null $rule_name rule_name
     *
     * @return self
     */
    public function setRuleName($rule_name)
    {
        if (is_null($rule_name)) {
            array_push($this->openAPINullablesSetToNull, 'rule_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rule_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rule_name'] = $rule_name;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string|null
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string|null $signature signature
     *
     * @return self
     */
    public function setSignature($signature)
    {
        if (is_null($signature)) {
            array_push($this->openAPINullablesSetToNull, 'signature');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signature', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets payout
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity|null
     */
    public function getPayout()
    {
        return $this->container['payout'];
    }

    /**
     * Sets payout
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity|null $payout payout
     *
     * @return self
     */
    public function setPayout($payout)
    {
        if (is_null($payout)) {
            throw new \InvalidArgumentException('non-nullable payout cannot be null');
        }
        $this->container['payout'] = $payout;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsUserEntity|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsUserEntity|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


