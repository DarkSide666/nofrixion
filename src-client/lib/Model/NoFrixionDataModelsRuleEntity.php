<?php
/**
 * NoFrixionDataModelsRuleEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionDataModelsRuleEntity Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionDataModelsRuleEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.DataModels.RuleEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'account_id' => 'string',
        'user_id' => 'string',
        'approver_id' => 'string',
        'is_disabled' => 'bool',
        'name' => 'string',
        'description' => 'string',
        'status' => 'string',
        'trigger_on_pay_in' => 'bool',
        'trigger_cron_expression' => 'string',
        'time_zone_id' => 'string',
        'start_at' => '\DateTime',
        'end_at' => '\DateTime',
        'on_approved_web_hook_url' => 'string',
        'on_execution_error_web_hook_url' => 'string',
        'on_execution_success_web_hook_url' => 'string',
        'inserted' => '\DateTime',
        'last_updated' => '\DateTime',
        'last_run_at_transaction_date' => '\DateTime',
        'last_executed_at' => '\DateTime',
        'web_hook_secret' => 'string',
        'amount_to_leave' => 'float',
        'minimum_amount_to_run_at' => 'float',
        'payout_your_reference' => 'string',
        'payout_their_reference' => 'string',
        'payout_description' => 'string',
        'is_archived' => 'bool',
        'is_system' => 'bool',
        'user' => '\Nofrixion\Client\Model\NoFrixionDataModelsUserEntity',
        'approver' => '\Nofrixion\Client\Model\NoFrixionDataModelsUserEntity',
        'account' => '\Nofrixion\Client\Model\NoFrixionDataModelsAccountEntity',
        'rule_destinations' => '\Nofrixion\Client\Model\NoFrixionDataModelsRuleDestinationEntity[]',
        'rule_events' => '\Nofrixion\Client\Model\NoFrixionDataModelsRuleEventEntity[]',
        'payouts' => '\Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'account_id' => 'uuid',
        'user_id' => 'uuid',
        'approver_id' => 'uuid',
        'is_disabled' => null,
        'name' => null,
        'description' => null,
        'status' => null,
        'trigger_on_pay_in' => null,
        'trigger_cron_expression' => null,
        'time_zone_id' => null,
        'start_at' => 'date-time',
        'end_at' => 'date-time',
        'on_approved_web_hook_url' => null,
        'on_execution_error_web_hook_url' => null,
        'on_execution_success_web_hook_url' => null,
        'inserted' => 'date-time',
        'last_updated' => 'date-time',
        'last_run_at_transaction_date' => 'date-time',
        'last_executed_at' => 'date-time',
        'web_hook_secret' => null,
        'amount_to_leave' => 'double',
        'minimum_amount_to_run_at' => 'double',
        'payout_your_reference' => null,
        'payout_their_reference' => null,
        'payout_description' => null,
        'is_archived' => null,
        'is_system' => null,
        'user' => null,
        'approver' => null,
        'account' => null,
        'rule_destinations' => null,
        'rule_events' => null,
        'payouts' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'account_id' => false,
        'user_id' => true,
        'approver_id' => true,
        'is_disabled' => false,
        'name' => true,
        'description' => true,
        'status' => false,
        'trigger_on_pay_in' => false,
        'trigger_cron_expression' => true,
        'time_zone_id' => true,
        'start_at' => true,
        'end_at' => true,
        'on_approved_web_hook_url' => true,
        'on_execution_error_web_hook_url' => true,
        'on_execution_success_web_hook_url' => true,
        'inserted' => false,
        'last_updated' => false,
        'last_run_at_transaction_date' => false,
        'last_executed_at' => true,
        'web_hook_secret' => true,
        'amount_to_leave' => false,
        'minimum_amount_to_run_at' => false,
        'payout_your_reference' => true,
        'payout_their_reference' => true,
        'payout_description' => true,
        'is_archived' => false,
        'is_system' => false,
        'user' => false,
        'approver' => false,
        'account' => false,
        'rule_destinations' => true,
        'rule_events' => true,
        'payouts' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'account_id' => 'accountID',
        'user_id' => 'userID',
        'approver_id' => 'approverID',
        'is_disabled' => 'isDisabled',
        'name' => 'name',
        'description' => 'description',
        'status' => 'status',
        'trigger_on_pay_in' => 'triggerOnPayIn',
        'trigger_cron_expression' => 'triggerCronExpression',
        'time_zone_id' => 'timeZoneId',
        'start_at' => 'startAt',
        'end_at' => 'endAt',
        'on_approved_web_hook_url' => 'onApprovedWebHookUrl',
        'on_execution_error_web_hook_url' => 'onExecutionErrorWebHookUrl',
        'on_execution_success_web_hook_url' => 'onExecutionSuccessWebHookUrl',
        'inserted' => 'inserted',
        'last_updated' => 'lastUpdated',
        'last_run_at_transaction_date' => 'lastRunAtTransactionDate',
        'last_executed_at' => 'lastExecutedAt',
        'web_hook_secret' => 'webHookSecret',
        'amount_to_leave' => 'amountToLeave',
        'minimum_amount_to_run_at' => 'minimumAmountToRunAt',
        'payout_your_reference' => 'payoutYourReference',
        'payout_their_reference' => 'payoutTheirReference',
        'payout_description' => 'payoutDescription',
        'is_archived' => 'isArchived',
        'is_system' => 'isSystem',
        'user' => 'user',
        'approver' => 'approver',
        'account' => 'account',
        'rule_destinations' => 'ruleDestinations',
        'rule_events' => 'ruleEvents',
        'payouts' => 'payouts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'account_id' => 'setAccountId',
        'user_id' => 'setUserId',
        'approver_id' => 'setApproverId',
        'is_disabled' => 'setIsDisabled',
        'name' => 'setName',
        'description' => 'setDescription',
        'status' => 'setStatus',
        'trigger_on_pay_in' => 'setTriggerOnPayIn',
        'trigger_cron_expression' => 'setTriggerCronExpression',
        'time_zone_id' => 'setTimeZoneId',
        'start_at' => 'setStartAt',
        'end_at' => 'setEndAt',
        'on_approved_web_hook_url' => 'setOnApprovedWebHookUrl',
        'on_execution_error_web_hook_url' => 'setOnExecutionErrorWebHookUrl',
        'on_execution_success_web_hook_url' => 'setOnExecutionSuccessWebHookUrl',
        'inserted' => 'setInserted',
        'last_updated' => 'setLastUpdated',
        'last_run_at_transaction_date' => 'setLastRunAtTransactionDate',
        'last_executed_at' => 'setLastExecutedAt',
        'web_hook_secret' => 'setWebHookSecret',
        'amount_to_leave' => 'setAmountToLeave',
        'minimum_amount_to_run_at' => 'setMinimumAmountToRunAt',
        'payout_your_reference' => 'setPayoutYourReference',
        'payout_their_reference' => 'setPayoutTheirReference',
        'payout_description' => 'setPayoutDescription',
        'is_archived' => 'setIsArchived',
        'is_system' => 'setIsSystem',
        'user' => 'setUser',
        'approver' => 'setApprover',
        'account' => 'setAccount',
        'rule_destinations' => 'setRuleDestinations',
        'rule_events' => 'setRuleEvents',
        'payouts' => 'setPayouts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'account_id' => 'getAccountId',
        'user_id' => 'getUserId',
        'approver_id' => 'getApproverId',
        'is_disabled' => 'getIsDisabled',
        'name' => 'getName',
        'description' => 'getDescription',
        'status' => 'getStatus',
        'trigger_on_pay_in' => 'getTriggerOnPayIn',
        'trigger_cron_expression' => 'getTriggerCronExpression',
        'time_zone_id' => 'getTimeZoneId',
        'start_at' => 'getStartAt',
        'end_at' => 'getEndAt',
        'on_approved_web_hook_url' => 'getOnApprovedWebHookUrl',
        'on_execution_error_web_hook_url' => 'getOnExecutionErrorWebHookUrl',
        'on_execution_success_web_hook_url' => 'getOnExecutionSuccessWebHookUrl',
        'inserted' => 'getInserted',
        'last_updated' => 'getLastUpdated',
        'last_run_at_transaction_date' => 'getLastRunAtTransactionDate',
        'last_executed_at' => 'getLastExecutedAt',
        'web_hook_secret' => 'getWebHookSecret',
        'amount_to_leave' => 'getAmountToLeave',
        'minimum_amount_to_run_at' => 'getMinimumAmountToRunAt',
        'payout_your_reference' => 'getPayoutYourReference',
        'payout_their_reference' => 'getPayoutTheirReference',
        'payout_description' => 'getPayoutDescription',
        'is_archived' => 'getIsArchived',
        'is_system' => 'getIsSystem',
        'user' => 'getUser',
        'approver' => 'getApprover',
        'account' => 'getAccount',
        'rule_destinations' => 'getRuleDestinations',
        'rule_events' => 'getRuleEvents',
        'payouts' => 'getPayouts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_PENDING_APPROVAL = 'PendingApproval';
    public const STATUS_ACTIVE = 'Active';
    public const STATUS_DISABLED = 'Disabled';
    public const STATUS_FAILED = 'Failed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING_APPROVAL,
            self::STATUS_ACTIVE,
            self::STATUS_DISABLED,
            self::STATUS_FAILED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('approver_id', $data ?? [], null);
        $this->setIfExists('is_disabled', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('trigger_on_pay_in', $data ?? [], null);
        $this->setIfExists('trigger_cron_expression', $data ?? [], null);
        $this->setIfExists('time_zone_id', $data ?? [], null);
        $this->setIfExists('start_at', $data ?? [], null);
        $this->setIfExists('end_at', $data ?? [], null);
        $this->setIfExists('on_approved_web_hook_url', $data ?? [], null);
        $this->setIfExists('on_execution_error_web_hook_url', $data ?? [], null);
        $this->setIfExists('on_execution_success_web_hook_url', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('last_run_at_transaction_date', $data ?? [], null);
        $this->setIfExists('last_executed_at', $data ?? [], null);
        $this->setIfExists('web_hook_secret', $data ?? [], null);
        $this->setIfExists('amount_to_leave', $data ?? [], null);
        $this->setIfExists('minimum_amount_to_run_at', $data ?? [], null);
        $this->setIfExists('payout_your_reference', $data ?? [], null);
        $this->setIfExists('payout_their_reference', $data ?? [], null);
        $this->setIfExists('payout_description', $data ?? [], null);
        $this->setIfExists('is_archived', $data ?? [], null);
        $this->setIfExists('is_system', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('approver', $data ?? [], null);
        $this->setIfExists('account', $data ?? [], null);
        $this->setIfExists('rule_destinations', $data ?? [], null);
        $this->setIfExists('rule_events', $data ?? [], null);
        $this->setIfExists('payouts', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets approver_id
     *
     * @return string|null
     */
    public function getApproverId()
    {
        return $this->container['approver_id'];
    }

    /**
     * Sets approver_id
     *
     * @param string|null $approver_id approver_id
     *
     * @return self
     */
    public function setApproverId($approver_id)
    {
        if (is_null($approver_id)) {
            array_push($this->openAPINullablesSetToNull, 'approver_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approver_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['approver_id'] = $approver_id;

        return $this;
    }

    /**
     * Gets is_disabled
     *
     * @return bool|null
     */
    public function getIsDisabled()
    {
        return $this->container['is_disabled'];
    }

    /**
     * Sets is_disabled
     *
     * @param bool|null $is_disabled is_disabled
     *
     * @return self
     */
    public function setIsDisabled($is_disabled)
    {
        if (is_null($is_disabled)) {
            throw new \InvalidArgumentException('non-nullable is_disabled cannot be null');
        }
        $this->container['is_disabled'] = $is_disabled;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets trigger_on_pay_in
     *
     * @return bool|null
     */
    public function getTriggerOnPayIn()
    {
        return $this->container['trigger_on_pay_in'];
    }

    /**
     * Sets trigger_on_pay_in
     *
     * @param bool|null $trigger_on_pay_in trigger_on_pay_in
     *
     * @return self
     */
    public function setTriggerOnPayIn($trigger_on_pay_in)
    {
        if (is_null($trigger_on_pay_in)) {
            throw new \InvalidArgumentException('non-nullable trigger_on_pay_in cannot be null');
        }
        $this->container['trigger_on_pay_in'] = $trigger_on_pay_in;

        return $this;
    }

    /**
     * Gets trigger_cron_expression
     *
     * @return string|null
     */
    public function getTriggerCronExpression()
    {
        return $this->container['trigger_cron_expression'];
    }

    /**
     * Sets trigger_cron_expression
     *
     * @param string|null $trigger_cron_expression trigger_cron_expression
     *
     * @return self
     */
    public function setTriggerCronExpression($trigger_cron_expression)
    {
        if (is_null($trigger_cron_expression)) {
            array_push($this->openAPINullablesSetToNull, 'trigger_cron_expression');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trigger_cron_expression', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trigger_cron_expression'] = $trigger_cron_expression;

        return $this;
    }

    /**
     * Gets time_zone_id
     *
     * @return string|null
     */
    public function getTimeZoneId()
    {
        return $this->container['time_zone_id'];
    }

    /**
     * Sets time_zone_id
     *
     * @param string|null $time_zone_id time_zone_id
     *
     * @return self
     */
    public function setTimeZoneId($time_zone_id)
    {
        if (is_null($time_zone_id)) {
            array_push($this->openAPINullablesSetToNull, 'time_zone_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_zone_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time_zone_id'] = $time_zone_id;

        return $this;
    }

    /**
     * Gets start_at
     *
     * @return \DateTime|null
     */
    public function getStartAt()
    {
        return $this->container['start_at'];
    }

    /**
     * Sets start_at
     *
     * @param \DateTime|null $start_at start_at
     *
     * @return self
     */
    public function setStartAt($start_at)
    {
        if (is_null($start_at)) {
            array_push($this->openAPINullablesSetToNull, 'start_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['start_at'] = $start_at;

        return $this;
    }

    /**
     * Gets end_at
     *
     * @return \DateTime|null
     */
    public function getEndAt()
    {
        return $this->container['end_at'];
    }

    /**
     * Sets end_at
     *
     * @param \DateTime|null $end_at end_at
     *
     * @return self
     */
    public function setEndAt($end_at)
    {
        if (is_null($end_at)) {
            array_push($this->openAPINullablesSetToNull, 'end_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_at'] = $end_at;

        return $this;
    }

    /**
     * Gets on_approved_web_hook_url
     *
     * @return string|null
     */
    public function getOnApprovedWebHookUrl()
    {
        return $this->container['on_approved_web_hook_url'];
    }

    /**
     * Sets on_approved_web_hook_url
     *
     * @param string|null $on_approved_web_hook_url on_approved_web_hook_url
     *
     * @return self
     */
    public function setOnApprovedWebHookUrl($on_approved_web_hook_url)
    {
        if (is_null($on_approved_web_hook_url)) {
            array_push($this->openAPINullablesSetToNull, 'on_approved_web_hook_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('on_approved_web_hook_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['on_approved_web_hook_url'] = $on_approved_web_hook_url;

        return $this;
    }

    /**
     * Gets on_execution_error_web_hook_url
     *
     * @return string|null
     */
    public function getOnExecutionErrorWebHookUrl()
    {
        return $this->container['on_execution_error_web_hook_url'];
    }

    /**
     * Sets on_execution_error_web_hook_url
     *
     * @param string|null $on_execution_error_web_hook_url on_execution_error_web_hook_url
     *
     * @return self
     */
    public function setOnExecutionErrorWebHookUrl($on_execution_error_web_hook_url)
    {
        if (is_null($on_execution_error_web_hook_url)) {
            array_push($this->openAPINullablesSetToNull, 'on_execution_error_web_hook_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('on_execution_error_web_hook_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['on_execution_error_web_hook_url'] = $on_execution_error_web_hook_url;

        return $this;
    }

    /**
     * Gets on_execution_success_web_hook_url
     *
     * @return string|null
     */
    public function getOnExecutionSuccessWebHookUrl()
    {
        return $this->container['on_execution_success_web_hook_url'];
    }

    /**
     * Sets on_execution_success_web_hook_url
     *
     * @param string|null $on_execution_success_web_hook_url on_execution_success_web_hook_url
     *
     * @return self
     */
    public function setOnExecutionSuccessWebHookUrl($on_execution_success_web_hook_url)
    {
        if (is_null($on_execution_success_web_hook_url)) {
            array_push($this->openAPINullablesSetToNull, 'on_execution_success_web_hook_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('on_execution_success_web_hook_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['on_execution_success_web_hook_url'] = $on_execution_success_web_hook_url;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted inserted
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_run_at_transaction_date
     *
     * @return \DateTime|null
     */
    public function getLastRunAtTransactionDate()
    {
        return $this->container['last_run_at_transaction_date'];
    }

    /**
     * Sets last_run_at_transaction_date
     *
     * @param \DateTime|null $last_run_at_transaction_date last_run_at_transaction_date
     *
     * @return self
     */
    public function setLastRunAtTransactionDate($last_run_at_transaction_date)
    {
        if (is_null($last_run_at_transaction_date)) {
            throw new \InvalidArgumentException('non-nullable last_run_at_transaction_date cannot be null');
        }
        $this->container['last_run_at_transaction_date'] = $last_run_at_transaction_date;

        return $this;
    }

    /**
     * Gets last_executed_at
     *
     * @return \DateTime|null
     */
    public function getLastExecutedAt()
    {
        return $this->container['last_executed_at'];
    }

    /**
     * Sets last_executed_at
     *
     * @param \DateTime|null $last_executed_at last_executed_at
     *
     * @return self
     */
    public function setLastExecutedAt($last_executed_at)
    {
        if (is_null($last_executed_at)) {
            array_push($this->openAPINullablesSetToNull, 'last_executed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_executed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_executed_at'] = $last_executed_at;

        return $this;
    }

    /**
     * Gets web_hook_secret
     *
     * @return string|null
     */
    public function getWebHookSecret()
    {
        return $this->container['web_hook_secret'];
    }

    /**
     * Sets web_hook_secret
     *
     * @param string|null $web_hook_secret web_hook_secret
     *
     * @return self
     */
    public function setWebHookSecret($web_hook_secret)
    {
        if (is_null($web_hook_secret)) {
            array_push($this->openAPINullablesSetToNull, 'web_hook_secret');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('web_hook_secret', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['web_hook_secret'] = $web_hook_secret;

        return $this;
    }

    /**
     * Gets amount_to_leave
     *
     * @return float|null
     */
    public function getAmountToLeave()
    {
        return $this->container['amount_to_leave'];
    }

    /**
     * Sets amount_to_leave
     *
     * @param float|null $amount_to_leave amount_to_leave
     *
     * @return self
     */
    public function setAmountToLeave($amount_to_leave)
    {
        if (is_null($amount_to_leave)) {
            throw new \InvalidArgumentException('non-nullable amount_to_leave cannot be null');
        }
        $this->container['amount_to_leave'] = $amount_to_leave;

        return $this;
    }

    /**
     * Gets minimum_amount_to_run_at
     *
     * @return float|null
     */
    public function getMinimumAmountToRunAt()
    {
        return $this->container['minimum_amount_to_run_at'];
    }

    /**
     * Sets minimum_amount_to_run_at
     *
     * @param float|null $minimum_amount_to_run_at minimum_amount_to_run_at
     *
     * @return self
     */
    public function setMinimumAmountToRunAt($minimum_amount_to_run_at)
    {
        if (is_null($minimum_amount_to_run_at)) {
            throw new \InvalidArgumentException('non-nullable minimum_amount_to_run_at cannot be null');
        }
        $this->container['minimum_amount_to_run_at'] = $minimum_amount_to_run_at;

        return $this;
    }

    /**
     * Gets payout_your_reference
     *
     * @return string|null
     */
    public function getPayoutYourReference()
    {
        return $this->container['payout_your_reference'];
    }

    /**
     * Sets payout_your_reference
     *
     * @param string|null $payout_your_reference payout_your_reference
     *
     * @return self
     */
    public function setPayoutYourReference($payout_your_reference)
    {
        if (is_null($payout_your_reference)) {
            array_push($this->openAPINullablesSetToNull, 'payout_your_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payout_your_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payout_your_reference'] = $payout_your_reference;

        return $this;
    }

    /**
     * Gets payout_their_reference
     *
     * @return string|null
     */
    public function getPayoutTheirReference()
    {
        return $this->container['payout_their_reference'];
    }

    /**
     * Sets payout_their_reference
     *
     * @param string|null $payout_their_reference payout_their_reference
     *
     * @return self
     */
    public function setPayoutTheirReference($payout_their_reference)
    {
        if (is_null($payout_their_reference)) {
            array_push($this->openAPINullablesSetToNull, 'payout_their_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payout_their_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payout_their_reference'] = $payout_their_reference;

        return $this;
    }

    /**
     * Gets payout_description
     *
     * @return string|null
     */
    public function getPayoutDescription()
    {
        return $this->container['payout_description'];
    }

    /**
     * Sets payout_description
     *
     * @param string|null $payout_description payout_description
     *
     * @return self
     */
    public function setPayoutDescription($payout_description)
    {
        if (is_null($payout_description)) {
            array_push($this->openAPINullablesSetToNull, 'payout_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payout_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payout_description'] = $payout_description;

        return $this;
    }

    /**
     * Gets is_archived
     *
     * @return bool|null
     */
    public function getIsArchived()
    {
        return $this->container['is_archived'];
    }

    /**
     * Sets is_archived
     *
     * @param bool|null $is_archived is_archived
     *
     * @return self
     */
    public function setIsArchived($is_archived)
    {
        if (is_null($is_archived)) {
            throw new \InvalidArgumentException('non-nullable is_archived cannot be null');
        }
        $this->container['is_archived'] = $is_archived;

        return $this;
    }

    /**
     * Gets is_system
     *
     * @return bool|null
     */
    public function getIsSystem()
    {
        return $this->container['is_system'];
    }

    /**
     * Sets is_system
     *
     * @param bool|null $is_system is_system
     *
     * @return self
     */
    public function setIsSystem($is_system)
    {
        if (is_null($is_system)) {
            throw new \InvalidArgumentException('non-nullable is_system cannot be null');
        }
        $this->container['is_system'] = $is_system;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsUserEntity|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsUserEntity|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets approver
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsUserEntity|null
     */
    public function getApprover()
    {
        return $this->container['approver'];
    }

    /**
     * Sets approver
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsUserEntity|null $approver approver
     *
     * @return self
     */
    public function setApprover($approver)
    {
        if (is_null($approver)) {
            throw new \InvalidArgumentException('non-nullable approver cannot be null');
        }
        $this->container['approver'] = $approver;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsAccountEntity|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsAccountEntity|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        if (is_null($account)) {
            throw new \InvalidArgumentException('non-nullable account cannot be null');
        }
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets rule_destinations
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsRuleDestinationEntity[]|null
     */
    public function getRuleDestinations()
    {
        return $this->container['rule_destinations'];
    }

    /**
     * Sets rule_destinations
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsRuleDestinationEntity[]|null $rule_destinations rule_destinations
     *
     * @return self
     */
    public function setRuleDestinations($rule_destinations)
    {
        if (is_null($rule_destinations)) {
            array_push($this->openAPINullablesSetToNull, 'rule_destinations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rule_destinations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rule_destinations'] = $rule_destinations;

        return $this;
    }

    /**
     * Gets rule_events
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsRuleEventEntity[]|null
     */
    public function getRuleEvents()
    {
        return $this->container['rule_events'];
    }

    /**
     * Sets rule_events
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsRuleEventEntity[]|null $rule_events rule_events
     *
     * @return self
     */
    public function setRuleEvents($rule_events)
    {
        if (is_null($rule_events)) {
            array_push($this->openAPINullablesSetToNull, 'rule_events');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rule_events', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rule_events'] = $rule_events;

        return $this;
    }

    /**
     * Gets payouts
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity[]|null
     */
    public function getPayouts()
    {
        return $this->container['payouts'];
    }

    /**
     * Sets payouts
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity[]|null $payouts payouts
     *
     * @return self
     */
    public function setPayouts($payouts)
    {
        if (is_null($payouts)) {
            array_push($this->openAPINullablesSetToNull, 'payouts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payouts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payouts'] = $payouts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


