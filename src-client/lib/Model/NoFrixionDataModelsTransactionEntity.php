<?php
/**
 * NoFrixionDataModelsTransactionEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionDataModelsTransactionEntity Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionDataModelsTransactionEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.DataModels.TransactionEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'account_id' => 'string',
        'amount' => 'float',
        'currency' => 'string',
        'balance' => 'float',
        'inserted' => '\DateTime',
        'type' => 'string',
        'your_reference' => 'string',
        'their_reference' => 'string',
        'description' => 'string',
        'supplier_name' => 'string',
        'supplier_transaction_id' => 'string',
        'supplier_payment_id' => 'string',
        'supplier_raw' => 'string',
        'supplier_inserted_date' => '\DateTime',
        'supplier_transaction_date' => '\DateTime',
        'counter_party_name' => 'string',
        'counter_party_identifier_type' => 'string',
        'counter_party_identifier_iban' => 'string',
        'counter_party_identifier_bic' => 'string',
        'counter_party_identifier_account_number' => 'string',
        'counter_party_identifier_sort_code' => 'string',
        'counter_party_address_line1' => 'string',
        'counter_party_address_line2' => 'string',
        'counter_party_address_post_town' => 'string',
        'counter_party_address_post_code' => 'string',
        'counter_party_address_country' => 'string',
        'counter_party_phone_number' => 'string',
        'counter_party_email_address' => 'string',
        'counter_party_date_of_birth' => 'string',
        'previous_transaction_hash' => 'string',
        'transaction_hash' => 'string',
        'signature_key_id' => 'string',
        'signature' => 'string',
        'payout_id' => 'string',
        'payment_request_id' => 'string',
        'counter_party_identifier_bitcoin_address' => 'string',
        'recipient_iban' => 'string',
        'recipient_bic' => 'string',
        'recipient_sort_code' => 'string',
        'recipient_account_number' => 'string',
        'recipient_bitcoin_address' => 'string',
        'bitcoin_block_height' => 'int',
        'sequence_number' => 'int',
        'account_sequence_number' => 'int',
        'rule_id' => 'string',
        'account' => '\Nofrixion\Client\Model\NoFrixionDataModelsAccountEntity',
        'payment_request' => '\Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestEntity',
        'payout' => '\Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity',
        'payin' => '\Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayin'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'account_id' => 'uuid',
        'amount' => 'double',
        'currency' => null,
        'balance' => 'double',
        'inserted' => 'date-time',
        'type' => null,
        'your_reference' => null,
        'their_reference' => null,
        'description' => null,
        'supplier_name' => null,
        'supplier_transaction_id' => null,
        'supplier_payment_id' => null,
        'supplier_raw' => null,
        'supplier_inserted_date' => 'date-time',
        'supplier_transaction_date' => 'date-time',
        'counter_party_name' => null,
        'counter_party_identifier_type' => null,
        'counter_party_identifier_iban' => null,
        'counter_party_identifier_bic' => null,
        'counter_party_identifier_account_number' => null,
        'counter_party_identifier_sort_code' => null,
        'counter_party_address_line1' => null,
        'counter_party_address_line2' => null,
        'counter_party_address_post_town' => null,
        'counter_party_address_post_code' => null,
        'counter_party_address_country' => null,
        'counter_party_phone_number' => null,
        'counter_party_email_address' => null,
        'counter_party_date_of_birth' => null,
        'previous_transaction_hash' => null,
        'transaction_hash' => null,
        'signature_key_id' => null,
        'signature' => null,
        'payout_id' => 'uuid',
        'payment_request_id' => 'uuid',
        'counter_party_identifier_bitcoin_address' => null,
        'recipient_iban' => null,
        'recipient_bic' => null,
        'recipient_sort_code' => null,
        'recipient_account_number' => null,
        'recipient_bitcoin_address' => null,
        'bitcoin_block_height' => 'int64',
        'sequence_number' => 'int32',
        'account_sequence_number' => 'int32',
        'rule_id' => 'uuid',
        'account' => null,
        'payment_request' => null,
        'payout' => null,
        'payin' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'account_id' => false,
        'amount' => false,
        'currency' => false,
        'balance' => false,
        'inserted' => false,
        'type' => false,
        'your_reference' => true,
        'their_reference' => true,
        'description' => true,
        'supplier_name' => false,
        'supplier_transaction_id' => true,
        'supplier_payment_id' => true,
        'supplier_raw' => true,
        'supplier_inserted_date' => false,
        'supplier_transaction_date' => false,
        'counter_party_name' => true,
        'counter_party_identifier_type' => true,
        'counter_party_identifier_iban' => true,
        'counter_party_identifier_bic' => true,
        'counter_party_identifier_account_number' => true,
        'counter_party_identifier_sort_code' => true,
        'counter_party_address_line1' => true,
        'counter_party_address_line2' => true,
        'counter_party_address_post_town' => true,
        'counter_party_address_post_code' => true,
        'counter_party_address_country' => true,
        'counter_party_phone_number' => true,
        'counter_party_email_address' => true,
        'counter_party_date_of_birth' => true,
        'previous_transaction_hash' => true,
        'transaction_hash' => true,
        'signature_key_id' => true,
        'signature' => true,
        'payout_id' => true,
        'payment_request_id' => true,
        'counter_party_identifier_bitcoin_address' => true,
        'recipient_iban' => true,
        'recipient_bic' => true,
        'recipient_sort_code' => true,
        'recipient_account_number' => true,
        'recipient_bitcoin_address' => true,
        'bitcoin_block_height' => false,
        'sequence_number' => false,
        'account_sequence_number' => false,
        'rule_id' => true,
        'account' => false,
        'payment_request' => false,
        'payout' => false,
        'payin' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'account_id' => 'accountID',
        'amount' => 'amount',
        'currency' => 'currency',
        'balance' => 'balance',
        'inserted' => 'inserted',
        'type' => 'type',
        'your_reference' => 'yourReference',
        'their_reference' => 'theirReference',
        'description' => 'description',
        'supplier_name' => 'supplierName',
        'supplier_transaction_id' => 'supplierTransactionID',
        'supplier_payment_id' => 'supplierPaymentID',
        'supplier_raw' => 'supplierRaw',
        'supplier_inserted_date' => 'supplierInsertedDate',
        'supplier_transaction_date' => 'supplierTransactionDate',
        'counter_party_name' => 'counterPartyName',
        'counter_party_identifier_type' => 'counterPartyIdentifierType',
        'counter_party_identifier_iban' => 'counterPartyIdentifierIban',
        'counter_party_identifier_bic' => 'counterPartyIdentifierBic',
        'counter_party_identifier_account_number' => 'counterPartyIdentifierAccountNumber',
        'counter_party_identifier_sort_code' => 'counterPartyIdentifierSortCode',
        'counter_party_address_line1' => 'counterPartyAddressLine1',
        'counter_party_address_line2' => 'counterPartyAddressLine2',
        'counter_party_address_post_town' => 'counterPartyAddressPostTown',
        'counter_party_address_post_code' => 'counterPartyAddressPostCode',
        'counter_party_address_country' => 'counterPartyAddressCountry',
        'counter_party_phone_number' => 'counterPartyPhoneNumber',
        'counter_party_email_address' => 'counterPartyEmailAddress',
        'counter_party_date_of_birth' => 'counterPartyDateOfBirth',
        'previous_transaction_hash' => 'previousTransactionHash',
        'transaction_hash' => 'transactionHash',
        'signature_key_id' => 'signatureKeyID',
        'signature' => 'signature',
        'payout_id' => 'payoutID',
        'payment_request_id' => 'paymentRequestID',
        'counter_party_identifier_bitcoin_address' => 'counterPartyIdentifierBitcoinAddress',
        'recipient_iban' => 'recipientIBAN',
        'recipient_bic' => 'recipientBic',
        'recipient_sort_code' => 'recipientSortCode',
        'recipient_account_number' => 'recipientAccountNumber',
        'recipient_bitcoin_address' => 'recipientBitcoinAddress',
        'bitcoin_block_height' => 'bitcoinBlockHeight',
        'sequence_number' => 'sequenceNumber',
        'account_sequence_number' => 'accountSequenceNumber',
        'rule_id' => 'ruleID',
        'account' => 'account',
        'payment_request' => 'paymentRequest',
        'payout' => 'payout',
        'payin' => 'payin'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'account_id' => 'setAccountId',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'balance' => 'setBalance',
        'inserted' => 'setInserted',
        'type' => 'setType',
        'your_reference' => 'setYourReference',
        'their_reference' => 'setTheirReference',
        'description' => 'setDescription',
        'supplier_name' => 'setSupplierName',
        'supplier_transaction_id' => 'setSupplierTransactionId',
        'supplier_payment_id' => 'setSupplierPaymentId',
        'supplier_raw' => 'setSupplierRaw',
        'supplier_inserted_date' => 'setSupplierInsertedDate',
        'supplier_transaction_date' => 'setSupplierTransactionDate',
        'counter_party_name' => 'setCounterPartyName',
        'counter_party_identifier_type' => 'setCounterPartyIdentifierType',
        'counter_party_identifier_iban' => 'setCounterPartyIdentifierIban',
        'counter_party_identifier_bic' => 'setCounterPartyIdentifierBic',
        'counter_party_identifier_account_number' => 'setCounterPartyIdentifierAccountNumber',
        'counter_party_identifier_sort_code' => 'setCounterPartyIdentifierSortCode',
        'counter_party_address_line1' => 'setCounterPartyAddressLine1',
        'counter_party_address_line2' => 'setCounterPartyAddressLine2',
        'counter_party_address_post_town' => 'setCounterPartyAddressPostTown',
        'counter_party_address_post_code' => 'setCounterPartyAddressPostCode',
        'counter_party_address_country' => 'setCounterPartyAddressCountry',
        'counter_party_phone_number' => 'setCounterPartyPhoneNumber',
        'counter_party_email_address' => 'setCounterPartyEmailAddress',
        'counter_party_date_of_birth' => 'setCounterPartyDateOfBirth',
        'previous_transaction_hash' => 'setPreviousTransactionHash',
        'transaction_hash' => 'setTransactionHash',
        'signature_key_id' => 'setSignatureKeyId',
        'signature' => 'setSignature',
        'payout_id' => 'setPayoutId',
        'payment_request_id' => 'setPaymentRequestId',
        'counter_party_identifier_bitcoin_address' => 'setCounterPartyIdentifierBitcoinAddress',
        'recipient_iban' => 'setRecipientIban',
        'recipient_bic' => 'setRecipientBic',
        'recipient_sort_code' => 'setRecipientSortCode',
        'recipient_account_number' => 'setRecipientAccountNumber',
        'recipient_bitcoin_address' => 'setRecipientBitcoinAddress',
        'bitcoin_block_height' => 'setBitcoinBlockHeight',
        'sequence_number' => 'setSequenceNumber',
        'account_sequence_number' => 'setAccountSequenceNumber',
        'rule_id' => 'setRuleId',
        'account' => 'setAccount',
        'payment_request' => 'setPaymentRequest',
        'payout' => 'setPayout',
        'payin' => 'setPayin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'account_id' => 'getAccountId',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'balance' => 'getBalance',
        'inserted' => 'getInserted',
        'type' => 'getType',
        'your_reference' => 'getYourReference',
        'their_reference' => 'getTheirReference',
        'description' => 'getDescription',
        'supplier_name' => 'getSupplierName',
        'supplier_transaction_id' => 'getSupplierTransactionId',
        'supplier_payment_id' => 'getSupplierPaymentId',
        'supplier_raw' => 'getSupplierRaw',
        'supplier_inserted_date' => 'getSupplierInsertedDate',
        'supplier_transaction_date' => 'getSupplierTransactionDate',
        'counter_party_name' => 'getCounterPartyName',
        'counter_party_identifier_type' => 'getCounterPartyIdentifierType',
        'counter_party_identifier_iban' => 'getCounterPartyIdentifierIban',
        'counter_party_identifier_bic' => 'getCounterPartyIdentifierBic',
        'counter_party_identifier_account_number' => 'getCounterPartyIdentifierAccountNumber',
        'counter_party_identifier_sort_code' => 'getCounterPartyIdentifierSortCode',
        'counter_party_address_line1' => 'getCounterPartyAddressLine1',
        'counter_party_address_line2' => 'getCounterPartyAddressLine2',
        'counter_party_address_post_town' => 'getCounterPartyAddressPostTown',
        'counter_party_address_post_code' => 'getCounterPartyAddressPostCode',
        'counter_party_address_country' => 'getCounterPartyAddressCountry',
        'counter_party_phone_number' => 'getCounterPartyPhoneNumber',
        'counter_party_email_address' => 'getCounterPartyEmailAddress',
        'counter_party_date_of_birth' => 'getCounterPartyDateOfBirth',
        'previous_transaction_hash' => 'getPreviousTransactionHash',
        'transaction_hash' => 'getTransactionHash',
        'signature_key_id' => 'getSignatureKeyId',
        'signature' => 'getSignature',
        'payout_id' => 'getPayoutId',
        'payment_request_id' => 'getPaymentRequestId',
        'counter_party_identifier_bitcoin_address' => 'getCounterPartyIdentifierBitcoinAddress',
        'recipient_iban' => 'getRecipientIban',
        'recipient_bic' => 'getRecipientBic',
        'recipient_sort_code' => 'getRecipientSortCode',
        'recipient_account_number' => 'getRecipientAccountNumber',
        'recipient_bitcoin_address' => 'getRecipientBitcoinAddress',
        'bitcoin_block_height' => 'getBitcoinBlockHeight',
        'sequence_number' => 'getSequenceNumber',
        'account_sequence_number' => 'getAccountSequenceNumber',
        'rule_id' => 'getRuleId',
        'account' => 'getAccount',
        'payment_request' => 'getPaymentRequest',
        'payout' => 'getPayout',
        'payin' => 'getPayin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CURRENCY_NONE = 'NONE';
    public const CURRENCY_GBP = 'GBP';
    public const CURRENCY_EUR = 'EUR';
    public const CURRENCY_BTC = 'BTC';
    public const TYPE_INTERNAL = 'Internal';
    public const TYPE_SEPA_CT = 'SEPA_CT';
    public const TYPE_SEPA_INST = 'SEPA_INST';
    public const TYPE_UK_FAST = 'UK_FAST';
    public const TYPE_UK_BACS = 'UK_BACS';
    public const TYPE_REVERSAL = 'Reversal';
    public const TYPE_BTC = 'BTC';
    public const TYPE_BTC_TEST = 'BTC_TEST';
    public const TYPE_LBTC = 'LBTC';
    public const TYPE_LBTC_TEST = 'LBTC_TEST';
    public const TYPE_SEPA_DD = 'SEPA_DD';
    public const TYPE_SEPA = 'SEPA';
    public const TYPE_UNKNOWN = 'Unknown';
    public const TYPE_TARGET2 = 'TARGET2';
    public const SUPPLIER_NAME_NONE = 'None';
    public const SUPPLIER_NAME_CYBER_SOURCE = 'CyberSource';
    public const SUPPLIER_NAME_CHECKOUT = 'Checkout';
    public const SUPPLIER_NAME_STRIPE = 'Stripe';
    public const SUPPLIER_NAME_MODULR = 'Modulr';
    public const SUPPLIER_NAME_PLAID = 'Plaid';
    public const SUPPLIER_NAME_YAPILY = 'Yapily';
    public const SUPPLIER_NAME_NOFRIXION = 'Nofrixion';
    public const SUPPLIER_NAME_BITCOIN = 'Bitcoin';
    public const SUPPLIER_NAME_BITCOIN_TESTNET = 'BitcoinTestnet';
    public const SUPPLIER_NAME_BANKING_CIRCLE = 'BankingCircle';
    public const SUPPLIER_NAME_BANKING_CIRCLE_AGENCY = 'BankingCircleAgency';
    public const SUPPLIER_NAME_SIMULATOR = 'Simulator';
    public const SUPPLIER_NAME_LIGHTNING = 'Lightning';
    public const SUPPLIER_NAME_LIGHTNING_TESTNET = 'LightningTestnet';
    public const SUPPLIER_NAME_BANKING_CIRCLE_DIRECT_DEBIT = 'BankingCircleDirectDebit';
    public const SUPPLIER_NAME_TRIBE = 'Tribe';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_NONE,
            self::CURRENCY_GBP,
            self::CURRENCY_EUR,
            self::CURRENCY_BTC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_INTERNAL,
            self::TYPE_SEPA_CT,
            self::TYPE_SEPA_INST,
            self::TYPE_UK_FAST,
            self::TYPE_UK_BACS,
            self::TYPE_REVERSAL,
            self::TYPE_BTC,
            self::TYPE_BTC_TEST,
            self::TYPE_LBTC,
            self::TYPE_LBTC_TEST,
            self::TYPE_SEPA_DD,
            self::TYPE_SEPA,
            self::TYPE_UNKNOWN,
            self::TYPE_TARGET2,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupplierNameAllowableValues()
    {
        return [
            self::SUPPLIER_NAME_NONE,
            self::SUPPLIER_NAME_CYBER_SOURCE,
            self::SUPPLIER_NAME_CHECKOUT,
            self::SUPPLIER_NAME_STRIPE,
            self::SUPPLIER_NAME_MODULR,
            self::SUPPLIER_NAME_PLAID,
            self::SUPPLIER_NAME_YAPILY,
            self::SUPPLIER_NAME_NOFRIXION,
            self::SUPPLIER_NAME_BITCOIN,
            self::SUPPLIER_NAME_BITCOIN_TESTNET,
            self::SUPPLIER_NAME_BANKING_CIRCLE,
            self::SUPPLIER_NAME_BANKING_CIRCLE_AGENCY,
            self::SUPPLIER_NAME_SIMULATOR,
            self::SUPPLIER_NAME_LIGHTNING,
            self::SUPPLIER_NAME_LIGHTNING_TESTNET,
            self::SUPPLIER_NAME_BANKING_CIRCLE_DIRECT_DEBIT,
            self::SUPPLIER_NAME_TRIBE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('your_reference', $data ?? [], null);
        $this->setIfExists('their_reference', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('supplier_name', $data ?? [], null);
        $this->setIfExists('supplier_transaction_id', $data ?? [], null);
        $this->setIfExists('supplier_payment_id', $data ?? [], null);
        $this->setIfExists('supplier_raw', $data ?? [], null);
        $this->setIfExists('supplier_inserted_date', $data ?? [], null);
        $this->setIfExists('supplier_transaction_date', $data ?? [], null);
        $this->setIfExists('counter_party_name', $data ?? [], null);
        $this->setIfExists('counter_party_identifier_type', $data ?? [], null);
        $this->setIfExists('counter_party_identifier_iban', $data ?? [], null);
        $this->setIfExists('counter_party_identifier_bic', $data ?? [], null);
        $this->setIfExists('counter_party_identifier_account_number', $data ?? [], null);
        $this->setIfExists('counter_party_identifier_sort_code', $data ?? [], null);
        $this->setIfExists('counter_party_address_line1', $data ?? [], null);
        $this->setIfExists('counter_party_address_line2', $data ?? [], null);
        $this->setIfExists('counter_party_address_post_town', $data ?? [], null);
        $this->setIfExists('counter_party_address_post_code', $data ?? [], null);
        $this->setIfExists('counter_party_address_country', $data ?? [], null);
        $this->setIfExists('counter_party_phone_number', $data ?? [], null);
        $this->setIfExists('counter_party_email_address', $data ?? [], null);
        $this->setIfExists('counter_party_date_of_birth', $data ?? [], null);
        $this->setIfExists('previous_transaction_hash', $data ?? [], null);
        $this->setIfExists('transaction_hash', $data ?? [], null);
        $this->setIfExists('signature_key_id', $data ?? [], null);
        $this->setIfExists('signature', $data ?? [], null);
        $this->setIfExists('payout_id', $data ?? [], null);
        $this->setIfExists('payment_request_id', $data ?? [], null);
        $this->setIfExists('counter_party_identifier_bitcoin_address', $data ?? [], null);
        $this->setIfExists('recipient_iban', $data ?? [], null);
        $this->setIfExists('recipient_bic', $data ?? [], null);
        $this->setIfExists('recipient_sort_code', $data ?? [], null);
        $this->setIfExists('recipient_account_number', $data ?? [], null);
        $this->setIfExists('recipient_bitcoin_address', $data ?? [], null);
        $this->setIfExists('bitcoin_block_height', $data ?? [], null);
        $this->setIfExists('sequence_number', $data ?? [], null);
        $this->setIfExists('account_sequence_number', $data ?? [], null);
        $this->setIfExists('rule_id', $data ?? [], null);
        $this->setIfExists('account', $data ?? [], null);
        $this->setIfExists('payment_request', $data ?? [], null);
        $this->setIfExists('payout', $data ?? [], null);
        $this->setIfExists('payin', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSupplierNameAllowableValues();
        if (!is_null($this->container['supplier_name']) && !in_array($this->container['supplier_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'supplier_name', must be one of '%s'",
                $this->container['supplier_name'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted inserted
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets your_reference
     *
     * @return string|null
     */
    public function getYourReference()
    {
        return $this->container['your_reference'];
    }

    /**
     * Sets your_reference
     *
     * @param string|null $your_reference your_reference
     *
     * @return self
     */
    public function setYourReference($your_reference)
    {
        if (is_null($your_reference)) {
            array_push($this->openAPINullablesSetToNull, 'your_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('your_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['your_reference'] = $your_reference;

        return $this;
    }

    /**
     * Gets their_reference
     *
     * @return string|null
     */
    public function getTheirReference()
    {
        return $this->container['their_reference'];
    }

    /**
     * Sets their_reference
     *
     * @param string|null $their_reference their_reference
     *
     * @return self
     */
    public function setTheirReference($their_reference)
    {
        if (is_null($their_reference)) {
            array_push($this->openAPINullablesSetToNull, 'their_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('their_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['their_reference'] = $their_reference;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets supplier_name
     *
     * @return string|null
     */
    public function getSupplierName()
    {
        return $this->container['supplier_name'];
    }

    /**
     * Sets supplier_name
     *
     * @param string|null $supplier_name Lists the supported card and PIS processors.
     *
     * @return self
     */
    public function setSupplierName($supplier_name)
    {
        if (is_null($supplier_name)) {
            throw new \InvalidArgumentException('non-nullable supplier_name cannot be null');
        }
        $allowedValues = $this->getSupplierNameAllowableValues();
        if (!in_array($supplier_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'supplier_name', must be one of '%s'",
                    $supplier_name,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['supplier_name'] = $supplier_name;

        return $this;
    }

    /**
     * Gets supplier_transaction_id
     *
     * @return string|null
     */
    public function getSupplierTransactionId()
    {
        return $this->container['supplier_transaction_id'];
    }

    /**
     * Sets supplier_transaction_id
     *
     * @param string|null $supplier_transaction_id supplier_transaction_id
     *
     * @return self
     */
    public function setSupplierTransactionId($supplier_transaction_id)
    {
        if (is_null($supplier_transaction_id)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_transaction_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_transaction_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplier_transaction_id'] = $supplier_transaction_id;

        return $this;
    }

    /**
     * Gets supplier_payment_id
     *
     * @return string|null
     */
    public function getSupplierPaymentId()
    {
        return $this->container['supplier_payment_id'];
    }

    /**
     * Sets supplier_payment_id
     *
     * @param string|null $supplier_payment_id supplier_payment_id
     *
     * @return self
     */
    public function setSupplierPaymentId($supplier_payment_id)
    {
        if (is_null($supplier_payment_id)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_payment_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_payment_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplier_payment_id'] = $supplier_payment_id;

        return $this;
    }

    /**
     * Gets supplier_raw
     *
     * @return string|null
     */
    public function getSupplierRaw()
    {
        return $this->container['supplier_raw'];
    }

    /**
     * Sets supplier_raw
     *
     * @param string|null $supplier_raw supplier_raw
     *
     * @return self
     */
    public function setSupplierRaw($supplier_raw)
    {
        if (is_null($supplier_raw)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_raw');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_raw', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplier_raw'] = $supplier_raw;

        return $this;
    }

    /**
     * Gets supplier_inserted_date
     *
     * @return \DateTime|null
     */
    public function getSupplierInsertedDate()
    {
        return $this->container['supplier_inserted_date'];
    }

    /**
     * Sets supplier_inserted_date
     *
     * @param \DateTime|null $supplier_inserted_date supplier_inserted_date
     *
     * @return self
     */
    public function setSupplierInsertedDate($supplier_inserted_date)
    {
        if (is_null($supplier_inserted_date)) {
            throw new \InvalidArgumentException('non-nullable supplier_inserted_date cannot be null');
        }
        $this->container['supplier_inserted_date'] = $supplier_inserted_date;

        return $this;
    }

    /**
     * Gets supplier_transaction_date
     *
     * @return \DateTime|null
     */
    public function getSupplierTransactionDate()
    {
        return $this->container['supplier_transaction_date'];
    }

    /**
     * Sets supplier_transaction_date
     *
     * @param \DateTime|null $supplier_transaction_date supplier_transaction_date
     *
     * @return self
     */
    public function setSupplierTransactionDate($supplier_transaction_date)
    {
        if (is_null($supplier_transaction_date)) {
            throw new \InvalidArgumentException('non-nullable supplier_transaction_date cannot be null');
        }
        $this->container['supplier_transaction_date'] = $supplier_transaction_date;

        return $this;
    }

    /**
     * Gets counter_party_name
     *
     * @return string|null
     */
    public function getCounterPartyName()
    {
        return $this->container['counter_party_name'];
    }

    /**
     * Sets counter_party_name
     *
     * @param string|null $counter_party_name counter_party_name
     *
     * @return self
     */
    public function setCounterPartyName($counter_party_name)
    {
        if (is_null($counter_party_name)) {
            array_push($this->openAPINullablesSetToNull, 'counter_party_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('counter_party_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['counter_party_name'] = $counter_party_name;

        return $this;
    }

    /**
     * Gets counter_party_identifier_type
     *
     * @return string|null
     */
    public function getCounterPartyIdentifierType()
    {
        return $this->container['counter_party_identifier_type'];
    }

    /**
     * Sets counter_party_identifier_type
     *
     * @param string|null $counter_party_identifier_type counter_party_identifier_type
     *
     * @return self
     */
    public function setCounterPartyIdentifierType($counter_party_identifier_type)
    {
        if (is_null($counter_party_identifier_type)) {
            array_push($this->openAPINullablesSetToNull, 'counter_party_identifier_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('counter_party_identifier_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['counter_party_identifier_type'] = $counter_party_identifier_type;

        return $this;
    }

    /**
     * Gets counter_party_identifier_iban
     *
     * @return string|null
     */
    public function getCounterPartyIdentifierIban()
    {
        return $this->container['counter_party_identifier_iban'];
    }

    /**
     * Sets counter_party_identifier_iban
     *
     * @param string|null $counter_party_identifier_iban counter_party_identifier_iban
     *
     * @return self
     */
    public function setCounterPartyIdentifierIban($counter_party_identifier_iban)
    {
        if (is_null($counter_party_identifier_iban)) {
            array_push($this->openAPINullablesSetToNull, 'counter_party_identifier_iban');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('counter_party_identifier_iban', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['counter_party_identifier_iban'] = $counter_party_identifier_iban;

        return $this;
    }

    /**
     * Gets counter_party_identifier_bic
     *
     * @return string|null
     */
    public function getCounterPartyIdentifierBic()
    {
        return $this->container['counter_party_identifier_bic'];
    }

    /**
     * Sets counter_party_identifier_bic
     *
     * @param string|null $counter_party_identifier_bic counter_party_identifier_bic
     *
     * @return self
     */
    public function setCounterPartyIdentifierBic($counter_party_identifier_bic)
    {
        if (is_null($counter_party_identifier_bic)) {
            array_push($this->openAPINullablesSetToNull, 'counter_party_identifier_bic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('counter_party_identifier_bic', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['counter_party_identifier_bic'] = $counter_party_identifier_bic;

        return $this;
    }

    /**
     * Gets counter_party_identifier_account_number
     *
     * @return string|null
     */
    public function getCounterPartyIdentifierAccountNumber()
    {
        return $this->container['counter_party_identifier_account_number'];
    }

    /**
     * Sets counter_party_identifier_account_number
     *
     * @param string|null $counter_party_identifier_account_number counter_party_identifier_account_number
     *
     * @return self
     */
    public function setCounterPartyIdentifierAccountNumber($counter_party_identifier_account_number)
    {
        if (is_null($counter_party_identifier_account_number)) {
            array_push($this->openAPINullablesSetToNull, 'counter_party_identifier_account_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('counter_party_identifier_account_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['counter_party_identifier_account_number'] = $counter_party_identifier_account_number;

        return $this;
    }

    /**
     * Gets counter_party_identifier_sort_code
     *
     * @return string|null
     */
    public function getCounterPartyIdentifierSortCode()
    {
        return $this->container['counter_party_identifier_sort_code'];
    }

    /**
     * Sets counter_party_identifier_sort_code
     *
     * @param string|null $counter_party_identifier_sort_code counter_party_identifier_sort_code
     *
     * @return self
     */
    public function setCounterPartyIdentifierSortCode($counter_party_identifier_sort_code)
    {
        if (is_null($counter_party_identifier_sort_code)) {
            array_push($this->openAPINullablesSetToNull, 'counter_party_identifier_sort_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('counter_party_identifier_sort_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['counter_party_identifier_sort_code'] = $counter_party_identifier_sort_code;

        return $this;
    }

    /**
     * Gets counter_party_address_line1
     *
     * @return string|null
     */
    public function getCounterPartyAddressLine1()
    {
        return $this->container['counter_party_address_line1'];
    }

    /**
     * Sets counter_party_address_line1
     *
     * @param string|null $counter_party_address_line1 counter_party_address_line1
     *
     * @return self
     */
    public function setCounterPartyAddressLine1($counter_party_address_line1)
    {
        if (is_null($counter_party_address_line1)) {
            array_push($this->openAPINullablesSetToNull, 'counter_party_address_line1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('counter_party_address_line1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['counter_party_address_line1'] = $counter_party_address_line1;

        return $this;
    }

    /**
     * Gets counter_party_address_line2
     *
     * @return string|null
     */
    public function getCounterPartyAddressLine2()
    {
        return $this->container['counter_party_address_line2'];
    }

    /**
     * Sets counter_party_address_line2
     *
     * @param string|null $counter_party_address_line2 counter_party_address_line2
     *
     * @return self
     */
    public function setCounterPartyAddressLine2($counter_party_address_line2)
    {
        if (is_null($counter_party_address_line2)) {
            array_push($this->openAPINullablesSetToNull, 'counter_party_address_line2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('counter_party_address_line2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['counter_party_address_line2'] = $counter_party_address_line2;

        return $this;
    }

    /**
     * Gets counter_party_address_post_town
     *
     * @return string|null
     */
    public function getCounterPartyAddressPostTown()
    {
        return $this->container['counter_party_address_post_town'];
    }

    /**
     * Sets counter_party_address_post_town
     *
     * @param string|null $counter_party_address_post_town counter_party_address_post_town
     *
     * @return self
     */
    public function setCounterPartyAddressPostTown($counter_party_address_post_town)
    {
        if (is_null($counter_party_address_post_town)) {
            array_push($this->openAPINullablesSetToNull, 'counter_party_address_post_town');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('counter_party_address_post_town', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['counter_party_address_post_town'] = $counter_party_address_post_town;

        return $this;
    }

    /**
     * Gets counter_party_address_post_code
     *
     * @return string|null
     */
    public function getCounterPartyAddressPostCode()
    {
        return $this->container['counter_party_address_post_code'];
    }

    /**
     * Sets counter_party_address_post_code
     *
     * @param string|null $counter_party_address_post_code counter_party_address_post_code
     *
     * @return self
     */
    public function setCounterPartyAddressPostCode($counter_party_address_post_code)
    {
        if (is_null($counter_party_address_post_code)) {
            array_push($this->openAPINullablesSetToNull, 'counter_party_address_post_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('counter_party_address_post_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['counter_party_address_post_code'] = $counter_party_address_post_code;

        return $this;
    }

    /**
     * Gets counter_party_address_country
     *
     * @return string|null
     */
    public function getCounterPartyAddressCountry()
    {
        return $this->container['counter_party_address_country'];
    }

    /**
     * Sets counter_party_address_country
     *
     * @param string|null $counter_party_address_country counter_party_address_country
     *
     * @return self
     */
    public function setCounterPartyAddressCountry($counter_party_address_country)
    {
        if (is_null($counter_party_address_country)) {
            array_push($this->openAPINullablesSetToNull, 'counter_party_address_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('counter_party_address_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['counter_party_address_country'] = $counter_party_address_country;

        return $this;
    }

    /**
     * Gets counter_party_phone_number
     *
     * @return string|null
     */
    public function getCounterPartyPhoneNumber()
    {
        return $this->container['counter_party_phone_number'];
    }

    /**
     * Sets counter_party_phone_number
     *
     * @param string|null $counter_party_phone_number counter_party_phone_number
     *
     * @return self
     */
    public function setCounterPartyPhoneNumber($counter_party_phone_number)
    {
        if (is_null($counter_party_phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'counter_party_phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('counter_party_phone_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['counter_party_phone_number'] = $counter_party_phone_number;

        return $this;
    }

    /**
     * Gets counter_party_email_address
     *
     * @return string|null
     */
    public function getCounterPartyEmailAddress()
    {
        return $this->container['counter_party_email_address'];
    }

    /**
     * Sets counter_party_email_address
     *
     * @param string|null $counter_party_email_address counter_party_email_address
     *
     * @return self
     */
    public function setCounterPartyEmailAddress($counter_party_email_address)
    {
        if (is_null($counter_party_email_address)) {
            array_push($this->openAPINullablesSetToNull, 'counter_party_email_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('counter_party_email_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['counter_party_email_address'] = $counter_party_email_address;

        return $this;
    }

    /**
     * Gets counter_party_date_of_birth
     *
     * @return string|null
     */
    public function getCounterPartyDateOfBirth()
    {
        return $this->container['counter_party_date_of_birth'];
    }

    /**
     * Sets counter_party_date_of_birth
     *
     * @param string|null $counter_party_date_of_birth counter_party_date_of_birth
     *
     * @return self
     */
    public function setCounterPartyDateOfBirth($counter_party_date_of_birth)
    {
        if (is_null($counter_party_date_of_birth)) {
            array_push($this->openAPINullablesSetToNull, 'counter_party_date_of_birth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('counter_party_date_of_birth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['counter_party_date_of_birth'] = $counter_party_date_of_birth;

        return $this;
    }

    /**
     * Gets previous_transaction_hash
     *
     * @return string|null
     */
    public function getPreviousTransactionHash()
    {
        return $this->container['previous_transaction_hash'];
    }

    /**
     * Sets previous_transaction_hash
     *
     * @param string|null $previous_transaction_hash previous_transaction_hash
     *
     * @return self
     */
    public function setPreviousTransactionHash($previous_transaction_hash)
    {
        if (is_null($previous_transaction_hash)) {
            array_push($this->openAPINullablesSetToNull, 'previous_transaction_hash');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('previous_transaction_hash', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['previous_transaction_hash'] = $previous_transaction_hash;

        return $this;
    }

    /**
     * Gets transaction_hash
     *
     * @return string|null
     */
    public function getTransactionHash()
    {
        return $this->container['transaction_hash'];
    }

    /**
     * Sets transaction_hash
     *
     * @param string|null $transaction_hash transaction_hash
     *
     * @return self
     */
    public function setTransactionHash($transaction_hash)
    {
        if (is_null($transaction_hash)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_hash');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_hash', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transaction_hash'] = $transaction_hash;

        return $this;
    }

    /**
     * Gets signature_key_id
     *
     * @return string|null
     */
    public function getSignatureKeyId()
    {
        return $this->container['signature_key_id'];
    }

    /**
     * Sets signature_key_id
     *
     * @param string|null $signature_key_id signature_key_id
     *
     * @return self
     */
    public function setSignatureKeyId($signature_key_id)
    {
        if (is_null($signature_key_id)) {
            array_push($this->openAPINullablesSetToNull, 'signature_key_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signature_key_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['signature_key_id'] = $signature_key_id;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string|null
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string|null $signature signature
     *
     * @return self
     */
    public function setSignature($signature)
    {
        if (is_null($signature)) {
            array_push($this->openAPINullablesSetToNull, 'signature');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signature', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets payout_id
     *
     * @return string|null
     */
    public function getPayoutId()
    {
        return $this->container['payout_id'];
    }

    /**
     * Sets payout_id
     *
     * @param string|null $payout_id payout_id
     *
     * @return self
     */
    public function setPayoutId($payout_id)
    {
        if (is_null($payout_id)) {
            array_push($this->openAPINullablesSetToNull, 'payout_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payout_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payout_id'] = $payout_id;

        return $this;
    }

    /**
     * Gets payment_request_id
     *
     * @return string|null
     */
    public function getPaymentRequestId()
    {
        return $this->container['payment_request_id'];
    }

    /**
     * Sets payment_request_id
     *
     * @param string|null $payment_request_id payment_request_id
     *
     * @return self
     */
    public function setPaymentRequestId($payment_request_id)
    {
        if (is_null($payment_request_id)) {
            array_push($this->openAPINullablesSetToNull, 'payment_request_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_request_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_request_id'] = $payment_request_id;

        return $this;
    }

    /**
     * Gets counter_party_identifier_bitcoin_address
     *
     * @return string|null
     */
    public function getCounterPartyIdentifierBitcoinAddress()
    {
        return $this->container['counter_party_identifier_bitcoin_address'];
    }

    /**
     * Sets counter_party_identifier_bitcoin_address
     *
     * @param string|null $counter_party_identifier_bitcoin_address counter_party_identifier_bitcoin_address
     *
     * @return self
     */
    public function setCounterPartyIdentifierBitcoinAddress($counter_party_identifier_bitcoin_address)
    {
        if (is_null($counter_party_identifier_bitcoin_address)) {
            array_push($this->openAPINullablesSetToNull, 'counter_party_identifier_bitcoin_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('counter_party_identifier_bitcoin_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['counter_party_identifier_bitcoin_address'] = $counter_party_identifier_bitcoin_address;

        return $this;
    }

    /**
     * Gets recipient_iban
     *
     * @return string|null
     */
    public function getRecipientIban()
    {
        return $this->container['recipient_iban'];
    }

    /**
     * Sets recipient_iban
     *
     * @param string|null $recipient_iban recipient_iban
     *
     * @return self
     */
    public function setRecipientIban($recipient_iban)
    {
        if (is_null($recipient_iban)) {
            array_push($this->openAPINullablesSetToNull, 'recipient_iban');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recipient_iban', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recipient_iban'] = $recipient_iban;

        return $this;
    }

    /**
     * Gets recipient_bic
     *
     * @return string|null
     */
    public function getRecipientBic()
    {
        return $this->container['recipient_bic'];
    }

    /**
     * Sets recipient_bic
     *
     * @param string|null $recipient_bic recipient_bic
     *
     * @return self
     */
    public function setRecipientBic($recipient_bic)
    {
        if (is_null($recipient_bic)) {
            array_push($this->openAPINullablesSetToNull, 'recipient_bic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recipient_bic', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recipient_bic'] = $recipient_bic;

        return $this;
    }

    /**
     * Gets recipient_sort_code
     *
     * @return string|null
     */
    public function getRecipientSortCode()
    {
        return $this->container['recipient_sort_code'];
    }

    /**
     * Sets recipient_sort_code
     *
     * @param string|null $recipient_sort_code recipient_sort_code
     *
     * @return self
     */
    public function setRecipientSortCode($recipient_sort_code)
    {
        if (is_null($recipient_sort_code)) {
            array_push($this->openAPINullablesSetToNull, 'recipient_sort_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recipient_sort_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recipient_sort_code'] = $recipient_sort_code;

        return $this;
    }

    /**
     * Gets recipient_account_number
     *
     * @return string|null
     */
    public function getRecipientAccountNumber()
    {
        return $this->container['recipient_account_number'];
    }

    /**
     * Sets recipient_account_number
     *
     * @param string|null $recipient_account_number recipient_account_number
     *
     * @return self
     */
    public function setRecipientAccountNumber($recipient_account_number)
    {
        if (is_null($recipient_account_number)) {
            array_push($this->openAPINullablesSetToNull, 'recipient_account_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recipient_account_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recipient_account_number'] = $recipient_account_number;

        return $this;
    }

    /**
     * Gets recipient_bitcoin_address
     *
     * @return string|null
     */
    public function getRecipientBitcoinAddress()
    {
        return $this->container['recipient_bitcoin_address'];
    }

    /**
     * Sets recipient_bitcoin_address
     *
     * @param string|null $recipient_bitcoin_address recipient_bitcoin_address
     *
     * @return self
     */
    public function setRecipientBitcoinAddress($recipient_bitcoin_address)
    {
        if (is_null($recipient_bitcoin_address)) {
            array_push($this->openAPINullablesSetToNull, 'recipient_bitcoin_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recipient_bitcoin_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recipient_bitcoin_address'] = $recipient_bitcoin_address;

        return $this;
    }

    /**
     * Gets bitcoin_block_height
     *
     * @return int|null
     */
    public function getBitcoinBlockHeight()
    {
        return $this->container['bitcoin_block_height'];
    }

    /**
     * Sets bitcoin_block_height
     *
     * @param int|null $bitcoin_block_height bitcoin_block_height
     *
     * @return self
     */
    public function setBitcoinBlockHeight($bitcoin_block_height)
    {
        if (is_null($bitcoin_block_height)) {
            throw new \InvalidArgumentException('non-nullable bitcoin_block_height cannot be null');
        }
        $this->container['bitcoin_block_height'] = $bitcoin_block_height;

        return $this;
    }

    /**
     * Gets sequence_number
     *
     * @return int|null
     */
    public function getSequenceNumber()
    {
        return $this->container['sequence_number'];
    }

    /**
     * Sets sequence_number
     *
     * @param int|null $sequence_number sequence_number
     *
     * @return self
     */
    public function setSequenceNumber($sequence_number)
    {
        if (is_null($sequence_number)) {
            throw new \InvalidArgumentException('non-nullable sequence_number cannot be null');
        }
        $this->container['sequence_number'] = $sequence_number;

        return $this;
    }

    /**
     * Gets account_sequence_number
     *
     * @return int|null
     */
    public function getAccountSequenceNumber()
    {
        return $this->container['account_sequence_number'];
    }

    /**
     * Sets account_sequence_number
     *
     * @param int|null $account_sequence_number account_sequence_number
     *
     * @return self
     */
    public function setAccountSequenceNumber($account_sequence_number)
    {
        if (is_null($account_sequence_number)) {
            throw new \InvalidArgumentException('non-nullable account_sequence_number cannot be null');
        }
        $this->container['account_sequence_number'] = $account_sequence_number;

        return $this;
    }

    /**
     * Gets rule_id
     *
     * @return string|null
     */
    public function getRuleId()
    {
        return $this->container['rule_id'];
    }

    /**
     * Sets rule_id
     *
     * @param string|null $rule_id rule_id
     *
     * @return self
     */
    public function setRuleId($rule_id)
    {
        if (is_null($rule_id)) {
            array_push($this->openAPINullablesSetToNull, 'rule_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rule_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rule_id'] = $rule_id;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsAccountEntity|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsAccountEntity|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        if (is_null($account)) {
            throw new \InvalidArgumentException('non-nullable account cannot be null');
        }
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets payment_request
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestEntity|null
     */
    public function getPaymentRequest()
    {
        return $this->container['payment_request'];
    }

    /**
     * Sets payment_request
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestEntity|null $payment_request payment_request
     *
     * @return self
     */
    public function setPaymentRequest($payment_request)
    {
        if (is_null($payment_request)) {
            throw new \InvalidArgumentException('non-nullable payment_request cannot be null');
        }
        $this->container['payment_request'] = $payment_request;

        return $this;
    }

    /**
     * Gets payout
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity|null
     */
    public function getPayout()
    {
        return $this->container['payout'];
    }

    /**
     * Sets payout
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity|null $payout payout
     *
     * @return self
     */
    public function setPayout($payout)
    {
        if (is_null($payout)) {
            throw new \InvalidArgumentException('non-nullable payout cannot be null');
        }
        $this->container['payout'] = $payout;

        return $this;
    }

    /**
     * Gets payin
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayin|null
     */
    public function getPayin()
    {
        return $this->container['payin'];
    }

    /**
     * Sets payin
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayin|null $payin payin
     *
     * @return self
     */
    public function setPayin($payin)
    {
        if (is_null($payin)) {
            throw new \InvalidArgumentException('non-nullable payin cannot be null');
        }
        $this->container['payin'] = $payin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


