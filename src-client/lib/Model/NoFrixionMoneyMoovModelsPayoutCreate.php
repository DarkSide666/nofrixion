<?php
/**
 * NoFrixionMoneyMoovModelsPayoutCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionMoneyMoovModelsPayoutCreate Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionMoneyMoovModelsPayoutCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.MoneyMoov.Models.PayoutCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'string',
        'type' => 'string',
        'description' => 'string',
        'currency' => 'string',
        'amount' => 'float',
        'your_reference' => 'string',
        'their_reference' => 'string',
        'destination' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsCounterpartyCreate',
        'invoice_id' => 'string',
        'allow_incomplete' => 'bool',
        'tag_ids' => 'string[]',
        'scheduled' => 'bool',
        'schedule_date' => '\DateTime',
        'bitcoin_subtract_fee_from_amount' => 'bool',
        'bitcoin_fee_sats_per_vbyte' => 'int',
        'beneficiary_id' => 'string',
        'batch_payout_id' => 'string',
        'topup_payrun_id' => 'string',
        'payment_rail' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => 'uuid',
        'type' => null,
        'description' => null,
        'currency' => null,
        'amount' => 'double',
        'your_reference' => null,
        'their_reference' => null,
        'destination' => null,
        'invoice_id' => null,
        'allow_incomplete' => null,
        'tag_ids' => 'uuid',
        'scheduled' => null,
        'schedule_date' => 'date-time',
        'bitcoin_subtract_fee_from_amount' => null,
        'bitcoin_fee_sats_per_vbyte' => 'int32',
        'beneficiary_id' => 'uuid',
        'batch_payout_id' => 'uuid',
        'topup_payrun_id' => 'uuid',
        'payment_rail' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_id' => false,
        'type' => false,
        'description' => true,
        'currency' => false,
        'amount' => false,
        'your_reference' => true,
        'their_reference' => true,
        'destination' => false,
        'invoice_id' => true,
        'allow_incomplete' => false,
        'tag_ids' => true,
        'scheduled' => false,
        'schedule_date' => true,
        'bitcoin_subtract_fee_from_amount' => false,
        'bitcoin_fee_sats_per_vbyte' => false,
        'beneficiary_id' => true,
        'batch_payout_id' => true,
        'topup_payrun_id' => true,
        'payment_rail' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountID',
        'type' => 'type',
        'description' => 'description',
        'currency' => 'currency',
        'amount' => 'amount',
        'your_reference' => 'yourReference',
        'their_reference' => 'theirReference',
        'destination' => 'destination',
        'invoice_id' => 'invoiceID',
        'allow_incomplete' => 'allowIncomplete',
        'tag_ids' => 'tagIds',
        'scheduled' => 'scheduled',
        'schedule_date' => 'scheduleDate',
        'bitcoin_subtract_fee_from_amount' => 'bitcoinSubtractFeeFromAmount',
        'bitcoin_fee_sats_per_vbyte' => 'bitcoinFeeSatsPerVbyte',
        'beneficiary_id' => 'beneficiaryID',
        'batch_payout_id' => 'batchPayoutID',
        'topup_payrun_id' => 'topupPayrunID',
        'payment_rail' => 'paymentRail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'type' => 'setType',
        'description' => 'setDescription',
        'currency' => 'setCurrency',
        'amount' => 'setAmount',
        'your_reference' => 'setYourReference',
        'their_reference' => 'setTheirReference',
        'destination' => 'setDestination',
        'invoice_id' => 'setInvoiceId',
        'allow_incomplete' => 'setAllowIncomplete',
        'tag_ids' => 'setTagIds',
        'scheduled' => 'setScheduled',
        'schedule_date' => 'setScheduleDate',
        'bitcoin_subtract_fee_from_amount' => 'setBitcoinSubtractFeeFromAmount',
        'bitcoin_fee_sats_per_vbyte' => 'setBitcoinFeeSatsPerVbyte',
        'beneficiary_id' => 'setBeneficiaryId',
        'batch_payout_id' => 'setBatchPayoutId',
        'topup_payrun_id' => 'setTopupPayrunId',
        'payment_rail' => 'setPaymentRail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'type' => 'getType',
        'description' => 'getDescription',
        'currency' => 'getCurrency',
        'amount' => 'getAmount',
        'your_reference' => 'getYourReference',
        'their_reference' => 'getTheirReference',
        'destination' => 'getDestination',
        'invoice_id' => 'getInvoiceId',
        'allow_incomplete' => 'getAllowIncomplete',
        'tag_ids' => 'getTagIds',
        'scheduled' => 'getScheduled',
        'schedule_date' => 'getScheduleDate',
        'bitcoin_subtract_fee_from_amount' => 'getBitcoinSubtractFeeFromAmount',
        'bitcoin_fee_sats_per_vbyte' => 'getBitcoinFeeSatsPerVbyte',
        'beneficiary_id' => 'getBeneficiaryId',
        'batch_payout_id' => 'getBatchPayoutId',
        'topup_payrun_id' => 'getTopupPayrunId',
        'payment_rail' => 'getPaymentRail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_UNKNOWN = 'Unknown';
    public const TYPE_SCAN = 'SCAN';
    public const TYPE_IBAN = 'IBAN';
    public const TYPE_DD = 'DD';
    public const TYPE_BTC = 'BTC';
    public const CURRENCY_NONE = 'NONE';
    public const CURRENCY_GBP = 'GBP';
    public const CURRENCY_EUR = 'EUR';
    public const CURRENCY_BTC = 'BTC';
    public const PAYMENT_RAIL__DEFAULT = 'Default';
    public const PAYMENT_RAIL_SEPA_CT = 'SEPA_CT';
    public const PAYMENT_RAIL_SEPA_INST = 'SEPA_INST';
    public const PAYMENT_RAIL_TARGET2 = 'TARGET2';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_UNKNOWN,
            self::TYPE_SCAN,
            self::TYPE_IBAN,
            self::TYPE_DD,
            self::TYPE_BTC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_NONE,
            self::CURRENCY_GBP,
            self::CURRENCY_EUR,
            self::CURRENCY_BTC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentRailAllowableValues()
    {
        return [
            self::PAYMENT_RAIL__DEFAULT,
            self::PAYMENT_RAIL_SEPA_CT,
            self::PAYMENT_RAIL_SEPA_INST,
            self::PAYMENT_RAIL_TARGET2,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('your_reference', $data ?? [], null);
        $this->setIfExists('their_reference', $data ?? [], null);
        $this->setIfExists('destination', $data ?? [], null);
        $this->setIfExists('invoice_id', $data ?? [], null);
        $this->setIfExists('allow_incomplete', $data ?? [], null);
        $this->setIfExists('tag_ids', $data ?? [], null);
        $this->setIfExists('scheduled', $data ?? [], null);
        $this->setIfExists('schedule_date', $data ?? [], null);
        $this->setIfExists('bitcoin_subtract_fee_from_amount', $data ?? [], null);
        $this->setIfExists('bitcoin_fee_sats_per_vbyte', $data ?? [], null);
        $this->setIfExists('beneficiary_id', $data ?? [], null);
        $this->setIfExists('batch_payout_id', $data ?? [], null);
        $this->setIfExists('topup_payrun_id', $data ?? [], null);
        $this->setIfExists('payment_rail', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        $allowedValues = $this->getPaymentRailAllowableValues();
        if (!is_null($this->container['payment_rail']) && !in_array($this->container['payment_rail'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_rail', must be one of '%s'",
                $this->container['payment_rail'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id The ID of the source account for the payout.
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of account identifier to use for the payout destination.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets your_reference
     *
     * @return string|null
     */
    public function getYourReference()
    {
        return $this->container['your_reference'];
    }

    /**
     * Sets your_reference
     *
     * @param string|null $your_reference Gets or Sets the your reference property.
     *
     * @return self
     */
    public function setYourReference($your_reference)
    {
        if (is_null($your_reference)) {
            array_push($this->openAPINullablesSetToNull, 'your_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('your_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['your_reference'] = $your_reference;

        return $this;
    }

    /**
     * Gets their_reference
     *
     * @return string|null
     */
    public function getTheirReference()
    {
        return $this->container['their_reference'];
    }

    /**
     * Sets their_reference
     *
     * @param string|null $their_reference their_reference
     *
     * @return self
     */
    public function setTheirReference($their_reference)
    {
        if (is_null($their_reference)) {
            array_push($this->openAPINullablesSetToNull, 'their_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('their_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['their_reference'] = $their_reference;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsCounterpartyCreate|null
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsCounterpartyCreate|null $destination destination
     *
     * @return self
     */
    public function setDestination($destination)
    {
        if (is_null($destination)) {
            throw new \InvalidArgumentException('non-nullable destination cannot be null');
        }
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets invoice_id
     *
     * @return string|null
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param string|null $invoice_id Optional field to associate the payout with the invoice from an external   application such as Xero. The InvoiceID needs to be unique for each  account.
     *
     * @return self
     */
    public function setInvoiceId($invoice_id)
    {
        if (is_null($invoice_id)) {
            array_push($this->openAPINullablesSetToNull, 'invoice_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoice_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets allow_incomplete
     *
     * @return bool|null
     */
    public function getAllowIncomplete()
    {
        return $this->container['allow_incomplete'];
    }

    /**
     * Sets allow_incomplete
     *
     * @param bool|null $allow_incomplete If set to true the payout will get created even if the business validation   rules fail. The basic data validation rules must still pass. The original   purpose of this flag was to allow payouts to be created from i3rd party applications,  such as Xero, that may not have things like an IBAN set for a supplier.  The missing information must be filled, either by an update from the 3rd party  application, or manually, before the payout can be submitted for processing.
     *
     * @return self
     */
    public function setAllowIncomplete($allow_incomplete)
    {
        if (is_null($allow_incomplete)) {
            throw new \InvalidArgumentException('non-nullable allow_incomplete cannot be null');
        }
        $this->container['allow_incomplete'] = $allow_incomplete;

        return $this;
    }

    /**
     * Gets tag_ids
     *
     * @return string[]|null
     */
    public function getTagIds()
    {
        return $this->container['tag_ids'];
    }

    /**
     * Sets tag_ids
     *
     * @param string[]|null $tag_ids An optional list of tag ids to add to the payout.
     *
     * @return self
     */
    public function setTagIds($tag_ids)
    {
        if (is_null($tag_ids)) {
            array_push($this->openAPINullablesSetToNull, 'tag_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tag_ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tag_ids'] = $tag_ids;

        return $this;
    }

    /**
     * Gets scheduled
     *
     * @return bool|null
     */
    public function getScheduled()
    {
        return $this->container['scheduled'];
    }

    /**
     * Sets scheduled
     *
     * @param bool|null $scheduled Should this payout be scheduled for a future date?
     *
     * @return self
     */
    public function setScheduled($scheduled)
    {
        if (is_null($scheduled)) {
            throw new \InvalidArgumentException('non-nullable scheduled cannot be null');
        }
        $this->container['scheduled'] = $scheduled;

        return $this;
    }

    /**
     * Gets schedule_date
     *
     * @return \DateTime|null
     */
    public function getScheduleDate()
    {
        return $this->container['schedule_date'];
    }

    /**
     * Sets schedule_date
     *
     * @param \DateTime|null $schedule_date The date the payout should be submitted.
     *
     * @return self
     */
    public function setScheduleDate($schedule_date)
    {
        if (is_null($schedule_date)) {
            array_push($this->openAPINullablesSetToNull, 'schedule_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('schedule_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['schedule_date'] = $schedule_date;

        return $this;
    }

    /**
     * Gets bitcoin_subtract_fee_from_amount
     *
     * @return bool|null
     */
    public function getBitcoinSubtractFeeFromAmount()
    {
        return $this->container['bitcoin_subtract_fee_from_amount'];
    }

    /**
     * Sets bitcoin_subtract_fee_from_amount
     *
     * @param bool|null $bitcoin_subtract_fee_from_amount For Bitcoin payouts, when this flag is set the network fee will be deducted from the send amount. This is particularly useful for sweeps where it can be difficult to calculate the exact fee required.
     *
     * @return self
     */
    public function setBitcoinSubtractFeeFromAmount($bitcoin_subtract_fee_from_amount)
    {
        if (is_null($bitcoin_subtract_fee_from_amount)) {
            throw new \InvalidArgumentException('non-nullable bitcoin_subtract_fee_from_amount cannot be null');
        }
        $this->container['bitcoin_subtract_fee_from_amount'] = $bitcoin_subtract_fee_from_amount;

        return $this;
    }

    /**
     * Gets bitcoin_fee_sats_per_vbyte
     *
     * @return int|null
     */
    public function getBitcoinFeeSatsPerVbyte()
    {
        return $this->container['bitcoin_fee_sats_per_vbyte'];
    }

    /**
     * Sets bitcoin_fee_sats_per_vbyte
     *
     * @param int|null $bitcoin_fee_sats_per_vbyte The Bitcoin fee rate to apply in Satoshis per virtual byte.
     *
     * @return self
     */
    public function setBitcoinFeeSatsPerVbyte($bitcoin_fee_sats_per_vbyte)
    {
        if (is_null($bitcoin_fee_sats_per_vbyte)) {
            throw new \InvalidArgumentException('non-nullable bitcoin_fee_sats_per_vbyte cannot be null');
        }
        $this->container['bitcoin_fee_sats_per_vbyte'] = $bitcoin_fee_sats_per_vbyte;

        return $this;
    }

    /**
     * Gets beneficiary_id
     *
     * @return string|null
     */
    public function getBeneficiaryId()
    {
        return $this->container['beneficiary_id'];
    }

    /**
     * Sets beneficiary_id
     *
     * @param string|null $beneficiary_id Optional. The ID of the beneficiary to use for the payout destination.
     *
     * @return self
     */
    public function setBeneficiaryId($beneficiary_id)
    {
        if (is_null($beneficiary_id)) {
            array_push($this->openAPINullablesSetToNull, 'beneficiary_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('beneficiary_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['beneficiary_id'] = $beneficiary_id;

        return $this;
    }

    /**
     * Gets batch_payout_id
     *
     * @return string|null
     */
    public function getBatchPayoutId()
    {
        return $this->container['batch_payout_id'];
    }

    /**
     * Sets batch_payout_id
     *
     * @param string|null $batch_payout_id The ID of the batch payout this payout is part of.
     *
     * @return self
     */
    public function setBatchPayoutId($batch_payout_id)
    {
        if (is_null($batch_payout_id)) {
            array_push($this->openAPINullablesSetToNull, 'batch_payout_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('batch_payout_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['batch_payout_id'] = $batch_payout_id;

        return $this;
    }

    /**
     * Gets topup_payrun_id
     *
     * @return string|null
     */
    public function getTopupPayrunId()
    {
        return $this->container['topup_payrun_id'];
    }

    /**
     * Sets topup_payrun_id
     *
     * @param string|null $topup_payrun_id Optional, if set it indicates that this payout will be used to top up   a payment account for a pay run by an internal transfer.
     *
     * @return self
     */
    public function setTopupPayrunId($topup_payrun_id)
    {
        if (is_null($topup_payrun_id)) {
            array_push($this->openAPINullablesSetToNull, 'topup_payrun_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('topup_payrun_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['topup_payrun_id'] = $topup_payrun_id;

        return $this;
    }

    /**
     * Gets payment_rail
     *
     * @return string|null
     */
    public function getPaymentRail()
    {
        return $this->container['payment_rail'];
    }

    /**
     * Sets payment_rail
     *
     * @param string|null $payment_rail Optional field to indicate the payment rail to use for the payout. Currrently only  supports choosing between SEPA-CT and SEPA-INST for EUR payments. If not set, for a EUR  payment, the default behaviour is to attempt SEPA-INST and fallback to SEPA-CT if rejected.
     *
     * @return self
     */
    public function setPaymentRail($payment_rail)
    {
        if (is_null($payment_rail)) {
            throw new \InvalidArgumentException('non-nullable payment_rail cannot be null');
        }
        $allowedValues = $this->getPaymentRailAllowableValues();
        if (!in_array($payment_rail, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_rail', must be one of '%s'",
                    $payment_rail,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_rail'] = $payment_rail;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


