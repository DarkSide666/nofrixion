<?php
/**
 * NoFrixionDataModelsTokenisedCardsEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionDataModelsTokenisedCardsEntity Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionDataModelsTokenisedCardsEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.DataModels.TokenisedCardsEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'payment_request_id' => 'string',
        'card_token_customer_id' => 'string',
        'customer_email_address' => 'string',
        'transaction_id' => 'string',
        'card_type' => 'string',
        'processor_name' => 'string',
        'instrument_identifier_id' => 'string',
        'instrument_identifier_new' => 'bool',
        'instrument_identifier_status' => 'string',
        'instrument_identifier_successor_id' => 'string',
        'first_six_digits' => 'string',
        'last_four_digits' => 'string',
        'masked_number' => 'string',
        'expiration_date' => '\DateTime',
        'merchant_id' => 'string',
        'inserted' => '\DateTime',
        'last_updated' => '\DateTime',
        'merchant' => '\Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity',
        'payment_request' => '\Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestEntity'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'payment_request_id' => 'uuid',
        'card_token_customer_id' => null,
        'customer_email_address' => 'email',
        'transaction_id' => null,
        'card_type' => null,
        'processor_name' => null,
        'instrument_identifier_id' => null,
        'instrument_identifier_new' => null,
        'instrument_identifier_status' => null,
        'instrument_identifier_successor_id' => null,
        'first_six_digits' => null,
        'last_four_digits' => null,
        'masked_number' => null,
        'expiration_date' => 'date-time',
        'merchant_id' => 'uuid',
        'inserted' => 'date-time',
        'last_updated' => 'date-time',
        'merchant' => null,
        'payment_request' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'payment_request_id' => false,
        'card_token_customer_id' => true,
        'customer_email_address' => true,
        'transaction_id' => true,
        'card_type' => true,
        'processor_name' => false,
        'instrument_identifier_id' => true,
        'instrument_identifier_new' => false,
        'instrument_identifier_status' => true,
        'instrument_identifier_successor_id' => true,
        'first_six_digits' => true,
        'last_four_digits' => true,
        'masked_number' => true,
        'expiration_date' => false,
        'merchant_id' => false,
        'inserted' => false,
        'last_updated' => false,
        'merchant' => false,
        'payment_request' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'payment_request_id' => 'paymentRequestID',
        'card_token_customer_id' => 'cardTokenCustomerID',
        'customer_email_address' => 'customerEmailAddress',
        'transaction_id' => 'transactionID',
        'card_type' => 'cardType',
        'processor_name' => 'processorName',
        'instrument_identifier_id' => 'instrumentIdentifierID',
        'instrument_identifier_new' => 'instrumentIdentifierNew',
        'instrument_identifier_status' => 'instrumentIdentifierStatus',
        'instrument_identifier_successor_id' => 'instrumentIdentifierSuccessorID',
        'first_six_digits' => 'firstSixDigits',
        'last_four_digits' => 'lastFourDigits',
        'masked_number' => 'maskedNumber',
        'expiration_date' => 'expirationDate',
        'merchant_id' => 'merchantID',
        'inserted' => 'inserted',
        'last_updated' => 'lastUpdated',
        'merchant' => 'merchant',
        'payment_request' => 'paymentRequest'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'payment_request_id' => 'setPaymentRequestId',
        'card_token_customer_id' => 'setCardTokenCustomerId',
        'customer_email_address' => 'setCustomerEmailAddress',
        'transaction_id' => 'setTransactionId',
        'card_type' => 'setCardType',
        'processor_name' => 'setProcessorName',
        'instrument_identifier_id' => 'setInstrumentIdentifierId',
        'instrument_identifier_new' => 'setInstrumentIdentifierNew',
        'instrument_identifier_status' => 'setInstrumentIdentifierStatus',
        'instrument_identifier_successor_id' => 'setInstrumentIdentifierSuccessorId',
        'first_six_digits' => 'setFirstSixDigits',
        'last_four_digits' => 'setLastFourDigits',
        'masked_number' => 'setMaskedNumber',
        'expiration_date' => 'setExpirationDate',
        'merchant_id' => 'setMerchantId',
        'inserted' => 'setInserted',
        'last_updated' => 'setLastUpdated',
        'merchant' => 'setMerchant',
        'payment_request' => 'setPaymentRequest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'payment_request_id' => 'getPaymentRequestId',
        'card_token_customer_id' => 'getCardTokenCustomerId',
        'customer_email_address' => 'getCustomerEmailAddress',
        'transaction_id' => 'getTransactionId',
        'card_type' => 'getCardType',
        'processor_name' => 'getProcessorName',
        'instrument_identifier_id' => 'getInstrumentIdentifierId',
        'instrument_identifier_new' => 'getInstrumentIdentifierNew',
        'instrument_identifier_status' => 'getInstrumentIdentifierStatus',
        'instrument_identifier_successor_id' => 'getInstrumentIdentifierSuccessorId',
        'first_six_digits' => 'getFirstSixDigits',
        'last_four_digits' => 'getLastFourDigits',
        'masked_number' => 'getMaskedNumber',
        'expiration_date' => 'getExpirationDate',
        'merchant_id' => 'getMerchantId',
        'inserted' => 'getInserted',
        'last_updated' => 'getLastUpdated',
        'merchant' => 'getMerchant',
        'payment_request' => 'getPaymentRequest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PROCESSOR_NAME_NONE = 'None';
    public const PROCESSOR_NAME_CYBER_SOURCE = 'CyberSource';
    public const PROCESSOR_NAME_CHECKOUT = 'Checkout';
    public const PROCESSOR_NAME_STRIPE = 'Stripe';
    public const PROCESSOR_NAME_MODULR = 'Modulr';
    public const PROCESSOR_NAME_PLAID = 'Plaid';
    public const PROCESSOR_NAME_YAPILY = 'Yapily';
    public const PROCESSOR_NAME_NOFRIXION = 'Nofrixion';
    public const PROCESSOR_NAME_BITCOIN = 'Bitcoin';
    public const PROCESSOR_NAME_BITCOIN_TESTNET = 'BitcoinTestnet';
    public const PROCESSOR_NAME_BANKING_CIRCLE = 'BankingCircle';
    public const PROCESSOR_NAME_BANKING_CIRCLE_AGENCY = 'BankingCircleAgency';
    public const PROCESSOR_NAME_SIMULATOR = 'Simulator';
    public const PROCESSOR_NAME_LIGHTNING = 'Lightning';
    public const PROCESSOR_NAME_LIGHTNING_TESTNET = 'LightningTestnet';
    public const PROCESSOR_NAME_BANKING_CIRCLE_DIRECT_DEBIT = 'BankingCircleDirectDebit';
    public const PROCESSOR_NAME_TRIBE = 'Tribe';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProcessorNameAllowableValues()
    {
        return [
            self::PROCESSOR_NAME_NONE,
            self::PROCESSOR_NAME_CYBER_SOURCE,
            self::PROCESSOR_NAME_CHECKOUT,
            self::PROCESSOR_NAME_STRIPE,
            self::PROCESSOR_NAME_MODULR,
            self::PROCESSOR_NAME_PLAID,
            self::PROCESSOR_NAME_YAPILY,
            self::PROCESSOR_NAME_NOFRIXION,
            self::PROCESSOR_NAME_BITCOIN,
            self::PROCESSOR_NAME_BITCOIN_TESTNET,
            self::PROCESSOR_NAME_BANKING_CIRCLE,
            self::PROCESSOR_NAME_BANKING_CIRCLE_AGENCY,
            self::PROCESSOR_NAME_SIMULATOR,
            self::PROCESSOR_NAME_LIGHTNING,
            self::PROCESSOR_NAME_LIGHTNING_TESTNET,
            self::PROCESSOR_NAME_BANKING_CIRCLE_DIRECT_DEBIT,
            self::PROCESSOR_NAME_TRIBE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('payment_request_id', $data ?? [], null);
        $this->setIfExists('card_token_customer_id', $data ?? [], null);
        $this->setIfExists('customer_email_address', $data ?? [], null);
        $this->setIfExists('transaction_id', $data ?? [], null);
        $this->setIfExists('card_type', $data ?? [], null);
        $this->setIfExists('processor_name', $data ?? [], null);
        $this->setIfExists('instrument_identifier_id', $data ?? [], null);
        $this->setIfExists('instrument_identifier_new', $data ?? [], null);
        $this->setIfExists('instrument_identifier_status', $data ?? [], null);
        $this->setIfExists('instrument_identifier_successor_id', $data ?? [], null);
        $this->setIfExists('first_six_digits', $data ?? [], null);
        $this->setIfExists('last_four_digits', $data ?? [], null);
        $this->setIfExists('masked_number', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('merchant', $data ?? [], null);
        $this->setIfExists('payment_request', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProcessorNameAllowableValues();
        if (!is_null($this->container['processor_name']) && !in_array($this->container['processor_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'processor_name', must be one of '%s'",
                $this->container['processor_name'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets payment_request_id
     *
     * @return string|null
     */
    public function getPaymentRequestId()
    {
        return $this->container['payment_request_id'];
    }

    /**
     * Sets payment_request_id
     *
     * @param string|null $payment_request_id payment_request_id
     *
     * @return self
     */
    public function setPaymentRequestId($payment_request_id)
    {
        if (is_null($payment_request_id)) {
            throw new \InvalidArgumentException('non-nullable payment_request_id cannot be null');
        }
        $this->container['payment_request_id'] = $payment_request_id;

        return $this;
    }

    /**
     * Gets card_token_customer_id
     *
     * @return string|null
     */
    public function getCardTokenCustomerId()
    {
        return $this->container['card_token_customer_id'];
    }

    /**
     * Sets card_token_customer_id
     *
     * @param string|null $card_token_customer_id card_token_customer_id
     *
     * @return self
     */
    public function setCardTokenCustomerId($card_token_customer_id)
    {
        if (is_null($card_token_customer_id)) {
            array_push($this->openAPINullablesSetToNull, 'card_token_customer_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_token_customer_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_token_customer_id'] = $card_token_customer_id;

        return $this;
    }

    /**
     * Gets customer_email_address
     *
     * @return string|null
     */
    public function getCustomerEmailAddress()
    {
        return $this->container['customer_email_address'];
    }

    /**
     * Sets customer_email_address
     *
     * @param string|null $customer_email_address customer_email_address
     *
     * @return self
     */
    public function setCustomerEmailAddress($customer_email_address)
    {
        if (is_null($customer_email_address)) {
            array_push($this->openAPINullablesSetToNull, 'customer_email_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_email_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_email_address'] = $customer_email_address;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id transaction_id
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        if (is_null($transaction_id)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return string|null
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string|null $card_type card_type
     *
     * @return self
     */
    public function setCardType($card_type)
    {
        if (is_null($card_type)) {
            array_push($this->openAPINullablesSetToNull, 'card_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets processor_name
     *
     * @return string|null
     */
    public function getProcessorName()
    {
        return $this->container['processor_name'];
    }

    /**
     * Sets processor_name
     *
     * @param string|null $processor_name Lists the supported card and PIS processors.
     *
     * @return self
     */
    public function setProcessorName($processor_name)
    {
        if (is_null($processor_name)) {
            throw new \InvalidArgumentException('non-nullable processor_name cannot be null');
        }
        $allowedValues = $this->getProcessorNameAllowableValues();
        if (!in_array($processor_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'processor_name', must be one of '%s'",
                    $processor_name,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['processor_name'] = $processor_name;

        return $this;
    }

    /**
     * Gets instrument_identifier_id
     *
     * @return string|null
     */
    public function getInstrumentIdentifierId()
    {
        return $this->container['instrument_identifier_id'];
    }

    /**
     * Sets instrument_identifier_id
     *
     * @param string|null $instrument_identifier_id instrument_identifier_id
     *
     * @return self
     */
    public function setInstrumentIdentifierId($instrument_identifier_id)
    {
        if (is_null($instrument_identifier_id)) {
            array_push($this->openAPINullablesSetToNull, 'instrument_identifier_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('instrument_identifier_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['instrument_identifier_id'] = $instrument_identifier_id;

        return $this;
    }

    /**
     * Gets instrument_identifier_new
     *
     * @return bool|null
     */
    public function getInstrumentIdentifierNew()
    {
        return $this->container['instrument_identifier_new'];
    }

    /**
     * Sets instrument_identifier_new
     *
     * @param bool|null $instrument_identifier_new instrument_identifier_new
     *
     * @return self
     */
    public function setInstrumentIdentifierNew($instrument_identifier_new)
    {
        if (is_null($instrument_identifier_new)) {
            throw new \InvalidArgumentException('non-nullable instrument_identifier_new cannot be null');
        }
        $this->container['instrument_identifier_new'] = $instrument_identifier_new;

        return $this;
    }

    /**
     * Gets instrument_identifier_status
     *
     * @return string|null
     */
    public function getInstrumentIdentifierStatus()
    {
        return $this->container['instrument_identifier_status'];
    }

    /**
     * Sets instrument_identifier_status
     *
     * @param string|null $instrument_identifier_status instrument_identifier_status
     *
     * @return self
     */
    public function setInstrumentIdentifierStatus($instrument_identifier_status)
    {
        if (is_null($instrument_identifier_status)) {
            array_push($this->openAPINullablesSetToNull, 'instrument_identifier_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('instrument_identifier_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['instrument_identifier_status'] = $instrument_identifier_status;

        return $this;
    }

    /**
     * Gets instrument_identifier_successor_id
     *
     * @return string|null
     */
    public function getInstrumentIdentifierSuccessorId()
    {
        return $this->container['instrument_identifier_successor_id'];
    }

    /**
     * Sets instrument_identifier_successor_id
     *
     * @param string|null $instrument_identifier_successor_id instrument_identifier_successor_id
     *
     * @return self
     */
    public function setInstrumentIdentifierSuccessorId($instrument_identifier_successor_id)
    {
        if (is_null($instrument_identifier_successor_id)) {
            array_push($this->openAPINullablesSetToNull, 'instrument_identifier_successor_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('instrument_identifier_successor_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['instrument_identifier_successor_id'] = $instrument_identifier_successor_id;

        return $this;
    }

    /**
     * Gets first_six_digits
     *
     * @return string|null
     */
    public function getFirstSixDigits()
    {
        return $this->container['first_six_digits'];
    }

    /**
     * Sets first_six_digits
     *
     * @param string|null $first_six_digits first_six_digits
     *
     * @return self
     */
    public function setFirstSixDigits($first_six_digits)
    {
        if (is_null($first_six_digits)) {
            array_push($this->openAPINullablesSetToNull, 'first_six_digits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_six_digits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_six_digits'] = $first_six_digits;

        return $this;
    }

    /**
     * Gets last_four_digits
     *
     * @return string|null
     */
    public function getLastFourDigits()
    {
        return $this->container['last_four_digits'];
    }

    /**
     * Sets last_four_digits
     *
     * @param string|null $last_four_digits last_four_digits
     *
     * @return self
     */
    public function setLastFourDigits($last_four_digits)
    {
        if (is_null($last_four_digits)) {
            array_push($this->openAPINullablesSetToNull, 'last_four_digits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_four_digits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_four_digits'] = $last_four_digits;

        return $this;
    }

    /**
     * Gets masked_number
     *
     * @return string|null
     */
    public function getMaskedNumber()
    {
        return $this->container['masked_number'];
    }

    /**
     * Sets masked_number
     *
     * @param string|null $masked_number masked_number
     *
     * @return self
     */
    public function setMaskedNumber($masked_number)
    {
        if (is_null($masked_number)) {
            array_push($this->openAPINullablesSetToNull, 'masked_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('masked_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['masked_number'] = $masked_number;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime|null $expiration_date expiration_date
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted inserted
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity|null
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity|null $merchant merchant
     *
     * @return self
     */
    public function setMerchant($merchant)
    {
        if (is_null($merchant)) {
            throw new \InvalidArgumentException('non-nullable merchant cannot be null');
        }
        $this->container['merchant'] = $merchant;

        return $this;
    }

    /**
     * Gets payment_request
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestEntity|null
     */
    public function getPaymentRequest()
    {
        return $this->container['payment_request'];
    }

    /**
     * Sets payment_request
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestEntity|null $payment_request payment_request
     *
     * @return self
     */
    public function setPaymentRequest($payment_request)
    {
        if (is_null($payment_request)) {
            throw new \InvalidArgumentException('non-nullable payment_request cannot be null');
        }
        $this->container['payment_request'] = $payment_request;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


