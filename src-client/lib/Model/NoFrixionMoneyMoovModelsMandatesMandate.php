<?php
/**
 * NoFrixionMoneyMoovModelsMandatesMandate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionMoneyMoovModelsMandatesMandate Class Doc Comment
 *
 * @category Class
 * @description Represents a Direct Debit mandate entity that contains customer,   bank account and mandate information.
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionMoneyMoovModelsMandatesMandate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.MoneyMoov.Models.Mandates.Mandate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'merchant_id' => 'string',
        'supplier_name' => 'string',
        'supplier_mandate_id' => 'string',
        'supplier_bank_account_id' => 'string',
        'supplier_customer_id' => 'string',
        'customer_first_name' => 'string',
        'customer_last_name' => 'string',
        'customer_country_code' => 'string',
        'customer_country_name' => 'string',
        'customer_city' => 'string',
        'customer_email_address' => 'string',
        'customer_iban' => 'string',
        'customer_account_number' => 'int',
        'customer_sort_code' => 'int',
        'reference' => 'string',
        'is_recurring' => 'bool',
        'currency' => 'string',
        'amount' => 'float',
        'approved_at' => '\DateTime',
        'supplier_status' => 'string',
        'status' => 'string',
        'inserted' => '\DateTime',
        'last_updated' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'merchant_id' => 'uuid',
        'supplier_name' => null,
        'supplier_mandate_id' => null,
        'supplier_bank_account_id' => null,
        'supplier_customer_id' => null,
        'customer_first_name' => null,
        'customer_last_name' => null,
        'customer_country_code' => null,
        'customer_country_name' => null,
        'customer_city' => null,
        'customer_email_address' => null,
        'customer_iban' => null,
        'customer_account_number' => 'int32',
        'customer_sort_code' => 'int32',
        'reference' => null,
        'is_recurring' => null,
        'currency' => null,
        'amount' => 'double',
        'approved_at' => 'date-time',
        'supplier_status' => null,
        'status' => null,
        'inserted' => 'date-time',
        'last_updated' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'merchant_id' => false,
        'supplier_name' => true,
        'supplier_mandate_id' => true,
        'supplier_bank_account_id' => true,
        'supplier_customer_id' => true,
        'customer_first_name' => true,
        'customer_last_name' => true,
        'customer_country_code' => true,
        'customer_country_name' => true,
        'customer_city' => true,
        'customer_email_address' => true,
        'customer_iban' => true,
        'customer_account_number' => true,
        'customer_sort_code' => true,
        'reference' => true,
        'is_recurring' => false,
        'currency' => false,
        'amount' => false,
        'approved_at' => true,
        'supplier_status' => true,
        'status' => false,
        'inserted' => false,
        'last_updated' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'merchant_id' => 'merchantID',
        'supplier_name' => 'supplierName',
        'supplier_mandate_id' => 'supplierMandateID',
        'supplier_bank_account_id' => 'supplierBankAccountID',
        'supplier_customer_id' => 'supplierCustomerID',
        'customer_first_name' => 'customerFirstName',
        'customer_last_name' => 'customerLastName',
        'customer_country_code' => 'customerCountryCode',
        'customer_country_name' => 'customerCountryName',
        'customer_city' => 'customerCity',
        'customer_email_address' => 'customerEmailAddress',
        'customer_iban' => 'customerIban',
        'customer_account_number' => 'customerAccountNumber',
        'customer_sort_code' => 'customerSortCode',
        'reference' => 'reference',
        'is_recurring' => 'isRecurring',
        'currency' => 'currency',
        'amount' => 'amount',
        'approved_at' => 'approvedAt',
        'supplier_status' => 'supplierStatus',
        'status' => 'status',
        'inserted' => 'inserted',
        'last_updated' => 'lastUpdated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'merchant_id' => 'setMerchantId',
        'supplier_name' => 'setSupplierName',
        'supplier_mandate_id' => 'setSupplierMandateId',
        'supplier_bank_account_id' => 'setSupplierBankAccountId',
        'supplier_customer_id' => 'setSupplierCustomerId',
        'customer_first_name' => 'setCustomerFirstName',
        'customer_last_name' => 'setCustomerLastName',
        'customer_country_code' => 'setCustomerCountryCode',
        'customer_country_name' => 'setCustomerCountryName',
        'customer_city' => 'setCustomerCity',
        'customer_email_address' => 'setCustomerEmailAddress',
        'customer_iban' => 'setCustomerIban',
        'customer_account_number' => 'setCustomerAccountNumber',
        'customer_sort_code' => 'setCustomerSortCode',
        'reference' => 'setReference',
        'is_recurring' => 'setIsRecurring',
        'currency' => 'setCurrency',
        'amount' => 'setAmount',
        'approved_at' => 'setApprovedAt',
        'supplier_status' => 'setSupplierStatus',
        'status' => 'setStatus',
        'inserted' => 'setInserted',
        'last_updated' => 'setLastUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'merchant_id' => 'getMerchantId',
        'supplier_name' => 'getSupplierName',
        'supplier_mandate_id' => 'getSupplierMandateId',
        'supplier_bank_account_id' => 'getSupplierBankAccountId',
        'supplier_customer_id' => 'getSupplierCustomerId',
        'customer_first_name' => 'getCustomerFirstName',
        'customer_last_name' => 'getCustomerLastName',
        'customer_country_code' => 'getCustomerCountryCode',
        'customer_country_name' => 'getCustomerCountryName',
        'customer_city' => 'getCustomerCity',
        'customer_email_address' => 'getCustomerEmailAddress',
        'customer_iban' => 'getCustomerIban',
        'customer_account_number' => 'getCustomerAccountNumber',
        'customer_sort_code' => 'getCustomerSortCode',
        'reference' => 'getReference',
        'is_recurring' => 'getIsRecurring',
        'currency' => 'getCurrency',
        'amount' => 'getAmount',
        'approved_at' => 'getApprovedAt',
        'supplier_status' => 'getSupplierStatus',
        'status' => 'getStatus',
        'inserted' => 'getInserted',
        'last_updated' => 'getLastUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SUPPLIER_NAME_NONE = 'None';
    public const SUPPLIER_NAME_CYBER_SOURCE = 'CyberSource';
    public const SUPPLIER_NAME_CHECKOUT = 'Checkout';
    public const SUPPLIER_NAME_STRIPE = 'Stripe';
    public const SUPPLIER_NAME_MODULR = 'Modulr';
    public const SUPPLIER_NAME_PLAID = 'Plaid';
    public const SUPPLIER_NAME_YAPILY = 'Yapily';
    public const SUPPLIER_NAME_NOFRIXION = 'Nofrixion';
    public const SUPPLIER_NAME_BITCOIN = 'Bitcoin';
    public const SUPPLIER_NAME_BITCOIN_TESTNET = 'BitcoinTestnet';
    public const SUPPLIER_NAME_BANKING_CIRCLE = 'BankingCircle';
    public const SUPPLIER_NAME_BANKING_CIRCLE_AGENCY = 'BankingCircleAgency';
    public const SUPPLIER_NAME_SIMULATOR = 'Simulator';
    public const SUPPLIER_NAME_LIGHTNING = 'Lightning';
    public const SUPPLIER_NAME_LIGHTNING_TESTNET = 'LightningTestnet';
    public const SUPPLIER_NAME_BANKING_CIRCLE_DIRECT_DEBIT = 'BankingCircleDirectDebit';
    public const SUPPLIER_NAME_TRIBE = 'Tribe';
    public const CURRENCY_NONE = 'NONE';
    public const CURRENCY_GBP = 'GBP';
    public const CURRENCY_EUR = 'EUR';
    public const CURRENCY_BTC = 'BTC';
    public const STATUS_UNKNOWN = 'Unknown';
    public const STATUS_PENDING = 'Pending';
    public const STATUS_ACTIVE = 'Active';
    public const STATUS_EXPIRED = 'Expired';
    public const STATUS_FAILED = 'Failed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupplierNameAllowableValues()
    {
        return [
            self::SUPPLIER_NAME_NONE,
            self::SUPPLIER_NAME_CYBER_SOURCE,
            self::SUPPLIER_NAME_CHECKOUT,
            self::SUPPLIER_NAME_STRIPE,
            self::SUPPLIER_NAME_MODULR,
            self::SUPPLIER_NAME_PLAID,
            self::SUPPLIER_NAME_YAPILY,
            self::SUPPLIER_NAME_NOFRIXION,
            self::SUPPLIER_NAME_BITCOIN,
            self::SUPPLIER_NAME_BITCOIN_TESTNET,
            self::SUPPLIER_NAME_BANKING_CIRCLE,
            self::SUPPLIER_NAME_BANKING_CIRCLE_AGENCY,
            self::SUPPLIER_NAME_SIMULATOR,
            self::SUPPLIER_NAME_LIGHTNING,
            self::SUPPLIER_NAME_LIGHTNING_TESTNET,
            self::SUPPLIER_NAME_BANKING_CIRCLE_DIRECT_DEBIT,
            self::SUPPLIER_NAME_TRIBE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_NONE,
            self::CURRENCY_GBP,
            self::CURRENCY_EUR,
            self::CURRENCY_BTC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNKNOWN,
            self::STATUS_PENDING,
            self::STATUS_ACTIVE,
            self::STATUS_EXPIRED,
            self::STATUS_FAILED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('supplier_name', $data ?? [], null);
        $this->setIfExists('supplier_mandate_id', $data ?? [], null);
        $this->setIfExists('supplier_bank_account_id', $data ?? [], null);
        $this->setIfExists('supplier_customer_id', $data ?? [], null);
        $this->setIfExists('customer_first_name', $data ?? [], null);
        $this->setIfExists('customer_last_name', $data ?? [], null);
        $this->setIfExists('customer_country_code', $data ?? [], null);
        $this->setIfExists('customer_country_name', $data ?? [], null);
        $this->setIfExists('customer_city', $data ?? [], null);
        $this->setIfExists('customer_email_address', $data ?? [], null);
        $this->setIfExists('customer_iban', $data ?? [], null);
        $this->setIfExists('customer_account_number', $data ?? [], null);
        $this->setIfExists('customer_sort_code', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('is_recurring', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('approved_at', $data ?? [], null);
        $this->setIfExists('supplier_status', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSupplierNameAllowableValues();
        if (!is_null($this->container['supplier_name']) && !in_array($this->container['supplier_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'supplier_name', must be one of '%s'",
                $this->container['supplier_name'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Internal ID of the mandate.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id Internal ID of this mandate's merchant.
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets supplier_name
     *
     * @return string|null
     */
    public function getSupplierName()
    {
        return $this->container['supplier_name'];
    }

    /**
     * Sets supplier_name
     *
     * @param string|null $supplier_name Name of the supplier used to create this mandate.
     *
     * @return self
     */
    public function setSupplierName($supplier_name)
    {
        if (is_null($supplier_name)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getSupplierNameAllowableValues();
        if (!is_null($supplier_name) && !in_array($supplier_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'supplier_name', must be one of '%s'",
                    $supplier_name,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['supplier_name'] = $supplier_name;

        return $this;
    }

    /**
     * Gets supplier_mandate_id
     *
     * @return string|null
     */
    public function getSupplierMandateId()
    {
        return $this->container['supplier_mandate_id'];
    }

    /**
     * Sets supplier_mandate_id
     *
     * @param string|null $supplier_mandate_id ID that the supplier assigned to this mandate.
     *
     * @return self
     */
    public function setSupplierMandateId($supplier_mandate_id)
    {
        if (is_null($supplier_mandate_id)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_mandate_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_mandate_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplier_mandate_id'] = $supplier_mandate_id;

        return $this;
    }

    /**
     * Gets supplier_bank_account_id
     *
     * @return string|null
     */
    public function getSupplierBankAccountId()
    {
        return $this->container['supplier_bank_account_id'];
    }

    /**
     * Sets supplier_bank_account_id
     *
     * @param string|null $supplier_bank_account_id ID that the supplier assigned to this mandate's  bank account.
     *
     * @return self
     */
    public function setSupplierBankAccountId($supplier_bank_account_id)
    {
        if (is_null($supplier_bank_account_id)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_bank_account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_bank_account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplier_bank_account_id'] = $supplier_bank_account_id;

        return $this;
    }

    /**
     * Gets supplier_customer_id
     *
     * @return string|null
     */
    public function getSupplierCustomerId()
    {
        return $this->container['supplier_customer_id'];
    }

    /**
     * Sets supplier_customer_id
     *
     * @param string|null $supplier_customer_id ID that the supplier assigned to this mandate's  customer.
     *
     * @return self
     */
    public function setSupplierCustomerId($supplier_customer_id)
    {
        if (is_null($supplier_customer_id)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_customer_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_customer_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplier_customer_id'] = $supplier_customer_id;

        return $this;
    }

    /**
     * Gets customer_first_name
     *
     * @return string|null
     */
    public function getCustomerFirstName()
    {
        return $this->container['customer_first_name'];
    }

    /**
     * Sets customer_first_name
     *
     * @param string|null $customer_first_name Customer's first name.
     *
     * @return self
     */
    public function setCustomerFirstName($customer_first_name)
    {
        if (is_null($customer_first_name)) {
            array_push($this->openAPINullablesSetToNull, 'customer_first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_first_name'] = $customer_first_name;

        return $this;
    }

    /**
     * Gets customer_last_name
     *
     * @return string|null
     */
    public function getCustomerLastName()
    {
        return $this->container['customer_last_name'];
    }

    /**
     * Sets customer_last_name
     *
     * @param string|null $customer_last_name Customer's last name.
     *
     * @return self
     */
    public function setCustomerLastName($customer_last_name)
    {
        if (is_null($customer_last_name)) {
            array_push($this->openAPINullablesSetToNull, 'customer_last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_last_name'] = $customer_last_name;

        return $this;
    }

    /**
     * Gets customer_country_code
     *
     * @return string|null
     */
    public function getCustomerCountryCode()
    {
        return $this->container['customer_country_code'];
    }

    /**
     * Sets customer_country_code
     *
     * @param string|null $customer_country_code Customer's country of residence code.
     *
     * @return self
     */
    public function setCustomerCountryCode($customer_country_code)
    {
        if (is_null($customer_country_code)) {
            array_push($this->openAPINullablesSetToNull, 'customer_country_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_country_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_country_code'] = $customer_country_code;

        return $this;
    }

    /**
     * Gets customer_country_name
     *
     * @return string|null
     */
    public function getCustomerCountryName()
    {
        return $this->container['customer_country_name'];
    }

    /**
     * Sets customer_country_name
     *
     * @param string|null $customer_country_name Customer's country of residence.
     *
     * @return self
     */
    public function setCustomerCountryName($customer_country_name)
    {
        if (is_null($customer_country_name)) {
            array_push($this->openAPINullablesSetToNull, 'customer_country_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_country_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_country_name'] = $customer_country_name;

        return $this;
    }

    /**
     * Gets customer_city
     *
     * @return string|null
     */
    public function getCustomerCity()
    {
        return $this->container['customer_city'];
    }

    /**
     * Sets customer_city
     *
     * @param string|null $customer_city Customer's city of residence.
     *
     * @return self
     */
    public function setCustomerCity($customer_city)
    {
        if (is_null($customer_city)) {
            array_push($this->openAPINullablesSetToNull, 'customer_city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_city'] = $customer_city;

        return $this;
    }

    /**
     * Gets customer_email_address
     *
     * @return string|null
     */
    public function getCustomerEmailAddress()
    {
        return $this->container['customer_email_address'];
    }

    /**
     * Sets customer_email_address
     *
     * @param string|null $customer_email_address Customer's email address.
     *
     * @return self
     */
    public function setCustomerEmailAddress($customer_email_address)
    {
        if (is_null($customer_email_address)) {
            array_push($this->openAPINullablesSetToNull, 'customer_email_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_email_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_email_address'] = $customer_email_address;

        return $this;
    }

    /**
     * Gets customer_iban
     *
     * @return string|null
     */
    public function getCustomerIban()
    {
        return $this->container['customer_iban'];
    }

    /**
     * Sets customer_iban
     *
     * @param string|null $customer_iban Customer's IBAN in case of EUR account.
     *
     * @return self
     */
    public function setCustomerIban($customer_iban)
    {
        if (is_null($customer_iban)) {
            array_push($this->openAPINullablesSetToNull, 'customer_iban');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_iban', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_iban'] = $customer_iban;

        return $this;
    }

    /**
     * Gets customer_account_number
     *
     * @return int|null
     */
    public function getCustomerAccountNumber()
    {
        return $this->container['customer_account_number'];
    }

    /**
     * Sets customer_account_number
     *
     * @param int|null $customer_account_number Customer's account number in case of GBP account.
     *
     * @return self
     */
    public function setCustomerAccountNumber($customer_account_number)
    {
        if (is_null($customer_account_number)) {
            array_push($this->openAPINullablesSetToNull, 'customer_account_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_account_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_account_number'] = $customer_account_number;

        return $this;
    }

    /**
     * Gets customer_sort_code
     *
     * @return int|null
     */
    public function getCustomerSortCode()
    {
        return $this->container['customer_sort_code'];
    }

    /**
     * Sets customer_sort_code
     *
     * @param int|null $customer_sort_code Customer's sort code in case of GBP account.
     *
     * @return self
     */
    public function setCustomerSortCode($customer_sort_code)
    {
        if (is_null($customer_sort_code)) {
            array_push($this->openAPINullablesSetToNull, 'customer_sort_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_sort_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_sort_code'] = $customer_sort_code;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Reference assigned to this mandate.
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            array_push($this->openAPINullablesSetToNull, 'reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets is_recurring
     *
     * @return bool|null
     */
    public function getIsRecurring()
    {
        return $this->container['is_recurring'];
    }

    /**
     * Sets is_recurring
     *
     * @param bool|null $is_recurring Whether this mandate is single-use or recurring.
     *
     * @return self
     */
    public function setIsRecurring($is_recurring)
    {
        if (is_null($is_recurring)) {
            throw new \InvalidArgumentException('non-nullable is_recurring cannot be null');
        }
        $this->container['is_recurring'] = $is_recurring;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency of this mandate.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount Amount of this mandate.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets approved_at
     *
     * @return \DateTime|null
     */
    public function getApprovedAt()
    {
        return $this->container['approved_at'];
    }

    /**
     * Sets approved_at
     *
     * @param \DateTime|null $approved_at Date at which the supplier approved this mandate.
     *
     * @return self
     */
    public function setApprovedAt($approved_at)
    {
        if (is_null($approved_at)) {
            array_push($this->openAPINullablesSetToNull, 'approved_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approved_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['approved_at'] = $approved_at;

        return $this;
    }

    /**
     * Gets supplier_status
     *
     * @return string|null
     */
    public function getSupplierStatus()
    {
        return $this->container['supplier_status'];
    }

    /**
     * Sets supplier_status
     *
     * @param string|null $supplier_status Last status that the supplier reported for this mandate.
     *
     * @return self
     */
    public function setSupplierStatus($supplier_status)
    {
        if (is_null($supplier_status)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplier_status'] = $supplier_status;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status General status of this mandate.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted The timestamp this mandate was created at.
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated The timestamp this mandate was last updated at.
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


