<?php
/**
 * NoFrixionMoneyMoovModelsBeneficiary
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionMoneyMoovModelsBeneficiary Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionMoneyMoovModelsBeneficiary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.MoneyMoov.Models.Beneficiary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'merchant_id' => 'string',
        'name' => 'string',
        'currency' => 'string',
        'destination' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsCounterparty',
        'approval_callback_url' => 'string',
        'is_enabled' => 'bool',
        'authorised_by' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserMinimal[]',
        'can_authorise' => 'bool',
        'can_update' => 'bool',
        'has_current_user_authorised' => 'bool',
        'authorisers_required_count' => 'int',
        'authorisers_completed_count' => 'int',
        'created_by_email_address' => 'string',
        'nonce' => 'string',
        'inserted' => '\DateTime',
        'last_updated' => '\DateTime',
        'last_authorised' => '\DateTime',
        'created_by' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUser',
        'beneficiary_events' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryEvent[]',
        'source_accounts' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'merchant_id' => 'uuid',
        'name' => null,
        'currency' => null,
        'destination' => null,
        'approval_callback_url' => null,
        'is_enabled' => null,
        'authorised_by' => null,
        'can_authorise' => null,
        'can_update' => null,
        'has_current_user_authorised' => null,
        'authorisers_required_count' => 'int32',
        'authorisers_completed_count' => 'int32',
        'created_by_email_address' => null,
        'nonce' => null,
        'inserted' => 'date-time',
        'last_updated' => 'date-time',
        'last_authorised' => 'date-time',
        'created_by' => null,
        'beneficiary_events' => null,
        'source_accounts' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'merchant_id' => false,
        'name' => false,
        'currency' => false,
        'destination' => false,
        'approval_callback_url' => true,
        'is_enabled' => false,
        'authorised_by' => true,
        'can_authorise' => false,
        'can_update' => false,
        'has_current_user_authorised' => false,
        'authorisers_required_count' => false,
        'authorisers_completed_count' => false,
        'created_by_email_address' => true,
        'nonce' => true,
        'inserted' => false,
        'last_updated' => false,
        'last_authorised' => true,
        'created_by' => false,
        'beneficiary_events' => true,
        'source_accounts' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'merchant_id' => 'merchantID',
        'name' => 'name',
        'currency' => 'currency',
        'destination' => 'destination',
        'approval_callback_url' => 'approvalCallbackUrl',
        'is_enabled' => 'isEnabled',
        'authorised_by' => 'authorisedBy',
        'can_authorise' => 'canAuthorise',
        'can_update' => 'canUpdate',
        'has_current_user_authorised' => 'hasCurrentUserAuthorised',
        'authorisers_required_count' => 'authorisersRequiredCount',
        'authorisers_completed_count' => 'authorisersCompletedCount',
        'created_by_email_address' => 'createdByEmailAddress',
        'nonce' => 'nonce',
        'inserted' => 'inserted',
        'last_updated' => 'lastUpdated',
        'last_authorised' => 'lastAuthorised',
        'created_by' => 'createdBy',
        'beneficiary_events' => 'beneficiaryEvents',
        'source_accounts' => 'sourceAccounts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'merchant_id' => 'setMerchantId',
        'name' => 'setName',
        'currency' => 'setCurrency',
        'destination' => 'setDestination',
        'approval_callback_url' => 'setApprovalCallbackUrl',
        'is_enabled' => 'setIsEnabled',
        'authorised_by' => 'setAuthorisedBy',
        'can_authorise' => 'setCanAuthorise',
        'can_update' => 'setCanUpdate',
        'has_current_user_authorised' => 'setHasCurrentUserAuthorised',
        'authorisers_required_count' => 'setAuthorisersRequiredCount',
        'authorisers_completed_count' => 'setAuthorisersCompletedCount',
        'created_by_email_address' => 'setCreatedByEmailAddress',
        'nonce' => 'setNonce',
        'inserted' => 'setInserted',
        'last_updated' => 'setLastUpdated',
        'last_authorised' => 'setLastAuthorised',
        'created_by' => 'setCreatedBy',
        'beneficiary_events' => 'setBeneficiaryEvents',
        'source_accounts' => 'setSourceAccounts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'merchant_id' => 'getMerchantId',
        'name' => 'getName',
        'currency' => 'getCurrency',
        'destination' => 'getDestination',
        'approval_callback_url' => 'getApprovalCallbackUrl',
        'is_enabled' => 'getIsEnabled',
        'authorised_by' => 'getAuthorisedBy',
        'can_authorise' => 'getCanAuthorise',
        'can_update' => 'getCanUpdate',
        'has_current_user_authorised' => 'getHasCurrentUserAuthorised',
        'authorisers_required_count' => 'getAuthorisersRequiredCount',
        'authorisers_completed_count' => 'getAuthorisersCompletedCount',
        'created_by_email_address' => 'getCreatedByEmailAddress',
        'nonce' => 'getNonce',
        'inserted' => 'getInserted',
        'last_updated' => 'getLastUpdated',
        'last_authorised' => 'getLastAuthorised',
        'created_by' => 'getCreatedBy',
        'beneficiary_events' => 'getBeneficiaryEvents',
        'source_accounts' => 'getSourceAccounts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CURRENCY_NONE = 'NONE';
    public const CURRENCY_GBP = 'GBP';
    public const CURRENCY_EUR = 'EUR';
    public const CURRENCY_BTC = 'BTC';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_NONE,
            self::CURRENCY_GBP,
            self::CURRENCY_EUR,
            self::CURRENCY_BTC,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('destination', $data ?? [], null);
        $this->setIfExists('approval_callback_url', $data ?? [], null);
        $this->setIfExists('is_enabled', $data ?? [], null);
        $this->setIfExists('authorised_by', $data ?? [], null);
        $this->setIfExists('can_authorise', $data ?? [], null);
        $this->setIfExists('can_update', $data ?? [], null);
        $this->setIfExists('has_current_user_authorised', $data ?? [], null);
        $this->setIfExists('authorisers_required_count', $data ?? [], null);
        $this->setIfExists('authorisers_completed_count', $data ?? [], null);
        $this->setIfExists('created_by_email_address', $data ?? [], null);
        $this->setIfExists('nonce', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('last_authorised', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('beneficiary_events', $data ?? [], null);
        $this->setIfExists('source_accounts', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id Gets or Sets the merchant id.
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The descriptive name for the beneficiary.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling NoFrixionMoneyMoovModelsBeneficiary., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Gets or Sets the currency.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsCounterparty|null
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsCounterparty|null $destination destination
     *
     * @return self
     */
    public function setDestination($destination)
    {
        if (is_null($destination)) {
            throw new \InvalidArgumentException('non-nullable destination cannot be null');
        }
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets approval_callback_url
     *
     * @return string|null
     */
    public function getApprovalCallbackUrl()
    {
        return $this->container['approval_callback_url'];
    }

    /**
     * Sets approval_callback_url
     *
     * @param string|null $approval_callback_url approval_callback_url
     *
     * @return self
     */
    public function setApprovalCallbackUrl($approval_callback_url)
    {
        if (is_null($approval_callback_url)) {
            array_push($this->openAPINullablesSetToNull, 'approval_callback_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approval_callback_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['approval_callback_url'] = $approval_callback_url;

        return $this;
    }

    /**
     * Gets is_enabled
     *
     * @return bool|null
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool|null $is_enabled is_enabled
     *
     * @return self
     */
    public function setIsEnabled($is_enabled)
    {
        if (is_null($is_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_enabled cannot be null');
        }
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets authorised_by
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserMinimal[]|null
     */
    public function getAuthorisedBy()
    {
        return $this->container['authorised_by'];
    }

    /**
     * Sets authorised_by
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserMinimal[]|null $authorised_by A list of users who have successfully authorised the latest version of the beneficiary.
     *
     * @return self
     */
    public function setAuthorisedBy($authorised_by)
    {
        if (is_null($authorised_by)) {
            array_push($this->openAPINullablesSetToNull, 'authorised_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorised_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authorised_by'] = $authorised_by;

        return $this;
    }

    /**
     * Gets can_authorise
     *
     * @return bool|null
     */
    public function getCanAuthorise()
    {
        return $this->container['can_authorise'];
    }

    /**
     * Sets can_authorise
     *
     * @param bool|null $can_authorise True if the beneficiary can be authorised by the user who loaded it.
     *
     * @return self
     */
    public function setCanAuthorise($can_authorise)
    {
        if (is_null($can_authorise)) {
            throw new \InvalidArgumentException('non-nullable can_authorise cannot be null');
        }
        $this->container['can_authorise'] = $can_authorise;

        return $this;
    }

    /**
     * Gets can_update
     *
     * @return bool|null
     */
    public function getCanUpdate()
    {
        return $this->container['can_update'];
    }

    /**
     * Sets can_update
     *
     * @param bool|null $can_update True if the beneficiary can be updated by the user who loaded it.
     *
     * @return self
     */
    public function setCanUpdate($can_update)
    {
        if (is_null($can_update)) {
            throw new \InvalidArgumentException('non-nullable can_update cannot be null');
        }
        $this->container['can_update'] = $can_update;

        return $this;
    }

    /**
     * Gets has_current_user_authorised
     *
     * @return bool|null
     */
    public function getHasCurrentUserAuthorised()
    {
        return $this->container['has_current_user_authorised'];
    }

    /**
     * Sets has_current_user_authorised
     *
     * @param bool|null $has_current_user_authorised True if the beneficiary was loaded for a user and that user has already authorised the latest version of the beneficiary.
     *
     * @return self
     */
    public function setHasCurrentUserAuthorised($has_current_user_authorised)
    {
        if (is_null($has_current_user_authorised)) {
            throw new \InvalidArgumentException('non-nullable has_current_user_authorised cannot be null');
        }
        $this->container['has_current_user_authorised'] = $has_current_user_authorised;

        return $this;
    }

    /**
     * Gets authorisers_required_count
     *
     * @return int|null
     */
    public function getAuthorisersRequiredCount()
    {
        return $this->container['authorisers_required_count'];
    }

    /**
     * Sets authorisers_required_count
     *
     * @param int|null $authorisers_required_count The number of authorisers required for this beneficiary. Is determined by business settings  on the source account and/or merchant.
     *
     * @return self
     */
    public function setAuthorisersRequiredCount($authorisers_required_count)
    {
        if (is_null($authorisers_required_count)) {
            throw new \InvalidArgumentException('non-nullable authorisers_required_count cannot be null');
        }
        $this->container['authorisers_required_count'] = $authorisers_required_count;

        return $this;
    }

    /**
     * Gets authorisers_completed_count
     *
     * @return int|null
     */
    public function getAuthorisersCompletedCount()
    {
        return $this->container['authorisers_completed_count'];
    }

    /**
     * Sets authorisers_completed_count
     *
     * @param int|null $authorisers_completed_count The number of distinct authorisers that have authorised the beneficiary.
     *
     * @return self
     */
    public function setAuthorisersCompletedCount($authorisers_completed_count)
    {
        if (is_null($authorisers_completed_count)) {
            throw new \InvalidArgumentException('non-nullable authorisers_completed_count cannot be null');
        }
        $this->container['authorisers_completed_count'] = $authorisers_completed_count;

        return $this;
    }

    /**
     * Gets created_by_email_address
     *
     * @return string|null
     */
    public function getCreatedByEmailAddress()
    {
        return $this->container['created_by_email_address'];
    }

    /**
     * Sets created_by_email_address
     *
     * @param string|null $created_by_email_address created_by_email_address
     *
     * @return self
     */
    public function setCreatedByEmailAddress($created_by_email_address)
    {
        if (is_null($created_by_email_address)) {
            array_push($this->openAPINullablesSetToNull, 'created_by_email_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_by_email_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_by_email_address'] = $created_by_email_address;

        return $this;
    }

    /**
     * Gets nonce
     *
     * @return string|null
     */
    public function getNonce()
    {
        return $this->container['nonce'];
    }

    /**
     * Sets nonce
     *
     * @param string|null $nonce nonce
     *
     * @return self
     */
    public function setNonce($nonce)
    {
        if (is_null($nonce)) {
            array_push($this->openAPINullablesSetToNull, 'nonce');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nonce', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nonce'] = $nonce;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted inserted
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_authorised
     *
     * @return \DateTime|null
     */
    public function getLastAuthorised()
    {
        return $this->container['last_authorised'];
    }

    /**
     * Sets last_authorised
     *
     * @param \DateTime|null $last_authorised last_authorised
     *
     * @return self
     */
    public function setLastAuthorised($last_authorised)
    {
        if (is_null($last_authorised)) {
            array_push($this->openAPINullablesSetToNull, 'last_authorised');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_authorised', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_authorised'] = $last_authorised;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUser|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUser|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets beneficiary_events
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryEvent[]|null
     */
    public function getBeneficiaryEvents()
    {
        return $this->container['beneficiary_events'];
    }

    /**
     * Sets beneficiary_events
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsBeneficiaryEvent[]|null $beneficiary_events beneficiary_events
     *
     * @return self
     */
    public function setBeneficiaryEvents($beneficiary_events)
    {
        if (is_null($beneficiary_events)) {
            array_push($this->openAPINullablesSetToNull, 'beneficiary_events');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('beneficiary_events', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['beneficiary_events'] = $beneficiary_events;

        return $this;
    }

    /**
     * Gets source_accounts
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[]|null
     */
    public function getSourceAccounts()
    {
        return $this->container['source_accounts'];
    }

    /**
     * Sets source_accounts
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[]|null $source_accounts source_accounts
     *
     * @return self
     */
    public function setSourceAccounts($source_accounts)
    {
        if (is_null($source_accounts)) {
            array_push($this->openAPINullablesSetToNull, 'source_accounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source_accounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source_accounts'] = $source_accounts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


