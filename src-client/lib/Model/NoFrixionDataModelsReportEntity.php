<?php
/**
 * NoFrixionDataModelsReportEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionDataModelsReportEntity Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionDataModelsReportEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.DataModels.ReportEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'merchant_id' => 'string',
        'created_by_user_id' => 'string',
        'report_type' => 'string',
        'report_name' => 'string',
        'description' => 'string',
        'inserted' => '\DateTime',
        'last_updated' => '\DateTime',
        'cron_expression' => 'string',
        'status' => 'string',
        'last_completed_at' => '\DateTime',
        'statement_number' => 'int',
        'is_disabled' => 'bool',
        'error' => 'string',
        'merchant' => '\Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity',
        'created_by_user' => '\Nofrixion\Client\Model\NoFrixionDataModelsUserEntity',
        'report_accounts' => '\Nofrixion\Client\Model\NoFrixionDataModelsReportAccountEntity[]',
        'report_results' => '\Nofrixion\Client\Model\NoFrixionDataModelsReportResultEntity[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'merchant_id' => 'uuid',
        'created_by_user_id' => 'uuid',
        'report_type' => null,
        'report_name' => null,
        'description' => null,
        'inserted' => 'date-time',
        'last_updated' => 'date-time',
        'cron_expression' => null,
        'status' => null,
        'last_completed_at' => 'date-time',
        'statement_number' => 'int32',
        'is_disabled' => null,
        'error' => null,
        'merchant' => null,
        'created_by_user' => null,
        'report_accounts' => null,
        'report_results' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'merchant_id' => false,
        'created_by_user_id' => true,
        'report_type' => false,
        'report_name' => true,
        'description' => true,
        'inserted' => false,
        'last_updated' => false,
        'cron_expression' => true,
        'status' => false,
        'last_completed_at' => false,
        'statement_number' => false,
        'is_disabled' => false,
        'error' => true,
        'merchant' => false,
        'created_by_user' => false,
        'report_accounts' => true,
        'report_results' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'merchant_id' => 'merchantID',
        'created_by_user_id' => 'createdByUserID',
        'report_type' => 'reportType',
        'report_name' => 'reportName',
        'description' => 'description',
        'inserted' => 'inserted',
        'last_updated' => 'lastUpdated',
        'cron_expression' => 'cronExpression',
        'status' => 'status',
        'last_completed_at' => 'lastCompletedAt',
        'statement_number' => 'statementNumber',
        'is_disabled' => 'isDisabled',
        'error' => 'error',
        'merchant' => 'merchant',
        'created_by_user' => 'createdByUser',
        'report_accounts' => 'reportAccounts',
        'report_results' => 'reportResults'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'merchant_id' => 'setMerchantId',
        'created_by_user_id' => 'setCreatedByUserId',
        'report_type' => 'setReportType',
        'report_name' => 'setReportName',
        'description' => 'setDescription',
        'inserted' => 'setInserted',
        'last_updated' => 'setLastUpdated',
        'cron_expression' => 'setCronExpression',
        'status' => 'setStatus',
        'last_completed_at' => 'setLastCompletedAt',
        'statement_number' => 'setStatementNumber',
        'is_disabled' => 'setIsDisabled',
        'error' => 'setError',
        'merchant' => 'setMerchant',
        'created_by_user' => 'setCreatedByUser',
        'report_accounts' => 'setReportAccounts',
        'report_results' => 'setReportResults'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'merchant_id' => 'getMerchantId',
        'created_by_user_id' => 'getCreatedByUserId',
        'report_type' => 'getReportType',
        'report_name' => 'getReportName',
        'description' => 'getDescription',
        'inserted' => 'getInserted',
        'last_updated' => 'getLastUpdated',
        'cron_expression' => 'getCronExpression',
        'status' => 'getStatus',
        'last_completed_at' => 'getLastCompletedAt',
        'statement_number' => 'getStatementNumber',
        'is_disabled' => 'getIsDisabled',
        'error' => 'getError',
        'merchant' => 'getMerchant',
        'created_by_user' => 'getCreatedByUser',
        'report_accounts' => 'getReportAccounts',
        'report_results' => 'getReportResults'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const REPORT_TYPE_UNKNOWN = 'Unknown';
    public const REPORT_TYPE_SWIFT_CUSTOMER_STATEMENT = 'SwiftCustomerStatement';
    public const REPORT_TYPE_CUSTOMER_ACTIVITY = 'CustomerActivity';
    public const REPORT_TYPE_SAFE_GUARDING_RECONCILIATION = 'SafeGuardingReconciliation';
    public const REPORT_TYPE_MERCHANT_ACCOUNTS_BALANCE = 'MerchantAccountsBalance';
    public const REPORT_TYPE_MERCHANT_ACCOUNTS_TRANSACTION = 'MerchantAccountsTransaction';
    public const REPORT_TYPE_VISION_BLUE_TRANSACTION = 'VisionBlueTransaction';
    public const REPORT_TYPE_MERCHANT_SAFE_GUARDING_RECONCILIATION = 'MerchantSafeGuardingReconciliation';
    public const STATUS_NONE = 'None';
    public const STATUS_COMPLETED = 'Completed';
    public const STATUS_IN_PROGRESS = 'InProgress';
    public const STATUS_ERROR = 'Error';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReportTypeAllowableValues()
    {
        return [
            self::REPORT_TYPE_UNKNOWN,
            self::REPORT_TYPE_SWIFT_CUSTOMER_STATEMENT,
            self::REPORT_TYPE_CUSTOMER_ACTIVITY,
            self::REPORT_TYPE_SAFE_GUARDING_RECONCILIATION,
            self::REPORT_TYPE_MERCHANT_ACCOUNTS_BALANCE,
            self::REPORT_TYPE_MERCHANT_ACCOUNTS_TRANSACTION,
            self::REPORT_TYPE_VISION_BLUE_TRANSACTION,
            self::REPORT_TYPE_MERCHANT_SAFE_GUARDING_RECONCILIATION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_NONE,
            self::STATUS_COMPLETED,
            self::STATUS_IN_PROGRESS,
            self::STATUS_ERROR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('created_by_user_id', $data ?? [], null);
        $this->setIfExists('report_type', $data ?? [], null);
        $this->setIfExists('report_name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('cron_expression', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('last_completed_at', $data ?? [], null);
        $this->setIfExists('statement_number', $data ?? [], null);
        $this->setIfExists('is_disabled', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('merchant', $data ?? [], null);
        $this->setIfExists('created_by_user', $data ?? [], null);
        $this->setIfExists('report_accounts', $data ?? [], null);
        $this->setIfExists('report_results', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getReportTypeAllowableValues();
        if (!is_null($this->container['report_type']) && !in_array($this->container['report_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'report_type', must be one of '%s'",
                $this->container['report_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets created_by_user_id
     *
     * @return string|null
     */
    public function getCreatedByUserId()
    {
        return $this->container['created_by_user_id'];
    }

    /**
     * Sets created_by_user_id
     *
     * @param string|null $created_by_user_id created_by_user_id
     *
     * @return self
     */
    public function setCreatedByUserId($created_by_user_id)
    {
        if (is_null($created_by_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'created_by_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_by_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_by_user_id'] = $created_by_user_id;

        return $this;
    }

    /**
     * Gets report_type
     *
     * @return string|null
     */
    public function getReportType()
    {
        return $this->container['report_type'];
    }

    /**
     * Sets report_type
     *
     * @param string|null $report_type report_type
     *
     * @return self
     */
    public function setReportType($report_type)
    {
        if (is_null($report_type)) {
            throw new \InvalidArgumentException('non-nullable report_type cannot be null');
        }
        $allowedValues = $this->getReportTypeAllowableValues();
        if (!in_array($report_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'report_type', must be one of '%s'",
                    $report_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['report_type'] = $report_type;

        return $this;
    }

    /**
     * Gets report_name
     *
     * @return string|null
     */
    public function getReportName()
    {
        return $this->container['report_name'];
    }

    /**
     * Sets report_name
     *
     * @param string|null $report_name report_name
     *
     * @return self
     */
    public function setReportName($report_name)
    {
        if (is_null($report_name)) {
            array_push($this->openAPINullablesSetToNull, 'report_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['report_name'] = $report_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted inserted
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets cron_expression
     *
     * @return string|null
     */
    public function getCronExpression()
    {
        return $this->container['cron_expression'];
    }

    /**
     * Sets cron_expression
     *
     * @param string|null $cron_expression cron_expression
     *
     * @return self
     */
    public function setCronExpression($cron_expression)
    {
        if (is_null($cron_expression)) {
            array_push($this->openAPINullablesSetToNull, 'cron_expression');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cron_expression', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cron_expression'] = $cron_expression;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets last_completed_at
     *
     * @return \DateTime|null
     */
    public function getLastCompletedAt()
    {
        return $this->container['last_completed_at'];
    }

    /**
     * Sets last_completed_at
     *
     * @param \DateTime|null $last_completed_at last_completed_at
     *
     * @return self
     */
    public function setLastCompletedAt($last_completed_at)
    {
        if (is_null($last_completed_at)) {
            throw new \InvalidArgumentException('non-nullable last_completed_at cannot be null');
        }
        $this->container['last_completed_at'] = $last_completed_at;

        return $this;
    }

    /**
     * Gets statement_number
     *
     * @return int|null
     */
    public function getStatementNumber()
    {
        return $this->container['statement_number'];
    }

    /**
     * Sets statement_number
     *
     * @param int|null $statement_number statement_number
     *
     * @return self
     */
    public function setStatementNumber($statement_number)
    {
        if (is_null($statement_number)) {
            throw new \InvalidArgumentException('non-nullable statement_number cannot be null');
        }
        $this->container['statement_number'] = $statement_number;

        return $this;
    }

    /**
     * Gets is_disabled
     *
     * @return bool|null
     */
    public function getIsDisabled()
    {
        return $this->container['is_disabled'];
    }

    /**
     * Sets is_disabled
     *
     * @param bool|null $is_disabled is_disabled
     *
     * @return self
     */
    public function setIsDisabled($is_disabled)
    {
        if (is_null($is_disabled)) {
            throw new \InvalidArgumentException('non-nullable is_disabled cannot be null');
        }
        $this->container['is_disabled'] = $is_disabled;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string|null $error error
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            array_push($this->openAPINullablesSetToNull, 'error');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity|null
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity|null $merchant merchant
     *
     * @return self
     */
    public function setMerchant($merchant)
    {
        if (is_null($merchant)) {
            throw new \InvalidArgumentException('non-nullable merchant cannot be null');
        }
        $this->container['merchant'] = $merchant;

        return $this;
    }

    /**
     * Gets created_by_user
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsUserEntity|null
     */
    public function getCreatedByUser()
    {
        return $this->container['created_by_user'];
    }

    /**
     * Sets created_by_user
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsUserEntity|null $created_by_user created_by_user
     *
     * @return self
     */
    public function setCreatedByUser($created_by_user)
    {
        if (is_null($created_by_user)) {
            throw new \InvalidArgumentException('non-nullable created_by_user cannot be null');
        }
        $this->container['created_by_user'] = $created_by_user;

        return $this;
    }

    /**
     * Gets report_accounts
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsReportAccountEntity[]|null
     */
    public function getReportAccounts()
    {
        return $this->container['report_accounts'];
    }

    /**
     * Sets report_accounts
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsReportAccountEntity[]|null $report_accounts report_accounts
     *
     * @return self
     */
    public function setReportAccounts($report_accounts)
    {
        if (is_null($report_accounts)) {
            array_push($this->openAPINullablesSetToNull, 'report_accounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_accounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['report_accounts'] = $report_accounts;

        return $this;
    }

    /**
     * Gets report_results
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsReportResultEntity[]|null
     */
    public function getReportResults()
    {
        return $this->container['report_results'];
    }

    /**
     * Sets report_results
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsReportResultEntity[]|null $report_results report_results
     *
     * @return self
     */
    public function setReportResults($report_results)
    {
        if (is_null($report_results)) {
            array_push($this->openAPINullablesSetToNull, 'report_results');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_results', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['report_results'] = $report_results;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


