<?php
/**
 * NoFrixionDataModelsMerchantEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionDataModelsMerchantEntity Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionDataModelsMerchantEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.DataModels.MerchantEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'modulr_merchant_id' => 'string',
        'third_party_application_id' => 'string',
        'inserted' => '\DateTime',
        'last_updated' => '\DateTime',
        'enabled' => 'bool',
        'merchant_category_code' => 'string',
        'email_address' => 'string',
        'short_name' => 'string',
        'company_id' => 'string',
        'trading_name' => 'string',
        'payment_account_limit' => 'int',
        'jurisdiction' => 'string',
        'industry' => 'string',
        'hosted_pay_version' => 'int',
        'web_hook_limit' => 'int',
        'display_qr_on_hosted_pay' => 'bool',
        'webhook_version' => 'int',
        'bitcoin_merchant_ext_pub_key' => 'string',
        'bitcoin_key_path_index' => 'int',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'post_town' => 'string',
        'post_code' => 'string',
        'country' => 'string',
        'ubo_first_name' => 'string',
        'ubo_last_name' => 'string',
        'is_blocked' => 'bool',
        'agency_banking_bic' => 'string',
        'agency_banking_sort_code' => 'int',
        'agency_banking_start_account_number' => 'int',
        'agency_banking_end_account_number' => 'int',
        'default_banking_circle_physical_account_id' => 'string',
        'xero_contact_id' => 'string',
        'direct_debit_merchant_id' => 'string',
        'direct_debit_connector_id' => 'string',
        'default_account_type' => 'string',
        'accounts' => '\Nofrixion\Client\Model\NoFrixionDataModelsAccountEntity[]',
        'beneficiaries' => '\Nofrixion\Client\Model\NoFrixionDataModelsBeneficiaryEntity[]',
        'beneficiary_groups' => '\Nofrixion\Client\Model\NoFrixionDataModelsBeneficiaryGroupEntity[]',
        'payment_requests' => '\Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestEntity[]',
        'user_roles' => '\Nofrixion\Client\Model\NoFrixionDataModelsUserRoleEntity[]',
        'merchant_tokens' => '\Nofrixion\Client\Model\NoFrixionDataModelsMerchantTokenEntity[]',
        'merchant_business_settings' => '\Nofrixion\Client\Model\NoFrixionDataModelsMerchantBusinessSettingEntity[]',
        'merchant_notifications' => '\Nofrixion\Client\Model\NoFrixionDataModelsMerchantNotificationEntity[]',
        'tokenised_cards' => '\Nofrixion\Client\Model\NoFrixionDataModelsTokenisedCardsEntity[]',
        'merchant_card_settings' => '\Nofrixion\Client\Model\NoFrixionDataModelsMerchantCardSettingEntity[]',
        'user_invites' => '\Nofrixion\Client\Model\NoFrixionDataModelsUserInviteEntity[]',
        'open_banking_records' => '\Nofrixion\Client\Model\NoFrixionDataModelsOpenBankingConsentEntity[]',
        'merchant_card_processing_settings' => '\Nofrixion\Client\Model\NoFrixionDataModelsMerchantCardProcessingSettingsEntity',
        'merchant_bank_settings' => '\Nofrixion\Client\Model\NoFrixionDataModelsMerchantBankSettingsEntity[]',
        'tags' => '\Nofrixion\Client\Model\NoFrixionDataModelsTagEntity[]',
        'payruns' => '\Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunEntity[]',
        'merchant_reports' => '\Nofrixion\Client\Model\NoFrixionDataModelsReportEntity[]',
        'merchant_report_results' => '\Nofrixion\Client\Model\NoFrixionDataModelsReportResultEntity[]',
        'roles' => '\Nofrixion\Client\Model\NoFrixionDataModelsRoleEntity[]',
        'role_user_merchants' => '\Nofrixion\Client\Model\NoFrixionDataModelsRoleUserMerchantEntity[]',
        'third_party_application' => '\Nofrixion\Client\Model\NoFrixionDataAccessDataModelsThirdPartyApplicationEntity',
        'default_banking_circle_physical_account' => '\Nofrixion\Client\Model\NoFrixionDataModelsBankingCirclePhysicalAccountEntity'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'name' => null,
        'modulr_merchant_id' => null,
        'third_party_application_id' => 'uuid',
        'inserted' => 'date-time',
        'last_updated' => 'date-time',
        'enabled' => null,
        'merchant_category_code' => null,
        'email_address' => null,
        'short_name' => null,
        'company_id' => 'uuid',
        'trading_name' => null,
        'payment_account_limit' => 'int32',
        'jurisdiction' => null,
        'industry' => null,
        'hosted_pay_version' => 'int32',
        'web_hook_limit' => 'int32',
        'display_qr_on_hosted_pay' => null,
        'webhook_version' => 'int32',
        'bitcoin_merchant_ext_pub_key' => null,
        'bitcoin_key_path_index' => 'int32',
        'address_line1' => null,
        'address_line2' => null,
        'post_town' => null,
        'post_code' => null,
        'country' => null,
        'ubo_first_name' => null,
        'ubo_last_name' => null,
        'is_blocked' => null,
        'agency_banking_bic' => null,
        'agency_banking_sort_code' => 'int32',
        'agency_banking_start_account_number' => 'int32',
        'agency_banking_end_account_number' => 'int32',
        'default_banking_circle_physical_account_id' => 'uuid',
        'xero_contact_id' => 'uuid',
        'direct_debit_merchant_id' => null,
        'direct_debit_connector_id' => null,
        'default_account_type' => null,
        'accounts' => null,
        'beneficiaries' => null,
        'beneficiary_groups' => null,
        'payment_requests' => null,
        'user_roles' => null,
        'merchant_tokens' => null,
        'merchant_business_settings' => null,
        'merchant_notifications' => null,
        'tokenised_cards' => null,
        'merchant_card_settings' => null,
        'user_invites' => null,
        'open_banking_records' => null,
        'merchant_card_processing_settings' => null,
        'merchant_bank_settings' => null,
        'tags' => null,
        'payruns' => null,
        'merchant_reports' => null,
        'merchant_report_results' => null,
        'roles' => null,
        'role_user_merchants' => null,
        'third_party_application' => null,
        'default_banking_circle_physical_account' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => true,
        'modulr_merchant_id' => true,
        'third_party_application_id' => true,
        'inserted' => false,
        'last_updated' => false,
        'enabled' => false,
        'merchant_category_code' => true,
        'email_address' => true,
        'short_name' => true,
        'company_id' => true,
        'trading_name' => true,
        'payment_account_limit' => false,
        'jurisdiction' => false,
        'industry' => true,
        'hosted_pay_version' => false,
        'web_hook_limit' => false,
        'display_qr_on_hosted_pay' => false,
        'webhook_version' => false,
        'bitcoin_merchant_ext_pub_key' => true,
        'bitcoin_key_path_index' => false,
        'address_line1' => true,
        'address_line2' => true,
        'post_town' => true,
        'post_code' => true,
        'country' => true,
        'ubo_first_name' => true,
        'ubo_last_name' => true,
        'is_blocked' => false,
        'agency_banking_bic' => true,
        'agency_banking_sort_code' => true,
        'agency_banking_start_account_number' => true,
        'agency_banking_end_account_number' => true,
        'default_banking_circle_physical_account_id' => true,
        'xero_contact_id' => true,
        'direct_debit_merchant_id' => true,
        'direct_debit_connector_id' => true,
        'default_account_type' => false,
        'accounts' => true,
        'beneficiaries' => true,
        'beneficiary_groups' => true,
        'payment_requests' => true,
        'user_roles' => true,
        'merchant_tokens' => true,
        'merchant_business_settings' => true,
        'merchant_notifications' => true,
        'tokenised_cards' => true,
        'merchant_card_settings' => true,
        'user_invites' => true,
        'open_banking_records' => true,
        'merchant_card_processing_settings' => false,
        'merchant_bank_settings' => true,
        'tags' => true,
        'payruns' => true,
        'merchant_reports' => true,
        'merchant_report_results' => true,
        'roles' => true,
        'role_user_merchants' => true,
        'third_party_application' => false,
        'default_banking_circle_physical_account' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'modulr_merchant_id' => 'modulrMerchantID',
        'third_party_application_id' => 'thirdPartyApplicationID',
        'inserted' => 'inserted',
        'last_updated' => 'lastUpdated',
        'enabled' => 'enabled',
        'merchant_category_code' => 'merchantCategoryCode',
        'email_address' => 'emailAddress',
        'short_name' => 'shortName',
        'company_id' => 'companyId',
        'trading_name' => 'tradingName',
        'payment_account_limit' => 'paymentAccountLimit',
        'jurisdiction' => 'jurisdiction',
        'industry' => 'industry',
        'hosted_pay_version' => 'hostedPayVersion',
        'web_hook_limit' => 'webHookLimit',
        'display_qr_on_hosted_pay' => 'displayQrOnHostedPay',
        'webhook_version' => 'webhookVersion',
        'bitcoin_merchant_ext_pub_key' => 'bitcoinMerchantExtPubKey',
        'bitcoin_key_path_index' => 'bitcoinKeyPathIndex',
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'post_town' => 'postTown',
        'post_code' => 'postCode',
        'country' => 'country',
        'ubo_first_name' => 'uboFirstName',
        'ubo_last_name' => 'uboLastName',
        'is_blocked' => 'isBlocked',
        'agency_banking_bic' => 'agencyBankingBic',
        'agency_banking_sort_code' => 'agencyBankingSortCode',
        'agency_banking_start_account_number' => 'agencyBankingStartAccountNumber',
        'agency_banking_end_account_number' => 'agencyBankingEndAccountNumber',
        'default_banking_circle_physical_account_id' => 'defaultBankingCirclePhysicalAccountID',
        'xero_contact_id' => 'xeroContactID',
        'direct_debit_merchant_id' => 'directDebitMerchantID',
        'direct_debit_connector_id' => 'directDebitConnectorID',
        'default_account_type' => 'defaultAccountType',
        'accounts' => 'accounts',
        'beneficiaries' => 'beneficiaries',
        'beneficiary_groups' => 'beneficiaryGroups',
        'payment_requests' => 'paymentRequests',
        'user_roles' => 'userRoles',
        'merchant_tokens' => 'merchantTokens',
        'merchant_business_settings' => 'merchantBusinessSettings',
        'merchant_notifications' => 'merchantNotifications',
        'tokenised_cards' => 'tokenisedCards',
        'merchant_card_settings' => 'merchantCardSettings',
        'user_invites' => 'userInvites',
        'open_banking_records' => 'openBankingRecords',
        'merchant_card_processing_settings' => 'merchantCardProcessingSettings',
        'merchant_bank_settings' => 'merchantBankSettings',
        'tags' => 'tags',
        'payruns' => 'payruns',
        'merchant_reports' => 'merchantReports',
        'merchant_report_results' => 'merchantReportResults',
        'roles' => 'roles',
        'role_user_merchants' => 'roleUserMerchants',
        'third_party_application' => 'thirdPartyApplication',
        'default_banking_circle_physical_account' => 'defaultBankingCirclePhysicalAccount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'modulr_merchant_id' => 'setModulrMerchantId',
        'third_party_application_id' => 'setThirdPartyApplicationId',
        'inserted' => 'setInserted',
        'last_updated' => 'setLastUpdated',
        'enabled' => 'setEnabled',
        'merchant_category_code' => 'setMerchantCategoryCode',
        'email_address' => 'setEmailAddress',
        'short_name' => 'setShortName',
        'company_id' => 'setCompanyId',
        'trading_name' => 'setTradingName',
        'payment_account_limit' => 'setPaymentAccountLimit',
        'jurisdiction' => 'setJurisdiction',
        'industry' => 'setIndustry',
        'hosted_pay_version' => 'setHostedPayVersion',
        'web_hook_limit' => 'setWebHookLimit',
        'display_qr_on_hosted_pay' => 'setDisplayQrOnHostedPay',
        'webhook_version' => 'setWebhookVersion',
        'bitcoin_merchant_ext_pub_key' => 'setBitcoinMerchantExtPubKey',
        'bitcoin_key_path_index' => 'setBitcoinKeyPathIndex',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'post_town' => 'setPostTown',
        'post_code' => 'setPostCode',
        'country' => 'setCountry',
        'ubo_first_name' => 'setUboFirstName',
        'ubo_last_name' => 'setUboLastName',
        'is_blocked' => 'setIsBlocked',
        'agency_banking_bic' => 'setAgencyBankingBic',
        'agency_banking_sort_code' => 'setAgencyBankingSortCode',
        'agency_banking_start_account_number' => 'setAgencyBankingStartAccountNumber',
        'agency_banking_end_account_number' => 'setAgencyBankingEndAccountNumber',
        'default_banking_circle_physical_account_id' => 'setDefaultBankingCirclePhysicalAccountId',
        'xero_contact_id' => 'setXeroContactId',
        'direct_debit_merchant_id' => 'setDirectDebitMerchantId',
        'direct_debit_connector_id' => 'setDirectDebitConnectorId',
        'default_account_type' => 'setDefaultAccountType',
        'accounts' => 'setAccounts',
        'beneficiaries' => 'setBeneficiaries',
        'beneficiary_groups' => 'setBeneficiaryGroups',
        'payment_requests' => 'setPaymentRequests',
        'user_roles' => 'setUserRoles',
        'merchant_tokens' => 'setMerchantTokens',
        'merchant_business_settings' => 'setMerchantBusinessSettings',
        'merchant_notifications' => 'setMerchantNotifications',
        'tokenised_cards' => 'setTokenisedCards',
        'merchant_card_settings' => 'setMerchantCardSettings',
        'user_invites' => 'setUserInvites',
        'open_banking_records' => 'setOpenBankingRecords',
        'merchant_card_processing_settings' => 'setMerchantCardProcessingSettings',
        'merchant_bank_settings' => 'setMerchantBankSettings',
        'tags' => 'setTags',
        'payruns' => 'setPayruns',
        'merchant_reports' => 'setMerchantReports',
        'merchant_report_results' => 'setMerchantReportResults',
        'roles' => 'setRoles',
        'role_user_merchants' => 'setRoleUserMerchants',
        'third_party_application' => 'setThirdPartyApplication',
        'default_banking_circle_physical_account' => 'setDefaultBankingCirclePhysicalAccount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'modulr_merchant_id' => 'getModulrMerchantId',
        'third_party_application_id' => 'getThirdPartyApplicationId',
        'inserted' => 'getInserted',
        'last_updated' => 'getLastUpdated',
        'enabled' => 'getEnabled',
        'merchant_category_code' => 'getMerchantCategoryCode',
        'email_address' => 'getEmailAddress',
        'short_name' => 'getShortName',
        'company_id' => 'getCompanyId',
        'trading_name' => 'getTradingName',
        'payment_account_limit' => 'getPaymentAccountLimit',
        'jurisdiction' => 'getJurisdiction',
        'industry' => 'getIndustry',
        'hosted_pay_version' => 'getHostedPayVersion',
        'web_hook_limit' => 'getWebHookLimit',
        'display_qr_on_hosted_pay' => 'getDisplayQrOnHostedPay',
        'webhook_version' => 'getWebhookVersion',
        'bitcoin_merchant_ext_pub_key' => 'getBitcoinMerchantExtPubKey',
        'bitcoin_key_path_index' => 'getBitcoinKeyPathIndex',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'post_town' => 'getPostTown',
        'post_code' => 'getPostCode',
        'country' => 'getCountry',
        'ubo_first_name' => 'getUboFirstName',
        'ubo_last_name' => 'getUboLastName',
        'is_blocked' => 'getIsBlocked',
        'agency_banking_bic' => 'getAgencyBankingBic',
        'agency_banking_sort_code' => 'getAgencyBankingSortCode',
        'agency_banking_start_account_number' => 'getAgencyBankingStartAccountNumber',
        'agency_banking_end_account_number' => 'getAgencyBankingEndAccountNumber',
        'default_banking_circle_physical_account_id' => 'getDefaultBankingCirclePhysicalAccountId',
        'xero_contact_id' => 'getXeroContactId',
        'direct_debit_merchant_id' => 'getDirectDebitMerchantId',
        'direct_debit_connector_id' => 'getDirectDebitConnectorId',
        'default_account_type' => 'getDefaultAccountType',
        'accounts' => 'getAccounts',
        'beneficiaries' => 'getBeneficiaries',
        'beneficiary_groups' => 'getBeneficiaryGroups',
        'payment_requests' => 'getPaymentRequests',
        'user_roles' => 'getUserRoles',
        'merchant_tokens' => 'getMerchantTokens',
        'merchant_business_settings' => 'getMerchantBusinessSettings',
        'merchant_notifications' => 'getMerchantNotifications',
        'tokenised_cards' => 'getTokenisedCards',
        'merchant_card_settings' => 'getMerchantCardSettings',
        'user_invites' => 'getUserInvites',
        'open_banking_records' => 'getOpenBankingRecords',
        'merchant_card_processing_settings' => 'getMerchantCardProcessingSettings',
        'merchant_bank_settings' => 'getMerchantBankSettings',
        'tags' => 'getTags',
        'payruns' => 'getPayruns',
        'merchant_reports' => 'getMerchantReports',
        'merchant_report_results' => 'getMerchantReportResults',
        'roles' => 'getRoles',
        'role_user_merchants' => 'getRoleUserMerchants',
        'third_party_application' => 'getThirdPartyApplication',
        'default_banking_circle_physical_account' => 'getDefaultBankingCirclePhysicalAccount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const JURISDICTION_IE = 'IE';
    public const JURISDICTION_UK = 'UK';
    public const JURISDICTION_EU = 'EU';
    public const COUNTRY_AT = 'AT';
    public const COUNTRY_BE = 'BE';
    public const COUNTRY_BG = 'BG';
    public const COUNTRY_CY = 'CY';
    public const COUNTRY_CZ = 'CZ';
    public const COUNTRY_DK = 'DK';
    public const COUNTRY_EE = 'EE';
    public const COUNTRY_FI = 'FI';
    public const COUNTRY_FR = 'FR';
    public const COUNTRY_DE = 'DE';
    public const COUNTRY_GR = 'GR';
    public const COUNTRY_HR = 'HR';
    public const COUNTRY_HU = 'HU';
    public const COUNTRY_IS = 'IS';
    public const COUNTRY_IE = 'IE';
    public const COUNTRY_IT = 'IT';
    public const COUNTRY_LV = 'LV';
    public const COUNTRY_LI = 'LI';
    public const COUNTRY_LT = 'LT';
    public const COUNTRY_LU = 'LU';
    public const COUNTRY_MT = 'MT';
    public const COUNTRY_NL = 'NL';
    public const COUNTRY_NO = 'NO';
    public const COUNTRY_PL = 'PL';
    public const COUNTRY_PT = 'PT';
    public const COUNTRY_RO = 'RO';
    public const COUNTRY_SK = 'SK';
    public const COUNTRY_SI = 'SI';
    public const COUNTRY_ES = 'ES';
    public const COUNTRY_SE = 'SE';
    public const COUNTRY_GB = 'GB';
    public const COUNTRY_MQ = 'MQ';
    public const COUNTRY_YT = 'YT';
    public const COUNTRY_GP = 'GP';
    public const COUNTRY_GF = 'GF';
    public const COUNTRY_RE = 'RE';
    public const COUNTRY_MF = 'MF';
    public const COUNTRY_GI = 'GI';
    public const COUNTRY_GG = 'GG';
    public const COUNTRY_IM = 'IM';
    public const COUNTRY_JE = 'JE';
    public const COUNTRY_MC = 'MC';
    public const COUNTRY_CH = 'CH';
    public const COUNTRY_AD = 'AD';
    public const COUNTRY_SM = 'SM';
    public const COUNTRY_VA = 'VA';
    public const COUNTRY_AX = 'AX';
    public const COUNTRY_PM = 'PM';
    public const COUNTRY_BL = 'BL';
    public const COUNTRY_AF = 'AF';
    public const COUNTRY_AL = 'AL';
    public const COUNTRY_DZ = 'DZ';
    public const COUNTRY__AS = 'AS';
    public const COUNTRY_AO = 'AO';
    public const COUNTRY_AI = 'AI';
    public const COUNTRY_AQ = 'AQ';
    public const COUNTRY_AG = 'AG';
    public const COUNTRY_AR = 'AR';
    public const COUNTRY_AM = 'AM';
    public const COUNTRY_AW = 'AW';
    public const COUNTRY_AU = 'AU';
    public const COUNTRY_AZ = 'AZ';
    public const COUNTRY_BS = 'BS';
    public const COUNTRY_BH = 'BH';
    public const COUNTRY_BD = 'BD';
    public const COUNTRY_BB = 'BB';
    public const COUNTRY_BY = 'BY';
    public const COUNTRY_BZ = 'BZ';
    public const COUNTRY_BJ = 'BJ';
    public const COUNTRY_BM = 'BM';
    public const COUNTRY_BT = 'BT';
    public const COUNTRY_BO = 'BO';
    public const COUNTRY_BQ = 'BQ';
    public const COUNTRY_BA = 'BA';
    public const COUNTRY_BW = 'BW';
    public const COUNTRY_BV = 'BV';
    public const COUNTRY_BR = 'BR';
    public const COUNTRY_IO = 'IO';
    public const COUNTRY_VG = 'VG';
    public const COUNTRY_BN = 'BN';
    public const COUNTRY_BF = 'BF';
    public const COUNTRY_BI = 'BI';
    public const COUNTRY_KH = 'KH';
    public const COUNTRY_CM = 'CM';
    public const COUNTRY_CA = 'CA';
    public const COUNTRY_CV = 'CV';
    public const COUNTRY_KY = 'KY';
    public const COUNTRY_CF = 'CF';
    public const COUNTRY_TD = 'TD';
    public const COUNTRY_CL = 'CL';
    public const COUNTRY_CN = 'CN';
    public const COUNTRY_CX = 'CX';
    public const COUNTRY_CC = 'CC';
    public const COUNTRY_CO = 'CO';
    public const COUNTRY_KM = 'KM';
    public const COUNTRY_CK = 'CK';
    public const COUNTRY_CR = 'CR';
    public const COUNTRY_CU = 'CU';
    public const COUNTRY_CW = 'CW';
    public const COUNTRY_CD = 'CD';
    public const COUNTRY_DJ = 'DJ';
    public const COUNTRY_DM = 'DM';
    public const COUNTRY__DO = 'DO';
    public const COUNTRY_TL = 'TL';
    public const COUNTRY_EC = 'EC';
    public const COUNTRY_EG = 'EG';
    public const COUNTRY_SV = 'SV';
    public const COUNTRY_GQ = 'GQ';
    public const COUNTRY_ER = 'ER';
    public const COUNTRY_SZ = 'SZ';
    public const COUNTRY_ET = 'ET';
    public const COUNTRY_FK = 'FK';
    public const COUNTRY_FO = 'FO';
    public const COUNTRY_FJ = 'FJ';
    public const COUNTRY_PF = 'PF';
    public const COUNTRY_TF = 'TF';
    public const COUNTRY_GA = 'GA';
    public const COUNTRY_GM = 'GM';
    public const COUNTRY_GE = 'GE';
    public const COUNTRY_GH = 'GH';
    public const COUNTRY_GL = 'GL';
    public const COUNTRY_GD = 'GD';
    public const COUNTRY_GU = 'GU';
    public const COUNTRY_GT = 'GT';
    public const COUNTRY_GN = 'GN';
    public const COUNTRY_GW = 'GW';
    public const COUNTRY_GY = 'GY';
    public const COUNTRY_HT = 'HT';
    public const COUNTRY_HM = 'HM';
    public const COUNTRY_HN = 'HN';
    public const COUNTRY_HK = 'HK';
    public const COUNTRY_IN = 'IN';
    public const COUNTRY_ID = 'ID';
    public const COUNTRY_IR = 'IR';
    public const COUNTRY_IQ = 'IQ';
    public const COUNTRY_IL = 'IL';
    public const COUNTRY_CI = 'CI';
    public const COUNTRY_JM = 'JM';
    public const COUNTRY_JP = 'JP';
    public const COUNTRY_JO = 'JO';
    public const COUNTRY_KZ = 'KZ';
    public const COUNTRY_KE = 'KE';
    public const COUNTRY_KI = 'KI';
    public const COUNTRY_XK = 'XK';
    public const COUNTRY_KW = 'KW';
    public const COUNTRY_KG = 'KG';
    public const COUNTRY_LA = 'LA';
    public const COUNTRY_LB = 'LB';
    public const COUNTRY_LS = 'LS';
    public const COUNTRY_LR = 'LR';
    public const COUNTRY_LY = 'LY';
    public const COUNTRY_MO = 'MO';
    public const COUNTRY_MG = 'MG';
    public const COUNTRY_MW = 'MW';
    public const COUNTRY_MY = 'MY';
    public const COUNTRY_MV = 'MV';
    public const COUNTRY_ML = 'ML';
    public const COUNTRY_MH = 'MH';
    public const COUNTRY_MR = 'MR';
    public const COUNTRY_MU = 'MU';
    public const COUNTRY_MX = 'MX';
    public const COUNTRY_FM = 'FM';
    public const COUNTRY_MD = 'MD';
    public const COUNTRY_MN = 'MN';
    public const COUNTRY_ME = 'ME';
    public const COUNTRY_MS = 'MS';
    public const COUNTRY_MA = 'MA';
    public const COUNTRY_MZ = 'MZ';
    public const COUNTRY_MM = 'MM';
    public const COUNTRY_NA = 'NA';
    public const COUNTRY_NR = 'NR';
    public const COUNTRY_NP = 'NP';
    public const COUNTRY_AN = 'AN';
    public const COUNTRY_NC = 'NC';
    public const COUNTRY_NZ = 'NZ';
    public const COUNTRY_NI = 'NI';
    public const COUNTRY_NE = 'NE';
    public const COUNTRY_NG = 'NG';
    public const COUNTRY_NU = 'NU';
    public const COUNTRY_NF = 'NF';
    public const COUNTRY_KP = 'KP';
    public const COUNTRY_MK = 'MK';
    public const COUNTRY_MP = 'MP';
    public const COUNTRY_OM = 'OM';
    public const COUNTRY_PK = 'PK';
    public const COUNTRY_PW = 'PW';
    public const COUNTRY_PS = 'PS';
    public const COUNTRY_PA = 'PA';
    public const COUNTRY_PG = 'PG';
    public const COUNTRY_PY = 'PY';
    public const COUNTRY_PE = 'PE';
    public const COUNTRY_PH = 'PH';
    public const COUNTRY_PN = 'PN';
    public const COUNTRY_PR = 'PR';
    public const COUNTRY_QA = 'QA';
    public const COUNTRY_CG = 'CG';
    public const COUNTRY_RU = 'RU';
    public const COUNTRY_RW = 'RW';
    public const COUNTRY_SH = 'SH';
    public const COUNTRY_KN = 'KN';
    public const COUNTRY_LC = 'LC';
    public const COUNTRY_VC = 'VC';
    public const COUNTRY_WS = 'WS';
    public const COUNTRY_ST = 'ST';
    public const COUNTRY_SA = 'SA';
    public const COUNTRY_SN = 'SN';
    public const COUNTRY_RS = 'RS';
    public const COUNTRY_SC = 'SC';
    public const COUNTRY_SL = 'SL';
    public const COUNTRY_SG = 'SG';
    public const COUNTRY_SX = 'SX';
    public const COUNTRY_SB = 'SB';
    public const COUNTRY_SO = 'SO';
    public const COUNTRY_ZA = 'ZA';
    public const COUNTRY_KR = 'KR';
    public const COUNTRY_GS = 'GS';
    public const COUNTRY_SS = 'SS';
    public const COUNTRY_LK = 'LK';
    public const COUNTRY_SD = 'SD';
    public const COUNTRY_SR = 'SR';
    public const COUNTRY_SY = 'SY';
    public const COUNTRY_SJ = 'SJ';
    public const COUNTRY_TW = 'TW';
    public const COUNTRY_TJ = 'TJ';
    public const COUNTRY_TZ = 'TZ';
    public const COUNTRY_TH = 'TH';
    public const COUNTRY_TG = 'TG';
    public const COUNTRY_TK = 'TK';
    public const COUNTRY_TO = 'TO';
    public const COUNTRY_TT = 'TT';
    public const COUNTRY_TN = 'TN';
    public const COUNTRY_TR = 'TR';
    public const COUNTRY_TM = 'TM';
    public const COUNTRY_TC = 'TC';
    public const COUNTRY_TV = 'TV';
    public const COUNTRY_UG = 'UG';
    public const COUNTRY_UA = 'UA';
    public const COUNTRY_AE = 'AE';
    public const COUNTRY_UM = 'UM';
    public const COUNTRY_US = 'US';
    public const COUNTRY_UY = 'UY';
    public const COUNTRY_UZ = 'UZ';
    public const COUNTRY_VU = 'VU';
    public const COUNTRY_VE = 'VE';
    public const COUNTRY_VN = 'VN';
    public const COUNTRY_VI = 'VI';
    public const COUNTRY_WF = 'WF';
    public const COUNTRY_EH = 'EH';
    public const COUNTRY_YE = 'YE';
    public const COUNTRY_ZM = 'ZM';
    public const COUNTRY_ZW = 'ZW';
    public const DEFAULT_ACCOUNT_TYPE_STANDARD = 'Standard';
    public const DEFAULT_ACCOUNT_TYPE_STANDARD_FEE = 'StandardFee';
    public const DEFAULT_ACCOUNT_TYPE_TRIBE = 'Tribe';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJurisdictionAllowableValues()
    {
        return [
            self::JURISDICTION_IE,
            self::JURISDICTION_UK,
            self::JURISDICTION_EU,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCountryAllowableValues()
    {
        return [
            self::COUNTRY_AT,
            self::COUNTRY_BE,
            self::COUNTRY_BG,
            self::COUNTRY_CY,
            self::COUNTRY_CZ,
            self::COUNTRY_DK,
            self::COUNTRY_EE,
            self::COUNTRY_FI,
            self::COUNTRY_FR,
            self::COUNTRY_DE,
            self::COUNTRY_GR,
            self::COUNTRY_HR,
            self::COUNTRY_HU,
            self::COUNTRY_IS,
            self::COUNTRY_IE,
            self::COUNTRY_IT,
            self::COUNTRY_LV,
            self::COUNTRY_LI,
            self::COUNTRY_LT,
            self::COUNTRY_LU,
            self::COUNTRY_MT,
            self::COUNTRY_NL,
            self::COUNTRY_NO,
            self::COUNTRY_PL,
            self::COUNTRY_PT,
            self::COUNTRY_RO,
            self::COUNTRY_SK,
            self::COUNTRY_SI,
            self::COUNTRY_ES,
            self::COUNTRY_SE,
            self::COUNTRY_GB,
            self::COUNTRY_MQ,
            self::COUNTRY_YT,
            self::COUNTRY_GP,
            self::COUNTRY_GF,
            self::COUNTRY_RE,
            self::COUNTRY_MF,
            self::COUNTRY_GI,
            self::COUNTRY_GG,
            self::COUNTRY_IM,
            self::COUNTRY_JE,
            self::COUNTRY_MC,
            self::COUNTRY_CH,
            self::COUNTRY_AD,
            self::COUNTRY_SM,
            self::COUNTRY_VA,
            self::COUNTRY_AX,
            self::COUNTRY_PM,
            self::COUNTRY_BL,
            self::COUNTRY_AF,
            self::COUNTRY_AL,
            self::COUNTRY_DZ,
            self::COUNTRY__AS,
            self::COUNTRY_AO,
            self::COUNTRY_AI,
            self::COUNTRY_AQ,
            self::COUNTRY_AG,
            self::COUNTRY_AR,
            self::COUNTRY_AM,
            self::COUNTRY_AW,
            self::COUNTRY_AU,
            self::COUNTRY_AZ,
            self::COUNTRY_BS,
            self::COUNTRY_BH,
            self::COUNTRY_BD,
            self::COUNTRY_BB,
            self::COUNTRY_BY,
            self::COUNTRY_BZ,
            self::COUNTRY_BJ,
            self::COUNTRY_BM,
            self::COUNTRY_BT,
            self::COUNTRY_BO,
            self::COUNTRY_BQ,
            self::COUNTRY_BA,
            self::COUNTRY_BW,
            self::COUNTRY_BV,
            self::COUNTRY_BR,
            self::COUNTRY_IO,
            self::COUNTRY_VG,
            self::COUNTRY_BN,
            self::COUNTRY_BF,
            self::COUNTRY_BI,
            self::COUNTRY_KH,
            self::COUNTRY_CM,
            self::COUNTRY_CA,
            self::COUNTRY_CV,
            self::COUNTRY_KY,
            self::COUNTRY_CF,
            self::COUNTRY_TD,
            self::COUNTRY_CL,
            self::COUNTRY_CN,
            self::COUNTRY_CX,
            self::COUNTRY_CC,
            self::COUNTRY_CO,
            self::COUNTRY_KM,
            self::COUNTRY_CK,
            self::COUNTRY_CR,
            self::COUNTRY_CU,
            self::COUNTRY_CW,
            self::COUNTRY_CD,
            self::COUNTRY_DJ,
            self::COUNTRY_DM,
            self::COUNTRY__DO,
            self::COUNTRY_TL,
            self::COUNTRY_EC,
            self::COUNTRY_EG,
            self::COUNTRY_SV,
            self::COUNTRY_GQ,
            self::COUNTRY_ER,
            self::COUNTRY_SZ,
            self::COUNTRY_ET,
            self::COUNTRY_FK,
            self::COUNTRY_FO,
            self::COUNTRY_FJ,
            self::COUNTRY_PF,
            self::COUNTRY_TF,
            self::COUNTRY_GA,
            self::COUNTRY_GM,
            self::COUNTRY_GE,
            self::COUNTRY_GH,
            self::COUNTRY_GL,
            self::COUNTRY_GD,
            self::COUNTRY_GU,
            self::COUNTRY_GT,
            self::COUNTRY_GN,
            self::COUNTRY_GW,
            self::COUNTRY_GY,
            self::COUNTRY_HT,
            self::COUNTRY_HM,
            self::COUNTRY_HN,
            self::COUNTRY_HK,
            self::COUNTRY_IN,
            self::COUNTRY_ID,
            self::COUNTRY_IR,
            self::COUNTRY_IQ,
            self::COUNTRY_IL,
            self::COUNTRY_CI,
            self::COUNTRY_JM,
            self::COUNTRY_JP,
            self::COUNTRY_JO,
            self::COUNTRY_KZ,
            self::COUNTRY_KE,
            self::COUNTRY_KI,
            self::COUNTRY_XK,
            self::COUNTRY_KW,
            self::COUNTRY_KG,
            self::COUNTRY_LA,
            self::COUNTRY_LB,
            self::COUNTRY_LS,
            self::COUNTRY_LR,
            self::COUNTRY_LY,
            self::COUNTRY_MO,
            self::COUNTRY_MG,
            self::COUNTRY_MW,
            self::COUNTRY_MY,
            self::COUNTRY_MV,
            self::COUNTRY_ML,
            self::COUNTRY_MH,
            self::COUNTRY_MR,
            self::COUNTRY_MU,
            self::COUNTRY_MX,
            self::COUNTRY_FM,
            self::COUNTRY_MD,
            self::COUNTRY_MN,
            self::COUNTRY_ME,
            self::COUNTRY_MS,
            self::COUNTRY_MA,
            self::COUNTRY_MZ,
            self::COUNTRY_MM,
            self::COUNTRY_NA,
            self::COUNTRY_NR,
            self::COUNTRY_NP,
            self::COUNTRY_AN,
            self::COUNTRY_NC,
            self::COUNTRY_NZ,
            self::COUNTRY_NI,
            self::COUNTRY_NE,
            self::COUNTRY_NG,
            self::COUNTRY_NU,
            self::COUNTRY_NF,
            self::COUNTRY_KP,
            self::COUNTRY_MK,
            self::COUNTRY_MP,
            self::COUNTRY_OM,
            self::COUNTRY_PK,
            self::COUNTRY_PW,
            self::COUNTRY_PS,
            self::COUNTRY_PA,
            self::COUNTRY_PG,
            self::COUNTRY_PY,
            self::COUNTRY_PE,
            self::COUNTRY_PH,
            self::COUNTRY_PN,
            self::COUNTRY_PR,
            self::COUNTRY_QA,
            self::COUNTRY_CG,
            self::COUNTRY_RU,
            self::COUNTRY_RW,
            self::COUNTRY_SH,
            self::COUNTRY_KN,
            self::COUNTRY_LC,
            self::COUNTRY_VC,
            self::COUNTRY_WS,
            self::COUNTRY_ST,
            self::COUNTRY_SA,
            self::COUNTRY_SN,
            self::COUNTRY_RS,
            self::COUNTRY_SC,
            self::COUNTRY_SL,
            self::COUNTRY_SG,
            self::COUNTRY_SX,
            self::COUNTRY_SB,
            self::COUNTRY_SO,
            self::COUNTRY_ZA,
            self::COUNTRY_KR,
            self::COUNTRY_GS,
            self::COUNTRY_SS,
            self::COUNTRY_LK,
            self::COUNTRY_SD,
            self::COUNTRY_SR,
            self::COUNTRY_SY,
            self::COUNTRY_SJ,
            self::COUNTRY_TW,
            self::COUNTRY_TJ,
            self::COUNTRY_TZ,
            self::COUNTRY_TH,
            self::COUNTRY_TG,
            self::COUNTRY_TK,
            self::COUNTRY_TO,
            self::COUNTRY_TT,
            self::COUNTRY_TN,
            self::COUNTRY_TR,
            self::COUNTRY_TM,
            self::COUNTRY_TC,
            self::COUNTRY_TV,
            self::COUNTRY_UG,
            self::COUNTRY_UA,
            self::COUNTRY_AE,
            self::COUNTRY_UM,
            self::COUNTRY_US,
            self::COUNTRY_UY,
            self::COUNTRY_UZ,
            self::COUNTRY_VU,
            self::COUNTRY_VE,
            self::COUNTRY_VN,
            self::COUNTRY_VI,
            self::COUNTRY_WF,
            self::COUNTRY_EH,
            self::COUNTRY_YE,
            self::COUNTRY_ZM,
            self::COUNTRY_ZW,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultAccountTypeAllowableValues()
    {
        return [
            self::DEFAULT_ACCOUNT_TYPE_STANDARD,
            self::DEFAULT_ACCOUNT_TYPE_STANDARD_FEE,
            self::DEFAULT_ACCOUNT_TYPE_TRIBE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('modulr_merchant_id', $data ?? [], null);
        $this->setIfExists('third_party_application_id', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('merchant_category_code', $data ?? [], null);
        $this->setIfExists('email_address', $data ?? [], null);
        $this->setIfExists('short_name', $data ?? [], null);
        $this->setIfExists('company_id', $data ?? [], null);
        $this->setIfExists('trading_name', $data ?? [], null);
        $this->setIfExists('payment_account_limit', $data ?? [], null);
        $this->setIfExists('jurisdiction', $data ?? [], null);
        $this->setIfExists('industry', $data ?? [], null);
        $this->setIfExists('hosted_pay_version', $data ?? [], null);
        $this->setIfExists('web_hook_limit', $data ?? [], null);
        $this->setIfExists('display_qr_on_hosted_pay', $data ?? [], null);
        $this->setIfExists('webhook_version', $data ?? [], null);
        $this->setIfExists('bitcoin_merchant_ext_pub_key', $data ?? [], null);
        $this->setIfExists('bitcoin_key_path_index', $data ?? [], null);
        $this->setIfExists('address_line1', $data ?? [], null);
        $this->setIfExists('address_line2', $data ?? [], null);
        $this->setIfExists('post_town', $data ?? [], null);
        $this->setIfExists('post_code', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('ubo_first_name', $data ?? [], null);
        $this->setIfExists('ubo_last_name', $data ?? [], null);
        $this->setIfExists('is_blocked', $data ?? [], null);
        $this->setIfExists('agency_banking_bic', $data ?? [], null);
        $this->setIfExists('agency_banking_sort_code', $data ?? [], null);
        $this->setIfExists('agency_banking_start_account_number', $data ?? [], null);
        $this->setIfExists('agency_banking_end_account_number', $data ?? [], null);
        $this->setIfExists('default_banking_circle_physical_account_id', $data ?? [], null);
        $this->setIfExists('xero_contact_id', $data ?? [], null);
        $this->setIfExists('direct_debit_merchant_id', $data ?? [], null);
        $this->setIfExists('direct_debit_connector_id', $data ?? [], null);
        $this->setIfExists('default_account_type', $data ?? [], null);
        $this->setIfExists('accounts', $data ?? [], null);
        $this->setIfExists('beneficiaries', $data ?? [], null);
        $this->setIfExists('beneficiary_groups', $data ?? [], null);
        $this->setIfExists('payment_requests', $data ?? [], null);
        $this->setIfExists('user_roles', $data ?? [], null);
        $this->setIfExists('merchant_tokens', $data ?? [], null);
        $this->setIfExists('merchant_business_settings', $data ?? [], null);
        $this->setIfExists('merchant_notifications', $data ?? [], null);
        $this->setIfExists('tokenised_cards', $data ?? [], null);
        $this->setIfExists('merchant_card_settings', $data ?? [], null);
        $this->setIfExists('user_invites', $data ?? [], null);
        $this->setIfExists('open_banking_records', $data ?? [], null);
        $this->setIfExists('merchant_card_processing_settings', $data ?? [], null);
        $this->setIfExists('merchant_bank_settings', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('payruns', $data ?? [], null);
        $this->setIfExists('merchant_reports', $data ?? [], null);
        $this->setIfExists('merchant_report_results', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('role_user_merchants', $data ?? [], null);
        $this->setIfExists('third_party_application', $data ?? [], null);
        $this->setIfExists('default_banking_circle_physical_account', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getJurisdictionAllowableValues();
        if (!is_null($this->container['jurisdiction']) && !in_array($this->container['jurisdiction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'jurisdiction', must be one of '%s'",
                $this->container['jurisdiction'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCountryAllowableValues();
        if (!is_null($this->container['country']) && !in_array($this->container['country'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'country', must be one of '%s'",
                $this->container['country'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDefaultAccountTypeAllowableValues();
        if (!is_null($this->container['default_account_type']) && !in_array($this->container['default_account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_account_type', must be one of '%s'",
                $this->container['default_account_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets modulr_merchant_id
     *
     * @return string|null
     */
    public function getModulrMerchantId()
    {
        return $this->container['modulr_merchant_id'];
    }

    /**
     * Sets modulr_merchant_id
     *
     * @param string|null $modulr_merchant_id modulr_merchant_id
     *
     * @return self
     */
    public function setModulrMerchantId($modulr_merchant_id)
    {
        if (is_null($modulr_merchant_id)) {
            array_push($this->openAPINullablesSetToNull, 'modulr_merchant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('modulr_merchant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['modulr_merchant_id'] = $modulr_merchant_id;

        return $this;
    }

    /**
     * Gets third_party_application_id
     *
     * @return string|null
     */
    public function getThirdPartyApplicationId()
    {
        return $this->container['third_party_application_id'];
    }

    /**
     * Sets third_party_application_id
     *
     * @param string|null $third_party_application_id third_party_application_id
     *
     * @return self
     */
    public function setThirdPartyApplicationId($third_party_application_id)
    {
        if (is_null($third_party_application_id)) {
            array_push($this->openAPINullablesSetToNull, 'third_party_application_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('third_party_application_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['third_party_application_id'] = $third_party_application_id;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted inserted
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets merchant_category_code
     *
     * @return string|null
     */
    public function getMerchantCategoryCode()
    {
        return $this->container['merchant_category_code'];
    }

    /**
     * Sets merchant_category_code
     *
     * @param string|null $merchant_category_code merchant_category_code
     *
     * @return self
     */
    public function setMerchantCategoryCode($merchant_category_code)
    {
        if (is_null($merchant_category_code)) {
            array_push($this->openAPINullablesSetToNull, 'merchant_category_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchant_category_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchant_category_code'] = $merchant_category_code;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string|null $email_address email_address
     *
     * @return self
     */
    public function setEmailAddress($email_address)
    {
        if (is_null($email_address)) {
            array_push($this->openAPINullablesSetToNull, 'email_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return string|null
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string|null $short_name short_name
     *
     * @return self
     */
    public function setShortName($short_name)
    {
        if (is_null($short_name)) {
            array_push($this->openAPINullablesSetToNull, 'short_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return string|null
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param string|null $company_id company_id
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        if (is_null($company_id)) {
            array_push($this->openAPINullablesSetToNull, 'company_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets trading_name
     *
     * @return string|null
     */
    public function getTradingName()
    {
        return $this->container['trading_name'];
    }

    /**
     * Sets trading_name
     *
     * @param string|null $trading_name trading_name
     *
     * @return self
     */
    public function setTradingName($trading_name)
    {
        if (is_null($trading_name)) {
            array_push($this->openAPINullablesSetToNull, 'trading_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trading_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trading_name'] = $trading_name;

        return $this;
    }

    /**
     * Gets payment_account_limit
     *
     * @return int|null
     */
    public function getPaymentAccountLimit()
    {
        return $this->container['payment_account_limit'];
    }

    /**
     * Sets payment_account_limit
     *
     * @param int|null $payment_account_limit payment_account_limit
     *
     * @return self
     */
    public function setPaymentAccountLimit($payment_account_limit)
    {
        if (is_null($payment_account_limit)) {
            throw new \InvalidArgumentException('non-nullable payment_account_limit cannot be null');
        }
        $this->container['payment_account_limit'] = $payment_account_limit;

        return $this;
    }

    /**
     * Gets jurisdiction
     *
     * @return string|null
     */
    public function getJurisdiction()
    {
        return $this->container['jurisdiction'];
    }

    /**
     * Sets jurisdiction
     *
     * @param string|null $jurisdiction jurisdiction
     *
     * @return self
     */
    public function setJurisdiction($jurisdiction)
    {
        if (is_null($jurisdiction)) {
            throw new \InvalidArgumentException('non-nullable jurisdiction cannot be null');
        }
        $allowedValues = $this->getJurisdictionAllowableValues();
        if (!in_array($jurisdiction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'jurisdiction', must be one of '%s'",
                    $jurisdiction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['jurisdiction'] = $jurisdiction;

        return $this;
    }

    /**
     * Gets industry
     *
     * @return string|null
     */
    public function getIndustry()
    {
        return $this->container['industry'];
    }

    /**
     * Sets industry
     *
     * @param string|null $industry industry
     *
     * @return self
     */
    public function setIndustry($industry)
    {
        if (is_null($industry)) {
            array_push($this->openAPINullablesSetToNull, 'industry');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industry'] = $industry;

        return $this;
    }

    /**
     * Gets hosted_pay_version
     *
     * @return int|null
     */
    public function getHostedPayVersion()
    {
        return $this->container['hosted_pay_version'];
    }

    /**
     * Sets hosted_pay_version
     *
     * @param int|null $hosted_pay_version hosted_pay_version
     *
     * @return self
     */
    public function setHostedPayVersion($hosted_pay_version)
    {
        if (is_null($hosted_pay_version)) {
            throw new \InvalidArgumentException('non-nullable hosted_pay_version cannot be null');
        }
        $this->container['hosted_pay_version'] = $hosted_pay_version;

        return $this;
    }

    /**
     * Gets web_hook_limit
     *
     * @return int|null
     */
    public function getWebHookLimit()
    {
        return $this->container['web_hook_limit'];
    }

    /**
     * Sets web_hook_limit
     *
     * @param int|null $web_hook_limit web_hook_limit
     *
     * @return self
     */
    public function setWebHookLimit($web_hook_limit)
    {
        if (is_null($web_hook_limit)) {
            throw new \InvalidArgumentException('non-nullable web_hook_limit cannot be null');
        }
        $this->container['web_hook_limit'] = $web_hook_limit;

        return $this;
    }

    /**
     * Gets display_qr_on_hosted_pay
     *
     * @return bool|null
     */
    public function getDisplayQrOnHostedPay()
    {
        return $this->container['display_qr_on_hosted_pay'];
    }

    /**
     * Sets display_qr_on_hosted_pay
     *
     * @param bool|null $display_qr_on_hosted_pay display_qr_on_hosted_pay
     *
     * @return self
     */
    public function setDisplayQrOnHostedPay($display_qr_on_hosted_pay)
    {
        if (is_null($display_qr_on_hosted_pay)) {
            throw new \InvalidArgumentException('non-nullable display_qr_on_hosted_pay cannot be null');
        }
        $this->container['display_qr_on_hosted_pay'] = $display_qr_on_hosted_pay;

        return $this;
    }

    /**
     * Gets webhook_version
     *
     * @return int|null
     */
    public function getWebhookVersion()
    {
        return $this->container['webhook_version'];
    }

    /**
     * Sets webhook_version
     *
     * @param int|null $webhook_version webhook_version
     *
     * @return self
     */
    public function setWebhookVersion($webhook_version)
    {
        if (is_null($webhook_version)) {
            throw new \InvalidArgumentException('non-nullable webhook_version cannot be null');
        }
        $this->container['webhook_version'] = $webhook_version;

        return $this;
    }

    /**
     * Gets bitcoin_merchant_ext_pub_key
     *
     * @return string|null
     */
    public function getBitcoinMerchantExtPubKey()
    {
        return $this->container['bitcoin_merchant_ext_pub_key'];
    }

    /**
     * Sets bitcoin_merchant_ext_pub_key
     *
     * @param string|null $bitcoin_merchant_ext_pub_key bitcoin_merchant_ext_pub_key
     *
     * @return self
     */
    public function setBitcoinMerchantExtPubKey($bitcoin_merchant_ext_pub_key)
    {
        if (is_null($bitcoin_merchant_ext_pub_key)) {
            array_push($this->openAPINullablesSetToNull, 'bitcoin_merchant_ext_pub_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bitcoin_merchant_ext_pub_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bitcoin_merchant_ext_pub_key'] = $bitcoin_merchant_ext_pub_key;

        return $this;
    }

    /**
     * Gets bitcoin_key_path_index
     *
     * @return int|null
     */
    public function getBitcoinKeyPathIndex()
    {
        return $this->container['bitcoin_key_path_index'];
    }

    /**
     * Sets bitcoin_key_path_index
     *
     * @param int|null $bitcoin_key_path_index bitcoin_key_path_index
     *
     * @return self
     */
    public function setBitcoinKeyPathIndex($bitcoin_key_path_index)
    {
        if (is_null($bitcoin_key_path_index)) {
            throw new \InvalidArgumentException('non-nullable bitcoin_key_path_index cannot be null');
        }
        $this->container['bitcoin_key_path_index'] = $bitcoin_key_path_index;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string|null
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string|null $address_line1 address_line1
     *
     * @return self
     */
    public function setAddressLine1($address_line1)
    {
        if (is_null($address_line1)) {
            array_push($this->openAPINullablesSetToNull, 'address_line1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_line1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string|null $address_line2 address_line2
     *
     * @return self
     */
    public function setAddressLine2($address_line2)
    {
        if (is_null($address_line2)) {
            array_push($this->openAPINullablesSetToNull, 'address_line2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_line2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets post_town
     *
     * @return string|null
     */
    public function getPostTown()
    {
        return $this->container['post_town'];
    }

    /**
     * Sets post_town
     *
     * @param string|null $post_town post_town
     *
     * @return self
     */
    public function setPostTown($post_town)
    {
        if (is_null($post_town)) {
            array_push($this->openAPINullablesSetToNull, 'post_town');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('post_town', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['post_town'] = $post_town;

        return $this;
    }

    /**
     * Gets post_code
     *
     * @return string|null
     */
    public function getPostCode()
    {
        return $this->container['post_code'];
    }

    /**
     * Sets post_code
     *
     * @param string|null $post_code post_code
     *
     * @return self
     */
    public function setPostCode($post_code)
    {
        if (is_null($post_code)) {
            array_push($this->openAPINullablesSetToNull, 'post_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('post_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['post_code'] = $post_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getCountryAllowableValues();
        if (!is_null($country) && !in_array($country, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'country', must be one of '%s'",
                    $country,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets ubo_first_name
     *
     * @return string|null
     */
    public function getUboFirstName()
    {
        return $this->container['ubo_first_name'];
    }

    /**
     * Sets ubo_first_name
     *
     * @param string|null $ubo_first_name ubo_first_name
     *
     * @return self
     */
    public function setUboFirstName($ubo_first_name)
    {
        if (is_null($ubo_first_name)) {
            array_push($this->openAPINullablesSetToNull, 'ubo_first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ubo_first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ubo_first_name'] = $ubo_first_name;

        return $this;
    }

    /**
     * Gets ubo_last_name
     *
     * @return string|null
     */
    public function getUboLastName()
    {
        return $this->container['ubo_last_name'];
    }

    /**
     * Sets ubo_last_name
     *
     * @param string|null $ubo_last_name ubo_last_name
     *
     * @return self
     */
    public function setUboLastName($ubo_last_name)
    {
        if (is_null($ubo_last_name)) {
            array_push($this->openAPINullablesSetToNull, 'ubo_last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ubo_last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ubo_last_name'] = $ubo_last_name;

        return $this;
    }

    /**
     * Gets is_blocked
     *
     * @return bool|null
     */
    public function getIsBlocked()
    {
        return $this->container['is_blocked'];
    }

    /**
     * Sets is_blocked
     *
     * @param bool|null $is_blocked is_blocked
     *
     * @return self
     */
    public function setIsBlocked($is_blocked)
    {
        if (is_null($is_blocked)) {
            throw new \InvalidArgumentException('non-nullable is_blocked cannot be null');
        }
        $this->container['is_blocked'] = $is_blocked;

        return $this;
    }

    /**
     * Gets agency_banking_bic
     *
     * @return string|null
     */
    public function getAgencyBankingBic()
    {
        return $this->container['agency_banking_bic'];
    }

    /**
     * Sets agency_banking_bic
     *
     * @param string|null $agency_banking_bic agency_banking_bic
     *
     * @return self
     */
    public function setAgencyBankingBic($agency_banking_bic)
    {
        if (is_null($agency_banking_bic)) {
            array_push($this->openAPINullablesSetToNull, 'agency_banking_bic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('agency_banking_bic', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['agency_banking_bic'] = $agency_banking_bic;

        return $this;
    }

    /**
     * Gets agency_banking_sort_code
     *
     * @return int|null
     */
    public function getAgencyBankingSortCode()
    {
        return $this->container['agency_banking_sort_code'];
    }

    /**
     * Sets agency_banking_sort_code
     *
     * @param int|null $agency_banking_sort_code agency_banking_sort_code
     *
     * @return self
     */
    public function setAgencyBankingSortCode($agency_banking_sort_code)
    {
        if (is_null($agency_banking_sort_code)) {
            array_push($this->openAPINullablesSetToNull, 'agency_banking_sort_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('agency_banking_sort_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['agency_banking_sort_code'] = $agency_banking_sort_code;

        return $this;
    }

    /**
     * Gets agency_banking_start_account_number
     *
     * @return int|null
     */
    public function getAgencyBankingStartAccountNumber()
    {
        return $this->container['agency_banking_start_account_number'];
    }

    /**
     * Sets agency_banking_start_account_number
     *
     * @param int|null $agency_banking_start_account_number agency_banking_start_account_number
     *
     * @return self
     */
    public function setAgencyBankingStartAccountNumber($agency_banking_start_account_number)
    {
        if (is_null($agency_banking_start_account_number)) {
            array_push($this->openAPINullablesSetToNull, 'agency_banking_start_account_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('agency_banking_start_account_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['agency_banking_start_account_number'] = $agency_banking_start_account_number;

        return $this;
    }

    /**
     * Gets agency_banking_end_account_number
     *
     * @return int|null
     */
    public function getAgencyBankingEndAccountNumber()
    {
        return $this->container['agency_banking_end_account_number'];
    }

    /**
     * Sets agency_banking_end_account_number
     *
     * @param int|null $agency_banking_end_account_number agency_banking_end_account_number
     *
     * @return self
     */
    public function setAgencyBankingEndAccountNumber($agency_banking_end_account_number)
    {
        if (is_null($agency_banking_end_account_number)) {
            array_push($this->openAPINullablesSetToNull, 'agency_banking_end_account_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('agency_banking_end_account_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['agency_banking_end_account_number'] = $agency_banking_end_account_number;

        return $this;
    }

    /**
     * Gets default_banking_circle_physical_account_id
     *
     * @return string|null
     */
    public function getDefaultBankingCirclePhysicalAccountId()
    {
        return $this->container['default_banking_circle_physical_account_id'];
    }

    /**
     * Sets default_banking_circle_physical_account_id
     *
     * @param string|null $default_banking_circle_physical_account_id default_banking_circle_physical_account_id
     *
     * @return self
     */
    public function setDefaultBankingCirclePhysicalAccountId($default_banking_circle_physical_account_id)
    {
        if (is_null($default_banking_circle_physical_account_id)) {
            array_push($this->openAPINullablesSetToNull, 'default_banking_circle_physical_account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_banking_circle_physical_account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_banking_circle_physical_account_id'] = $default_banking_circle_physical_account_id;

        return $this;
    }

    /**
     * Gets xero_contact_id
     *
     * @return string|null
     */
    public function getXeroContactId()
    {
        return $this->container['xero_contact_id'];
    }

    /**
     * Sets xero_contact_id
     *
     * @param string|null $xero_contact_id xero_contact_id
     *
     * @return self
     */
    public function setXeroContactId($xero_contact_id)
    {
        if (is_null($xero_contact_id)) {
            array_push($this->openAPINullablesSetToNull, 'xero_contact_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('xero_contact_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['xero_contact_id'] = $xero_contact_id;

        return $this;
    }

    /**
     * Gets direct_debit_merchant_id
     *
     * @return string|null
     */
    public function getDirectDebitMerchantId()
    {
        return $this->container['direct_debit_merchant_id'];
    }

    /**
     * Sets direct_debit_merchant_id
     *
     * @param string|null $direct_debit_merchant_id direct_debit_merchant_id
     *
     * @return self
     */
    public function setDirectDebitMerchantId($direct_debit_merchant_id)
    {
        if (is_null($direct_debit_merchant_id)) {
            array_push($this->openAPINullablesSetToNull, 'direct_debit_merchant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('direct_debit_merchant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['direct_debit_merchant_id'] = $direct_debit_merchant_id;

        return $this;
    }

    /**
     * Gets direct_debit_connector_id
     *
     * @return string|null
     */
    public function getDirectDebitConnectorId()
    {
        return $this->container['direct_debit_connector_id'];
    }

    /**
     * Sets direct_debit_connector_id
     *
     * @param string|null $direct_debit_connector_id direct_debit_connector_id
     *
     * @return self
     */
    public function setDirectDebitConnectorId($direct_debit_connector_id)
    {
        if (is_null($direct_debit_connector_id)) {
            array_push($this->openAPINullablesSetToNull, 'direct_debit_connector_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('direct_debit_connector_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['direct_debit_connector_id'] = $direct_debit_connector_id;

        return $this;
    }

    /**
     * Gets default_account_type
     *
     * @return string|null
     */
    public function getDefaultAccountType()
    {
        return $this->container['default_account_type'];
    }

    /**
     * Sets default_account_type
     *
     * @param string|null $default_account_type Enumeration of all possible account types.
     *
     * @return self
     */
    public function setDefaultAccountType($default_account_type)
    {
        if (is_null($default_account_type)) {
            throw new \InvalidArgumentException('non-nullable default_account_type cannot be null');
        }
        $allowedValues = $this->getDefaultAccountTypeAllowableValues();
        if (!in_array($default_account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_account_type', must be one of '%s'",
                    $default_account_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_account_type'] = $default_account_type;

        return $this;
    }

    /**
     * Gets accounts
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsAccountEntity[]|null
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsAccountEntity[]|null $accounts accounts
     *
     * @return self
     */
    public function setAccounts($accounts)
    {
        if (is_null($accounts)) {
            array_push($this->openAPINullablesSetToNull, 'accounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets beneficiaries
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsBeneficiaryEntity[]|null
     */
    public function getBeneficiaries()
    {
        return $this->container['beneficiaries'];
    }

    /**
     * Sets beneficiaries
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsBeneficiaryEntity[]|null $beneficiaries beneficiaries
     *
     * @return self
     */
    public function setBeneficiaries($beneficiaries)
    {
        if (is_null($beneficiaries)) {
            array_push($this->openAPINullablesSetToNull, 'beneficiaries');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('beneficiaries', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['beneficiaries'] = $beneficiaries;

        return $this;
    }

    /**
     * Gets beneficiary_groups
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsBeneficiaryGroupEntity[]|null
     */
    public function getBeneficiaryGroups()
    {
        return $this->container['beneficiary_groups'];
    }

    /**
     * Sets beneficiary_groups
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsBeneficiaryGroupEntity[]|null $beneficiary_groups beneficiary_groups
     *
     * @return self
     */
    public function setBeneficiaryGroups($beneficiary_groups)
    {
        if (is_null($beneficiary_groups)) {
            array_push($this->openAPINullablesSetToNull, 'beneficiary_groups');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('beneficiary_groups', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['beneficiary_groups'] = $beneficiary_groups;

        return $this;
    }

    /**
     * Gets payment_requests
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestEntity[]|null
     */
    public function getPaymentRequests()
    {
        return $this->container['payment_requests'];
    }

    /**
     * Sets payment_requests
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestEntity[]|null $payment_requests payment_requests
     *
     * @return self
     */
    public function setPaymentRequests($payment_requests)
    {
        if (is_null($payment_requests)) {
            array_push($this->openAPINullablesSetToNull, 'payment_requests');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_requests', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_requests'] = $payment_requests;

        return $this;
    }

    /**
     * Gets user_roles
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsUserRoleEntity[]|null
     */
    public function getUserRoles()
    {
        return $this->container['user_roles'];
    }

    /**
     * Sets user_roles
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsUserRoleEntity[]|null $user_roles user_roles
     *
     * @return self
     */
    public function setUserRoles($user_roles)
    {
        if (is_null($user_roles)) {
            array_push($this->openAPINullablesSetToNull, 'user_roles');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_roles', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_roles'] = $user_roles;

        return $this;
    }

    /**
     * Gets merchant_tokens
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsMerchantTokenEntity[]|null
     */
    public function getMerchantTokens()
    {
        return $this->container['merchant_tokens'];
    }

    /**
     * Sets merchant_tokens
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsMerchantTokenEntity[]|null $merchant_tokens merchant_tokens
     *
     * @return self
     */
    public function setMerchantTokens($merchant_tokens)
    {
        if (is_null($merchant_tokens)) {
            array_push($this->openAPINullablesSetToNull, 'merchant_tokens');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchant_tokens', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchant_tokens'] = $merchant_tokens;

        return $this;
    }

    /**
     * Gets merchant_business_settings
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsMerchantBusinessSettingEntity[]|null
     */
    public function getMerchantBusinessSettings()
    {
        return $this->container['merchant_business_settings'];
    }

    /**
     * Sets merchant_business_settings
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsMerchantBusinessSettingEntity[]|null $merchant_business_settings merchant_business_settings
     *
     * @return self
     */
    public function setMerchantBusinessSettings($merchant_business_settings)
    {
        if (is_null($merchant_business_settings)) {
            array_push($this->openAPINullablesSetToNull, 'merchant_business_settings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchant_business_settings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchant_business_settings'] = $merchant_business_settings;

        return $this;
    }

    /**
     * Gets merchant_notifications
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsMerchantNotificationEntity[]|null
     */
    public function getMerchantNotifications()
    {
        return $this->container['merchant_notifications'];
    }

    /**
     * Sets merchant_notifications
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsMerchantNotificationEntity[]|null $merchant_notifications merchant_notifications
     *
     * @return self
     */
    public function setMerchantNotifications($merchant_notifications)
    {
        if (is_null($merchant_notifications)) {
            array_push($this->openAPINullablesSetToNull, 'merchant_notifications');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchant_notifications', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchant_notifications'] = $merchant_notifications;

        return $this;
    }

    /**
     * Gets tokenised_cards
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsTokenisedCardsEntity[]|null
     */
    public function getTokenisedCards()
    {
        return $this->container['tokenised_cards'];
    }

    /**
     * Sets tokenised_cards
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsTokenisedCardsEntity[]|null $tokenised_cards tokenised_cards
     *
     * @return self
     */
    public function setTokenisedCards($tokenised_cards)
    {
        if (is_null($tokenised_cards)) {
            array_push($this->openAPINullablesSetToNull, 'tokenised_cards');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tokenised_cards', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tokenised_cards'] = $tokenised_cards;

        return $this;
    }

    /**
     * Gets merchant_card_settings
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsMerchantCardSettingEntity[]|null
     */
    public function getMerchantCardSettings()
    {
        return $this->container['merchant_card_settings'];
    }

    /**
     * Sets merchant_card_settings
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsMerchantCardSettingEntity[]|null $merchant_card_settings merchant_card_settings
     *
     * @return self
     */
    public function setMerchantCardSettings($merchant_card_settings)
    {
        if (is_null($merchant_card_settings)) {
            array_push($this->openAPINullablesSetToNull, 'merchant_card_settings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchant_card_settings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchant_card_settings'] = $merchant_card_settings;

        return $this;
    }

    /**
     * Gets user_invites
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsUserInviteEntity[]|null
     */
    public function getUserInvites()
    {
        return $this->container['user_invites'];
    }

    /**
     * Sets user_invites
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsUserInviteEntity[]|null $user_invites user_invites
     *
     * @return self
     */
    public function setUserInvites($user_invites)
    {
        if (is_null($user_invites)) {
            array_push($this->openAPINullablesSetToNull, 'user_invites');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_invites', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_invites'] = $user_invites;

        return $this;
    }

    /**
     * Gets open_banking_records
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsOpenBankingConsentEntity[]|null
     */
    public function getOpenBankingRecords()
    {
        return $this->container['open_banking_records'];
    }

    /**
     * Sets open_banking_records
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsOpenBankingConsentEntity[]|null $open_banking_records open_banking_records
     *
     * @return self
     */
    public function setOpenBankingRecords($open_banking_records)
    {
        if (is_null($open_banking_records)) {
            array_push($this->openAPINullablesSetToNull, 'open_banking_records');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('open_banking_records', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['open_banking_records'] = $open_banking_records;

        return $this;
    }

    /**
     * Gets merchant_card_processing_settings
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsMerchantCardProcessingSettingsEntity|null
     */
    public function getMerchantCardProcessingSettings()
    {
        return $this->container['merchant_card_processing_settings'];
    }

    /**
     * Sets merchant_card_processing_settings
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsMerchantCardProcessingSettingsEntity|null $merchant_card_processing_settings merchant_card_processing_settings
     *
     * @return self
     */
    public function setMerchantCardProcessingSettings($merchant_card_processing_settings)
    {
        if (is_null($merchant_card_processing_settings)) {
            throw new \InvalidArgumentException('non-nullable merchant_card_processing_settings cannot be null');
        }
        $this->container['merchant_card_processing_settings'] = $merchant_card_processing_settings;

        return $this;
    }

    /**
     * Gets merchant_bank_settings
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsMerchantBankSettingsEntity[]|null
     */
    public function getMerchantBankSettings()
    {
        return $this->container['merchant_bank_settings'];
    }

    /**
     * Sets merchant_bank_settings
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsMerchantBankSettingsEntity[]|null $merchant_bank_settings merchant_bank_settings
     *
     * @return self
     */
    public function setMerchantBankSettings($merchant_bank_settings)
    {
        if (is_null($merchant_bank_settings)) {
            array_push($this->openAPINullablesSetToNull, 'merchant_bank_settings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchant_bank_settings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchant_bank_settings'] = $merchant_bank_settings;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsTagEntity[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsTagEntity[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            array_push($this->openAPINullablesSetToNull, 'tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets payruns
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunEntity[]|null
     */
    public function getPayruns()
    {
        return $this->container['payruns'];
    }

    /**
     * Sets payruns
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunEntity[]|null $payruns payruns
     *
     * @return self
     */
    public function setPayruns($payruns)
    {
        if (is_null($payruns)) {
            array_push($this->openAPINullablesSetToNull, 'payruns');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payruns', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payruns'] = $payruns;

        return $this;
    }

    /**
     * Gets merchant_reports
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsReportEntity[]|null
     */
    public function getMerchantReports()
    {
        return $this->container['merchant_reports'];
    }

    /**
     * Sets merchant_reports
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsReportEntity[]|null $merchant_reports merchant_reports
     *
     * @return self
     */
    public function setMerchantReports($merchant_reports)
    {
        if (is_null($merchant_reports)) {
            array_push($this->openAPINullablesSetToNull, 'merchant_reports');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchant_reports', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchant_reports'] = $merchant_reports;

        return $this;
    }

    /**
     * Gets merchant_report_results
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsReportResultEntity[]|null
     */
    public function getMerchantReportResults()
    {
        return $this->container['merchant_report_results'];
    }

    /**
     * Sets merchant_report_results
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsReportResultEntity[]|null $merchant_report_results merchant_report_results
     *
     * @return self
     */
    public function setMerchantReportResults($merchant_report_results)
    {
        if (is_null($merchant_report_results)) {
            array_push($this->openAPINullablesSetToNull, 'merchant_report_results');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchant_report_results', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchant_report_results'] = $merchant_report_results;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsRoleEntity[]|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsRoleEntity[]|null $roles roles
     *
     * @return self
     */
    public function setRoles($roles)
    {
        if (is_null($roles)) {
            array_push($this->openAPINullablesSetToNull, 'roles');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roles', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets role_user_merchants
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsRoleUserMerchantEntity[]|null
     */
    public function getRoleUserMerchants()
    {
        return $this->container['role_user_merchants'];
    }

    /**
     * Sets role_user_merchants
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsRoleUserMerchantEntity[]|null $role_user_merchants role_user_merchants
     *
     * @return self
     */
    public function setRoleUserMerchants($role_user_merchants)
    {
        if (is_null($role_user_merchants)) {
            array_push($this->openAPINullablesSetToNull, 'role_user_merchants');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('role_user_merchants', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['role_user_merchants'] = $role_user_merchants;

        return $this;
    }

    /**
     * Gets third_party_application
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsThirdPartyApplicationEntity|null
     */
    public function getThirdPartyApplication()
    {
        return $this->container['third_party_application'];
    }

    /**
     * Sets third_party_application
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsThirdPartyApplicationEntity|null $third_party_application third_party_application
     *
     * @return self
     */
    public function setThirdPartyApplication($third_party_application)
    {
        if (is_null($third_party_application)) {
            throw new \InvalidArgumentException('non-nullable third_party_application cannot be null');
        }
        $this->container['third_party_application'] = $third_party_application;

        return $this;
    }

    /**
     * Gets default_banking_circle_physical_account
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsBankingCirclePhysicalAccountEntity|null
     */
    public function getDefaultBankingCirclePhysicalAccount()
    {
        return $this->container['default_banking_circle_physical_account'];
    }

    /**
     * Sets default_banking_circle_physical_account
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsBankingCirclePhysicalAccountEntity|null $default_banking_circle_physical_account default_banking_circle_physical_account
     *
     * @return self
     */
    public function setDefaultBankingCirclePhysicalAccount($default_banking_circle_physical_account)
    {
        if (is_null($default_banking_circle_physical_account)) {
            throw new \InvalidArgumentException('non-nullable default_banking_circle_physical_account cannot be null');
        }
        $this->container['default_banking_circle_physical_account'] = $default_banking_circle_physical_account;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


