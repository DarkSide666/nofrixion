<?php
/**
 * NoFrixionMoneyMoovModelsMerchant
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionMoneyMoovModelsMerchant Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionMoneyMoovModelsMerchant implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.MoneyMoov.Models.Merchant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'enabled' => 'bool',
        'company_id' => 'string',
        'merchant_category_code' => 'string',
        'short_name' => 'string',
        'trading_name' => 'string',
        'payment_account_limit' => 'int',
        'inserted' => '\DateTime',
        'jurisdiction' => 'string',
        'hosted_pay_version' => 'int',
        'web_hook_limit' => 'int',
        'display_qr_on_hosted_pay' => 'bool',
        'modulr_customer_id' => 'string',
        'supported_payment_methods_list' => 'string[]',
        'your_role' => 'string',
        'user_roles' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRole[]',
        'tags' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag[]',
        'payment_accounts' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'name' => null,
        'enabled' => null,
        'company_id' => 'uuid',
        'merchant_category_code' => null,
        'short_name' => null,
        'trading_name' => null,
        'payment_account_limit' => 'int32',
        'inserted' => 'date-time',
        'jurisdiction' => null,
        'hosted_pay_version' => 'int32',
        'web_hook_limit' => 'int32',
        'display_qr_on_hosted_pay' => null,
        'modulr_customer_id' => null,
        'supported_payment_methods_list' => null,
        'your_role' => null,
        'user_roles' => null,
        'tags' => null,
        'payment_accounts' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => true,
        'enabled' => false,
        'company_id' => true,
        'merchant_category_code' => true,
        'short_name' => true,
        'trading_name' => true,
        'payment_account_limit' => false,
        'inserted' => false,
        'jurisdiction' => false,
        'hosted_pay_version' => false,
        'web_hook_limit' => false,
        'display_qr_on_hosted_pay' => false,
        'modulr_customer_id' => true,
        'supported_payment_methods_list' => true,
        'your_role' => false,
        'user_roles' => true,
        'tags' => true,
        'payment_accounts' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'enabled' => 'enabled',
        'company_id' => 'companyID',
        'merchant_category_code' => 'merchantCategoryCode',
        'short_name' => 'shortName',
        'trading_name' => 'tradingName',
        'payment_account_limit' => 'paymentAccountLimit',
        'inserted' => 'inserted',
        'jurisdiction' => 'jurisdiction',
        'hosted_pay_version' => 'hostedPayVersion',
        'web_hook_limit' => 'webHookLimit',
        'display_qr_on_hosted_pay' => 'displayQrOnHostedPay',
        'modulr_customer_id' => 'modulrCustomerID',
        'supported_payment_methods_list' => 'supportedPaymentMethodsList',
        'your_role' => 'yourRole',
        'user_roles' => 'userRoles',
        'tags' => 'tags',
        'payment_accounts' => 'paymentAccounts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'enabled' => 'setEnabled',
        'company_id' => 'setCompanyId',
        'merchant_category_code' => 'setMerchantCategoryCode',
        'short_name' => 'setShortName',
        'trading_name' => 'setTradingName',
        'payment_account_limit' => 'setPaymentAccountLimit',
        'inserted' => 'setInserted',
        'jurisdiction' => 'setJurisdiction',
        'hosted_pay_version' => 'setHostedPayVersion',
        'web_hook_limit' => 'setWebHookLimit',
        'display_qr_on_hosted_pay' => 'setDisplayQrOnHostedPay',
        'modulr_customer_id' => 'setModulrCustomerId',
        'supported_payment_methods_list' => 'setSupportedPaymentMethodsList',
        'your_role' => 'setYourRole',
        'user_roles' => 'setUserRoles',
        'tags' => 'setTags',
        'payment_accounts' => 'setPaymentAccounts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'enabled' => 'getEnabled',
        'company_id' => 'getCompanyId',
        'merchant_category_code' => 'getMerchantCategoryCode',
        'short_name' => 'getShortName',
        'trading_name' => 'getTradingName',
        'payment_account_limit' => 'getPaymentAccountLimit',
        'inserted' => 'getInserted',
        'jurisdiction' => 'getJurisdiction',
        'hosted_pay_version' => 'getHostedPayVersion',
        'web_hook_limit' => 'getWebHookLimit',
        'display_qr_on_hosted_pay' => 'getDisplayQrOnHostedPay',
        'modulr_customer_id' => 'getModulrCustomerId',
        'supported_payment_methods_list' => 'getSupportedPaymentMethodsList',
        'your_role' => 'getYourRole',
        'user_roles' => 'getUserRoles',
        'tags' => 'getTags',
        'payment_accounts' => 'getPaymentAccounts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const JURISDICTION_IE = 'IE';
    public const JURISDICTION_UK = 'UK';
    public const JURISDICTION_EU = 'EU';
    public const SUPPORTED_PAYMENT_METHODS_LIST_NONE = 'None';
    public const SUPPORTED_PAYMENT_METHODS_LIST_CARD = 'card';
    public const SUPPORTED_PAYMENT_METHODS_LIST_PISP = 'pisp';
    public const SUPPORTED_PAYMENT_METHODS_LIST_LIGHTNING = 'lightning';
    public const SUPPORTED_PAYMENT_METHODS_LIST_CARDTOKEN = 'cardtoken';
    public const SUPPORTED_PAYMENT_METHODS_LIST_APPLE_PAY = 'applePay';
    public const SUPPORTED_PAYMENT_METHODS_LIST_GOOGLE_PAY = 'googlePay';
    public const SUPPORTED_PAYMENT_METHODS_LIST_DIRECT_DEBIT = 'directDebit';
    public const YOUR_ROLE_NEWLY_REGISTERED = 'NewlyRegistered';
    public const YOUR_ROLE_PAYMENT_REQUESTOR = 'PaymentRequestor';
    public const YOUR_ROLE_USER = 'User';
    public const YOUR_ROLE_APPROVER = 'Approver';
    public const YOUR_ROLE_ADMIN_APPROVER = 'AdminApprover';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJurisdictionAllowableValues()
    {
        return [
            self::JURISDICTION_IE,
            self::JURISDICTION_UK,
            self::JURISDICTION_EU,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupportedPaymentMethodsListAllowableValues()
    {
        return [
            self::SUPPORTED_PAYMENT_METHODS_LIST_NONE,
            self::SUPPORTED_PAYMENT_METHODS_LIST_CARD,
            self::SUPPORTED_PAYMENT_METHODS_LIST_PISP,
            self::SUPPORTED_PAYMENT_METHODS_LIST_LIGHTNING,
            self::SUPPORTED_PAYMENT_METHODS_LIST_CARDTOKEN,
            self::SUPPORTED_PAYMENT_METHODS_LIST_APPLE_PAY,
            self::SUPPORTED_PAYMENT_METHODS_LIST_GOOGLE_PAY,
            self::SUPPORTED_PAYMENT_METHODS_LIST_DIRECT_DEBIT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getYourRoleAllowableValues()
    {
        return [
            self::YOUR_ROLE_NEWLY_REGISTERED,
            self::YOUR_ROLE_PAYMENT_REQUESTOR,
            self::YOUR_ROLE_USER,
            self::YOUR_ROLE_APPROVER,
            self::YOUR_ROLE_ADMIN_APPROVER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('company_id', $data ?? [], null);
        $this->setIfExists('merchant_category_code', $data ?? [], null);
        $this->setIfExists('short_name', $data ?? [], null);
        $this->setIfExists('trading_name', $data ?? [], null);
        $this->setIfExists('payment_account_limit', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('jurisdiction', $data ?? [], null);
        $this->setIfExists('hosted_pay_version', $data ?? [], null);
        $this->setIfExists('web_hook_limit', $data ?? [], null);
        $this->setIfExists('display_qr_on_hosted_pay', $data ?? [], null);
        $this->setIfExists('modulr_customer_id', $data ?? [], null);
        $this->setIfExists('supported_payment_methods_list', $data ?? [], null);
        $this->setIfExists('your_role', $data ?? [], null);
        $this->setIfExists('user_roles', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('payment_accounts', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getJurisdictionAllowableValues();
        if (!is_null($this->container['jurisdiction']) && !in_array($this->container['jurisdiction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'jurisdiction', must be one of '%s'",
                $this->container['jurisdiction'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getYourRoleAllowableValues();
        if (!is_null($this->container['your_role']) && !in_array($this->container['your_role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'your_role', must be one of '%s'",
                $this->container['your_role'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique ID for the merchant.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The registered business name of the merchant.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return string|null
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param string|null $company_id The Company ID recorded in the Compliance system.
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        if (is_null($company_id)) {
            array_push($this->openAPINullablesSetToNull, 'company_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets merchant_category_code
     *
     * @return string|null
     */
    public function getMerchantCategoryCode()
    {
        return $this->container['merchant_category_code'];
    }

    /**
     * Sets merchant_category_code
     *
     * @param string|null $merchant_category_code The industry code that represents the merchant's primary trading activity.
     *
     * @return self
     */
    public function setMerchantCategoryCode($merchant_category_code)
    {
        if (is_null($merchant_category_code)) {
            array_push($this->openAPINullablesSetToNull, 'merchant_category_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchant_category_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchant_category_code'] = $merchant_category_code;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return string|null
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string|null $short_name A URL friendly shortish name for the merchant. Principal purpose is  to use in the hosted payment page URL.
     *
     * @return self
     */
    public function setShortName($short_name)
    {
        if (is_null($short_name)) {
            array_push($this->openAPINullablesSetToNull, 'short_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets trading_name
     *
     * @return string|null
     */
    public function getTradingName()
    {
        return $this->container['trading_name'];
    }

    /**
     * Sets trading_name
     *
     * @param string|null $trading_name An optional trading name. If not set the Name field will be used .
     *
     * @return self
     */
    public function setTradingName($trading_name)
    {
        if (is_null($trading_name)) {
            array_push($this->openAPINullablesSetToNull, 'trading_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trading_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trading_name'] = $trading_name;

        return $this;
    }

    /**
     * Gets payment_account_limit
     *
     * @return int|null
     */
    public function getPaymentAccountLimit()
    {
        return $this->container['payment_account_limit'];
    }

    /**
     * Sets payment_account_limit
     *
     * @param int|null $payment_account_limit The maximum number of payment accounts that can be created for the Merchant.  To increase the limit contact support.
     *
     * @return self
     */
    public function setPaymentAccountLimit($payment_account_limit)
    {
        if (is_null($payment_account_limit)) {
            throw new \InvalidArgumentException('non-nullable payment_account_limit cannot be null');
        }
        $this->container['payment_account_limit'] = $payment_account_limit;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted Timestamp the merchant was added to MoneyMoov.
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets jurisdiction
     *
     * @return string|null
     */
    public function getJurisdiction()
    {
        return $this->container['jurisdiction'];
    }

    /**
     * Sets jurisdiction
     *
     * @param string|null $jurisdiction The jurisdiction the merchant entity is incorporated or established in.
     *
     * @return self
     */
    public function setJurisdiction($jurisdiction)
    {
        if (is_null($jurisdiction)) {
            throw new \InvalidArgumentException('non-nullable jurisdiction cannot be null');
        }
        $allowedValues = $this->getJurisdictionAllowableValues();
        if (!in_array($jurisdiction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'jurisdiction', must be one of '%s'",
                    $jurisdiction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['jurisdiction'] = $jurisdiction;

        return $this;
    }

    /**
     * Gets hosted_pay_version
     *
     * @return int|null
     */
    public function getHostedPayVersion()
    {
        return $this->container['hosted_pay_version'];
    }

    /**
     * Sets hosted_pay_version
     *
     * @param int|null $hosted_pay_version The version of the hosted payment page to use with the merchant.
     *
     * @return self
     */
    public function setHostedPayVersion($hosted_pay_version)
    {
        if (is_null($hosted_pay_version)) {
            throw new \InvalidArgumentException('non-nullable hosted_pay_version cannot be null');
        }
        $this->container['hosted_pay_version'] = $hosted_pay_version;

        return $this;
    }

    /**
     * Gets web_hook_limit
     *
     * @return int|null
     */
    public function getWebHookLimit()
    {
        return $this->container['web_hook_limit'];
    }

    /**
     * Sets web_hook_limit
     *
     * @param int|null $web_hook_limit The maximum number of web hooks that can be created for the Merchant.  To increase the limit contact support.
     *
     * @return self
     */
    public function setWebHookLimit($web_hook_limit)
    {
        if (is_null($web_hook_limit)) {
            throw new \InvalidArgumentException('non-nullable web_hook_limit cannot be null');
        }
        $this->container['web_hook_limit'] = $web_hook_limit;

        return $this;
    }

    /**
     * Gets display_qr_on_hosted_pay
     *
     * @return bool|null
     */
    public function getDisplayQrOnHostedPay()
    {
        return $this->container['display_qr_on_hosted_pay'];
    }

    /**
     * Sets display_qr_on_hosted_pay
     *
     * @param bool|null $display_qr_on_hosted_pay Indicates if a QR Code containing the payment link should be displayed  on the hosted payment page.
     *
     * @return self
     */
    public function setDisplayQrOnHostedPay($display_qr_on_hosted_pay)
    {
        if (is_null($display_qr_on_hosted_pay)) {
            throw new \InvalidArgumentException('non-nullable display_qr_on_hosted_pay cannot be null');
        }
        $this->container['display_qr_on_hosted_pay'] = $display_qr_on_hosted_pay;

        return $this;
    }

    /**
     * Gets modulr_customer_id
     *
     * @return string|null
     */
    public function getModulrCustomerId()
    {
        return $this->container['modulr_customer_id'];
    }

    /**
     * Sets modulr_customer_id
     *
     * @param string|null $modulr_customer_id For internal use only.
     *
     * @return self
     */
    public function setModulrCustomerId($modulr_customer_id)
    {
        if (is_null($modulr_customer_id)) {
            array_push($this->openAPINullablesSetToNull, 'modulr_customer_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('modulr_customer_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['modulr_customer_id'] = $modulr_customer_id;

        return $this;
    }

    /**
     * Gets supported_payment_methods_list
     *
     * @return string[]|null
     */
    public function getSupportedPaymentMethodsList()
    {
        return $this->container['supported_payment_methods_list'];
    }

    /**
     * Sets supported_payment_methods_list
     *
     * @param string[]|null $supported_payment_methods_list The payment methods that are configured and supported for this merchant.
     *
     * @return self
     */
    public function setSupportedPaymentMethodsList($supported_payment_methods_list)
    {
        if (is_null($supported_payment_methods_list)) {
            array_push($this->openAPINullablesSetToNull, 'supported_payment_methods_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supported_payment_methods_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getSupportedPaymentMethodsListAllowableValues();
        if (!is_null($supported_payment_methods_list) && array_diff($supported_payment_methods_list, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'supported_payment_methods_list', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['supported_payment_methods_list'] = $supported_payment_methods_list;

        return $this;
    }

    /**
     * Gets your_role
     *
     * @return string|null
     */
    public function getYourRole()
    {
        return $this->container['your_role'];
    }

    /**
     * Sets your_role
     *
     * @param string|null $your_role The role of the identity that loaded the merchant record.
     *
     * @return self
     */
    public function setYourRole($your_role)
    {
        if (is_null($your_role)) {
            throw new \InvalidArgumentException('non-nullable your_role cannot be null');
        }
        $allowedValues = $this->getYourRoleAllowableValues();
        if (!in_array($your_role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'your_role', must be one of '%s'",
                    $your_role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['your_role'] = $your_role;

        return $this;
    }

    /**
     * Gets user_roles
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRole[]|null
     */
    public function getUserRoles()
    {
        return $this->container['user_roles'];
    }

    /**
     * Sets user_roles
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUserRole[]|null $user_roles The list of users that have been assigned a role on the merchant.
     *
     * @return self
     */
    public function setUserRoles($user_roles)
    {
        if (is_null($user_roles)) {
            array_push($this->openAPINullablesSetToNull, 'user_roles');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_roles', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_roles'] = $user_roles;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsTag[]|null $tags An optional list of descriptive tags that can be used on merchant entities  such as payment requests.
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            array_push($this->openAPINullablesSetToNull, 'tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets payment_accounts
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[]|null
     */
    public function getPaymentAccounts()
    {
        return $this->container['payment_accounts'];
    }

    /**
     * Sets payment_accounts
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentAccount[]|null $payment_accounts payment_accounts
     *
     * @return self
     */
    public function setPaymentAccounts($payment_accounts)
    {
        if (is_null($payment_accounts)) {
            array_push($this->openAPINullablesSetToNull, 'payment_accounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_accounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_accounts'] = $payment_accounts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


