<?php
/**
 * NoFrixionDataModelsPaymentRequestEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionDataModelsPaymentRequestEntity Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionDataModelsPaymentRequestEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.DataModels.PaymentRequestEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'merchant_id' => 'string',
        'amount' => 'float',
        'currency' => 'string',
        'payment_method_types' => 'string',
        'description' => 'string',
        'customer_id' => 'string',
        'order_id' => 'string',
        'inserted' => '\DateTime',
        'last_updated' => '\DateTime',
        'pisp_account_id' => 'string',
        'base_origin_url' => 'string',
        'callback_url' => 'string',
        'failure_callback_url' => 'string',
        'success_web_hook_url' => 'string',
        'card_authorize_only' => 'bool',
        'card_create_token' => 'bool',
        'card_create_token_mode' => 'string',
        'ignore_address_verification' => 'bool',
        'card_ignore_cvn' => 'bool',
        'lightning_invoice' => 'string',
        'card_processor_merchant_id' => 'string',
        'status' => 'string',
        'partial_payment_method' => 'string',
        'customer_email_address' => 'string',
        'card_stripe_payment_intent_id' => 'string',
        'card_stripe_payment_intent_secret' => 'string',
        'notification_email_addresses' => 'string',
        'priority_bank_id' => 'string',
        'title' => 'string',
        'partial_payment_steps' => 'string',
        'amount_received' => 'float',
        'amount_refunded' => 'float',
        'amount_pending' => 'float',
        'created_by_user_id' => 'string',
        'merchant_token_description' => 'string',
        'is_archived' => 'bool',
        'lightning_invoice_expires_at' => '\DateTime',
        'lightning_invoice_r_hash' => 'string',
        'pisp_recipient_reference' => 'string',
        'current_state' => 'string',
        'correlation_id' => 'string',
        'scheduled_id' => 'string',
        'is_card' => 'bool',
        'payrun_id' => 'string',
        'priority_bank' => '\Nofrixion\Client\Model\NoFrixionDataModelsBankEntity',
        'merchant' => '\Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity',
        'payrun' => '\Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunEntity',
        'created_by_user' => '\Nofrixion\Client\Model\NoFrixionDataModelsUserEntity',
        'payment_request_addresses' => '\Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestAddressEntity[]',
        'payment_request_events' => '\Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestEventEntity[]',
        'tokenised_cards' => '\Nofrixion\Client\Model\NoFrixionDataModelsTokenisedCardsEntity[]',
        'payment_request_keys' => '\Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestKeysEntity',
        'payment_request_tags' => '\Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestTagEntity[]',
        'transactions' => '\Nofrixion\Client\Model\NoFrixionDataModelsTransactionEntity[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'merchant_id' => 'uuid',
        'amount' => 'double',
        'currency' => null,
        'payment_method_types' => null,
        'description' => null,
        'customer_id' => null,
        'order_id' => null,
        'inserted' => 'date-time',
        'last_updated' => 'date-time',
        'pisp_account_id' => 'uuid',
        'base_origin_url' => null,
        'callback_url' => null,
        'failure_callback_url' => null,
        'success_web_hook_url' => null,
        'card_authorize_only' => null,
        'card_create_token' => null,
        'card_create_token_mode' => null,
        'ignore_address_verification' => null,
        'card_ignore_cvn' => null,
        'lightning_invoice' => null,
        'card_processor_merchant_id' => null,
        'status' => null,
        'partial_payment_method' => null,
        'customer_email_address' => null,
        'card_stripe_payment_intent_id' => null,
        'card_stripe_payment_intent_secret' => null,
        'notification_email_addresses' => null,
        'priority_bank_id' => 'uuid',
        'title' => null,
        'partial_payment_steps' => null,
        'amount_received' => 'double',
        'amount_refunded' => 'double',
        'amount_pending' => 'double',
        'created_by_user_id' => 'uuid',
        'merchant_token_description' => null,
        'is_archived' => null,
        'lightning_invoice_expires_at' => 'date-time',
        'lightning_invoice_r_hash' => null,
        'pisp_recipient_reference' => null,
        'current_state' => null,
        'correlation_id' => 'uuid',
        'scheduled_id' => 'uuid',
        'is_card' => null,
        'payrun_id' => 'uuid',
        'priority_bank' => null,
        'merchant' => null,
        'payrun' => null,
        'created_by_user' => null,
        'payment_request_addresses' => null,
        'payment_request_events' => null,
        'tokenised_cards' => null,
        'payment_request_keys' => null,
        'payment_request_tags' => null,
        'transactions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'merchant_id' => false,
        'amount' => false,
        'currency' => false,
        'payment_method_types' => false,
        'description' => true,
        'customer_id' => true,
        'order_id' => true,
        'inserted' => false,
        'last_updated' => false,
        'pisp_account_id' => true,
        'base_origin_url' => true,
        'callback_url' => true,
        'failure_callback_url' => true,
        'success_web_hook_url' => true,
        'card_authorize_only' => false,
        'card_create_token' => false,
        'card_create_token_mode' => false,
        'ignore_address_verification' => false,
        'card_ignore_cvn' => false,
        'lightning_invoice' => true,
        'card_processor_merchant_id' => true,
        'status' => false,
        'partial_payment_method' => false,
        'customer_email_address' => true,
        'card_stripe_payment_intent_id' => true,
        'card_stripe_payment_intent_secret' => true,
        'notification_email_addresses' => true,
        'priority_bank_id' => true,
        'title' => true,
        'partial_payment_steps' => true,
        'amount_received' => false,
        'amount_refunded' => false,
        'amount_pending' => false,
        'created_by_user_id' => true,
        'merchant_token_description' => true,
        'is_archived' => false,
        'lightning_invoice_expires_at' => true,
        'lightning_invoice_r_hash' => true,
        'pisp_recipient_reference' => true,
        'current_state' => true,
        'correlation_id' => false,
        'scheduled_id' => true,
        'is_card' => false,
        'payrun_id' => true,
        'priority_bank' => false,
        'merchant' => false,
        'payrun' => false,
        'created_by_user' => false,
        'payment_request_addresses' => true,
        'payment_request_events' => true,
        'tokenised_cards' => true,
        'payment_request_keys' => false,
        'payment_request_tags' => true,
        'transactions' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'merchant_id' => 'merchantID',
        'amount' => 'amount',
        'currency' => 'currency',
        'payment_method_types' => 'paymentMethodTypes',
        'description' => 'description',
        'customer_id' => 'customerID',
        'order_id' => 'orderID',
        'inserted' => 'inserted',
        'last_updated' => 'lastUpdated',
        'pisp_account_id' => 'pispAccountID',
        'base_origin_url' => 'baseOriginUrl',
        'callback_url' => 'callbackUrl',
        'failure_callback_url' => 'failureCallbackUrl',
        'success_web_hook_url' => 'successWebHookUrl',
        'card_authorize_only' => 'cardAuthorizeOnly',
        'card_create_token' => 'cardCreateToken',
        'card_create_token_mode' => 'cardCreateTokenMode',
        'ignore_address_verification' => 'ignoreAddressVerification',
        'card_ignore_cvn' => 'cardIgnoreCVN',
        'lightning_invoice' => 'lightningInvoice',
        'card_processor_merchant_id' => 'cardProcessorMerchantID',
        'status' => 'status',
        'partial_payment_method' => 'partialPaymentMethod',
        'customer_email_address' => 'customerEmailAddress',
        'card_stripe_payment_intent_id' => 'cardStripePaymentIntentID',
        'card_stripe_payment_intent_secret' => 'cardStripePaymentIntentSecret',
        'notification_email_addresses' => 'notificationEmailAddresses',
        'priority_bank_id' => 'priorityBankID',
        'title' => 'title',
        'partial_payment_steps' => 'partialPaymentSteps',
        'amount_received' => 'amountReceived',
        'amount_refunded' => 'amountRefunded',
        'amount_pending' => 'amountPending',
        'created_by_user_id' => 'createdByUserID',
        'merchant_token_description' => 'merchantTokenDescription',
        'is_archived' => 'isArchived',
        'lightning_invoice_expires_at' => 'lightningInvoiceExpiresAt',
        'lightning_invoice_r_hash' => 'lightningInvoiceRHash',
        'pisp_recipient_reference' => 'pispRecipientReference',
        'current_state' => 'currentState',
        'correlation_id' => 'correlationId',
        'scheduled_id' => 'scheduledId',
        'is_card' => 'isCard',
        'payrun_id' => 'payrunID',
        'priority_bank' => 'priorityBank',
        'merchant' => 'merchant',
        'payrun' => 'payrun',
        'created_by_user' => 'createdByUser',
        'payment_request_addresses' => 'paymentRequestAddresses',
        'payment_request_events' => 'paymentRequestEvents',
        'tokenised_cards' => 'tokenisedCards',
        'payment_request_keys' => 'paymentRequestKeys',
        'payment_request_tags' => 'paymentRequestTags',
        'transactions' => 'transactions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'merchant_id' => 'setMerchantId',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'payment_method_types' => 'setPaymentMethodTypes',
        'description' => 'setDescription',
        'customer_id' => 'setCustomerId',
        'order_id' => 'setOrderId',
        'inserted' => 'setInserted',
        'last_updated' => 'setLastUpdated',
        'pisp_account_id' => 'setPispAccountId',
        'base_origin_url' => 'setBaseOriginUrl',
        'callback_url' => 'setCallbackUrl',
        'failure_callback_url' => 'setFailureCallbackUrl',
        'success_web_hook_url' => 'setSuccessWebHookUrl',
        'card_authorize_only' => 'setCardAuthorizeOnly',
        'card_create_token' => 'setCardCreateToken',
        'card_create_token_mode' => 'setCardCreateTokenMode',
        'ignore_address_verification' => 'setIgnoreAddressVerification',
        'card_ignore_cvn' => 'setCardIgnoreCvn',
        'lightning_invoice' => 'setLightningInvoice',
        'card_processor_merchant_id' => 'setCardProcessorMerchantId',
        'status' => 'setStatus',
        'partial_payment_method' => 'setPartialPaymentMethod',
        'customer_email_address' => 'setCustomerEmailAddress',
        'card_stripe_payment_intent_id' => 'setCardStripePaymentIntentId',
        'card_stripe_payment_intent_secret' => 'setCardStripePaymentIntentSecret',
        'notification_email_addresses' => 'setNotificationEmailAddresses',
        'priority_bank_id' => 'setPriorityBankId',
        'title' => 'setTitle',
        'partial_payment_steps' => 'setPartialPaymentSteps',
        'amount_received' => 'setAmountReceived',
        'amount_refunded' => 'setAmountRefunded',
        'amount_pending' => 'setAmountPending',
        'created_by_user_id' => 'setCreatedByUserId',
        'merchant_token_description' => 'setMerchantTokenDescription',
        'is_archived' => 'setIsArchived',
        'lightning_invoice_expires_at' => 'setLightningInvoiceExpiresAt',
        'lightning_invoice_r_hash' => 'setLightningInvoiceRHash',
        'pisp_recipient_reference' => 'setPispRecipientReference',
        'current_state' => 'setCurrentState',
        'correlation_id' => 'setCorrelationId',
        'scheduled_id' => 'setScheduledId',
        'is_card' => 'setIsCard',
        'payrun_id' => 'setPayrunId',
        'priority_bank' => 'setPriorityBank',
        'merchant' => 'setMerchant',
        'payrun' => 'setPayrun',
        'created_by_user' => 'setCreatedByUser',
        'payment_request_addresses' => 'setPaymentRequestAddresses',
        'payment_request_events' => 'setPaymentRequestEvents',
        'tokenised_cards' => 'setTokenisedCards',
        'payment_request_keys' => 'setPaymentRequestKeys',
        'payment_request_tags' => 'setPaymentRequestTags',
        'transactions' => 'setTransactions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'merchant_id' => 'getMerchantId',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'payment_method_types' => 'getPaymentMethodTypes',
        'description' => 'getDescription',
        'customer_id' => 'getCustomerId',
        'order_id' => 'getOrderId',
        'inserted' => 'getInserted',
        'last_updated' => 'getLastUpdated',
        'pisp_account_id' => 'getPispAccountId',
        'base_origin_url' => 'getBaseOriginUrl',
        'callback_url' => 'getCallbackUrl',
        'failure_callback_url' => 'getFailureCallbackUrl',
        'success_web_hook_url' => 'getSuccessWebHookUrl',
        'card_authorize_only' => 'getCardAuthorizeOnly',
        'card_create_token' => 'getCardCreateToken',
        'card_create_token_mode' => 'getCardCreateTokenMode',
        'ignore_address_verification' => 'getIgnoreAddressVerification',
        'card_ignore_cvn' => 'getCardIgnoreCvn',
        'lightning_invoice' => 'getLightningInvoice',
        'card_processor_merchant_id' => 'getCardProcessorMerchantId',
        'status' => 'getStatus',
        'partial_payment_method' => 'getPartialPaymentMethod',
        'customer_email_address' => 'getCustomerEmailAddress',
        'card_stripe_payment_intent_id' => 'getCardStripePaymentIntentId',
        'card_stripe_payment_intent_secret' => 'getCardStripePaymentIntentSecret',
        'notification_email_addresses' => 'getNotificationEmailAddresses',
        'priority_bank_id' => 'getPriorityBankId',
        'title' => 'getTitle',
        'partial_payment_steps' => 'getPartialPaymentSteps',
        'amount_received' => 'getAmountReceived',
        'amount_refunded' => 'getAmountRefunded',
        'amount_pending' => 'getAmountPending',
        'created_by_user_id' => 'getCreatedByUserId',
        'merchant_token_description' => 'getMerchantTokenDescription',
        'is_archived' => 'getIsArchived',
        'lightning_invoice_expires_at' => 'getLightningInvoiceExpiresAt',
        'lightning_invoice_r_hash' => 'getLightningInvoiceRHash',
        'pisp_recipient_reference' => 'getPispRecipientReference',
        'current_state' => 'getCurrentState',
        'correlation_id' => 'getCorrelationId',
        'scheduled_id' => 'getScheduledId',
        'is_card' => 'getIsCard',
        'payrun_id' => 'getPayrunId',
        'priority_bank' => 'getPriorityBank',
        'merchant' => 'getMerchant',
        'payrun' => 'getPayrun',
        'created_by_user' => 'getCreatedByUser',
        'payment_request_addresses' => 'getPaymentRequestAddresses',
        'payment_request_events' => 'getPaymentRequestEvents',
        'tokenised_cards' => 'getTokenisedCards',
        'payment_request_keys' => 'getPaymentRequestKeys',
        'payment_request_tags' => 'getPaymentRequestTags',
        'transactions' => 'getTransactions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CURRENCY_NONE = 'NONE';
    public const CURRENCY_GBP = 'GBP';
    public const CURRENCY_EUR = 'EUR';
    public const CURRENCY_BTC = 'BTC';
    public const PAYMENT_METHOD_TYPES_NONE = 'None';
    public const PAYMENT_METHOD_TYPES_CARD = 'card';
    public const PAYMENT_METHOD_TYPES_PISP = 'pisp';
    public const PAYMENT_METHOD_TYPES_LIGHTNING = 'lightning';
    public const PAYMENT_METHOD_TYPES_CARDTOKEN = 'cardtoken';
    public const PAYMENT_METHOD_TYPES_APPLE_PAY = 'applePay';
    public const PAYMENT_METHOD_TYPES_GOOGLE_PAY = 'googlePay';
    public const PAYMENT_METHOD_TYPES_DIRECT_DEBIT = 'directDebit';
    public const CARD_CREATE_TOKEN_MODE_NONE = 'None';
    public const CARD_CREATE_TOKEN_MODE_CONSENT_NOT_REQUIRED = 'ConsentNotRequired';
    public const CARD_CREATE_TOKEN_MODE_USER_CONSENT_REQUIRED = 'UserConsentRequired';
    public const STATUS_NONE = 'None';
    public const STATUS_FULLY_PAID = 'FullyPaid';
    public const STATUS_PARTIALLY_PAID = 'PartiallyPaid';
    public const STATUS_OVER_PAID = 'OverPaid';
    public const STATUS_VOIDED = 'Voided';
    public const STATUS_AUTHORIZED = 'Authorized';
    public const PARTIAL_PAYMENT_METHOD_NONE = 'None';
    public const PARTIAL_PAYMENT_METHOD_PARTIAL = 'Partial';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_NONE,
            self::CURRENCY_GBP,
            self::CURRENCY_EUR,
            self::CURRENCY_BTC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodTypesAllowableValues()
    {
        return [
            self::PAYMENT_METHOD_TYPES_NONE,
            self::PAYMENT_METHOD_TYPES_CARD,
            self::PAYMENT_METHOD_TYPES_PISP,
            self::PAYMENT_METHOD_TYPES_LIGHTNING,
            self::PAYMENT_METHOD_TYPES_CARDTOKEN,
            self::PAYMENT_METHOD_TYPES_APPLE_PAY,
            self::PAYMENT_METHOD_TYPES_GOOGLE_PAY,
            self::PAYMENT_METHOD_TYPES_DIRECT_DEBIT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardCreateTokenModeAllowableValues()
    {
        return [
            self::CARD_CREATE_TOKEN_MODE_NONE,
            self::CARD_CREATE_TOKEN_MODE_CONSENT_NOT_REQUIRED,
            self::CARD_CREATE_TOKEN_MODE_USER_CONSENT_REQUIRED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_NONE,
            self::STATUS_FULLY_PAID,
            self::STATUS_PARTIALLY_PAID,
            self::STATUS_OVER_PAID,
            self::STATUS_VOIDED,
            self::STATUS_AUTHORIZED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPartialPaymentMethodAllowableValues()
    {
        return [
            self::PARTIAL_PAYMENT_METHOD_NONE,
            self::PARTIAL_PAYMENT_METHOD_PARTIAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('payment_method_types', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('pisp_account_id', $data ?? [], null);
        $this->setIfExists('base_origin_url', $data ?? [], null);
        $this->setIfExists('callback_url', $data ?? [], null);
        $this->setIfExists('failure_callback_url', $data ?? [], null);
        $this->setIfExists('success_web_hook_url', $data ?? [], null);
        $this->setIfExists('card_authorize_only', $data ?? [], null);
        $this->setIfExists('card_create_token', $data ?? [], null);
        $this->setIfExists('card_create_token_mode', $data ?? [], null);
        $this->setIfExists('ignore_address_verification', $data ?? [], null);
        $this->setIfExists('card_ignore_cvn', $data ?? [], null);
        $this->setIfExists('lightning_invoice', $data ?? [], null);
        $this->setIfExists('card_processor_merchant_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('partial_payment_method', $data ?? [], null);
        $this->setIfExists('customer_email_address', $data ?? [], null);
        $this->setIfExists('card_stripe_payment_intent_id', $data ?? [], null);
        $this->setIfExists('card_stripe_payment_intent_secret', $data ?? [], null);
        $this->setIfExists('notification_email_addresses', $data ?? [], null);
        $this->setIfExists('priority_bank_id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('partial_payment_steps', $data ?? [], null);
        $this->setIfExists('amount_received', $data ?? [], null);
        $this->setIfExists('amount_refunded', $data ?? [], null);
        $this->setIfExists('amount_pending', $data ?? [], null);
        $this->setIfExists('created_by_user_id', $data ?? [], null);
        $this->setIfExists('merchant_token_description', $data ?? [], null);
        $this->setIfExists('is_archived', $data ?? [], null);
        $this->setIfExists('lightning_invoice_expires_at', $data ?? [], null);
        $this->setIfExists('lightning_invoice_r_hash', $data ?? [], null);
        $this->setIfExists('pisp_recipient_reference', $data ?? [], null);
        $this->setIfExists('current_state', $data ?? [], null);
        $this->setIfExists('correlation_id', $data ?? [], null);
        $this->setIfExists('scheduled_id', $data ?? [], null);
        $this->setIfExists('is_card', $data ?? [], null);
        $this->setIfExists('payrun_id', $data ?? [], null);
        $this->setIfExists('priority_bank', $data ?? [], null);
        $this->setIfExists('merchant', $data ?? [], null);
        $this->setIfExists('payrun', $data ?? [], null);
        $this->setIfExists('created_by_user', $data ?? [], null);
        $this->setIfExists('payment_request_addresses', $data ?? [], null);
        $this->setIfExists('payment_request_events', $data ?? [], null);
        $this->setIfExists('tokenised_cards', $data ?? [], null);
        $this->setIfExists('payment_request_keys', $data ?? [], null);
        $this->setIfExists('payment_request_tags', $data ?? [], null);
        $this->setIfExists('transactions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentMethodTypesAllowableValues();
        if (!is_null($this->container['payment_method_types']) && !in_array($this->container['payment_method_types'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_method_types', must be one of '%s'",
                $this->container['payment_method_types'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCardCreateTokenModeAllowableValues();
        if (!is_null($this->container['card_create_token_mode']) && !in_array($this->container['card_create_token_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'card_create_token_mode', must be one of '%s'",
                $this->container['card_create_token_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPartialPaymentMethodAllowableValues();
        if (!is_null($this->container['partial_payment_method']) && !in_array($this->container['partial_payment_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'partial_payment_method', must be one of '%s'",
                $this->container['partial_payment_method'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets payment_method_types
     *
     * @return string|null
     */
    public function getPaymentMethodTypes()
    {
        return $this->container['payment_method_types'];
    }

    /**
     * Sets payment_method_types
     *
     * @param string|null $payment_method_types payment_method_types
     *
     * @return self
     */
    public function setPaymentMethodTypes($payment_method_types)
    {
        if (is_null($payment_method_types)) {
            throw new \InvalidArgumentException('non-nullable payment_method_types cannot be null');
        }
        $allowedValues = $this->getPaymentMethodTypesAllowableValues();
        if (!in_array($payment_method_types, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_method_types', must be one of '%s'",
                    $payment_method_types,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_method_types'] = $payment_method_types;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id customer_id
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            array_push($this->openAPINullablesSetToNull, 'customer_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id order_id
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            array_push($this->openAPINullablesSetToNull, 'order_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted inserted
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets pisp_account_id
     *
     * @return string|null
     */
    public function getPispAccountId()
    {
        return $this->container['pisp_account_id'];
    }

    /**
     * Sets pisp_account_id
     *
     * @param string|null $pisp_account_id pisp_account_id
     *
     * @return self
     */
    public function setPispAccountId($pisp_account_id)
    {
        if (is_null($pisp_account_id)) {
            array_push($this->openAPINullablesSetToNull, 'pisp_account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pisp_account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pisp_account_id'] = $pisp_account_id;

        return $this;
    }

    /**
     * Gets base_origin_url
     *
     * @return string|null
     */
    public function getBaseOriginUrl()
    {
        return $this->container['base_origin_url'];
    }

    /**
     * Sets base_origin_url
     *
     * @param string|null $base_origin_url base_origin_url
     *
     * @return self
     */
    public function setBaseOriginUrl($base_origin_url)
    {
        if (is_null($base_origin_url)) {
            array_push($this->openAPINullablesSetToNull, 'base_origin_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('base_origin_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['base_origin_url'] = $base_origin_url;

        return $this;
    }

    /**
     * Gets callback_url
     *
     * @return string|null
     */
    public function getCallbackUrl()
    {
        return $this->container['callback_url'];
    }

    /**
     * Sets callback_url
     *
     * @param string|null $callback_url callback_url
     *
     * @return self
     */
    public function setCallbackUrl($callback_url)
    {
        if (is_null($callback_url)) {
            array_push($this->openAPINullablesSetToNull, 'callback_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('callback_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['callback_url'] = $callback_url;

        return $this;
    }

    /**
     * Gets failure_callback_url
     *
     * @return string|null
     */
    public function getFailureCallbackUrl()
    {
        return $this->container['failure_callback_url'];
    }

    /**
     * Sets failure_callback_url
     *
     * @param string|null $failure_callback_url failure_callback_url
     *
     * @return self
     */
    public function setFailureCallbackUrl($failure_callback_url)
    {
        if (is_null($failure_callback_url)) {
            array_push($this->openAPINullablesSetToNull, 'failure_callback_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('failure_callback_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['failure_callback_url'] = $failure_callback_url;

        return $this;
    }

    /**
     * Gets success_web_hook_url
     *
     * @return string|null
     */
    public function getSuccessWebHookUrl()
    {
        return $this->container['success_web_hook_url'];
    }

    /**
     * Sets success_web_hook_url
     *
     * @param string|null $success_web_hook_url success_web_hook_url
     *
     * @return self
     */
    public function setSuccessWebHookUrl($success_web_hook_url)
    {
        if (is_null($success_web_hook_url)) {
            array_push($this->openAPINullablesSetToNull, 'success_web_hook_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('success_web_hook_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['success_web_hook_url'] = $success_web_hook_url;

        return $this;
    }

    /**
     * Gets card_authorize_only
     *
     * @return bool|null
     */
    public function getCardAuthorizeOnly()
    {
        return $this->container['card_authorize_only'];
    }

    /**
     * Sets card_authorize_only
     *
     * @param bool|null $card_authorize_only card_authorize_only
     *
     * @return self
     */
    public function setCardAuthorizeOnly($card_authorize_only)
    {
        if (is_null($card_authorize_only)) {
            throw new \InvalidArgumentException('non-nullable card_authorize_only cannot be null');
        }
        $this->container['card_authorize_only'] = $card_authorize_only;

        return $this;
    }

    /**
     * Gets card_create_token
     *
     * @return bool|null
     */
    public function getCardCreateToken()
    {
        return $this->container['card_create_token'];
    }

    /**
     * Sets card_create_token
     *
     * @param bool|null $card_create_token card_create_token
     *
     * @return self
     */
    public function setCardCreateToken($card_create_token)
    {
        if (is_null($card_create_token)) {
            throw new \InvalidArgumentException('non-nullable card_create_token cannot be null');
        }
        $this->container['card_create_token'] = $card_create_token;

        return $this;
    }

    /**
     * Gets card_create_token_mode
     *
     * @return string|null
     */
    public function getCardCreateTokenMode()
    {
        return $this->container['card_create_token_mode'];
    }

    /**
     * Sets card_create_token_mode
     *
     * @param string|null $card_create_token_mode card_create_token_mode
     *
     * @return self
     */
    public function setCardCreateTokenMode($card_create_token_mode)
    {
        if (is_null($card_create_token_mode)) {
            throw new \InvalidArgumentException('non-nullable card_create_token_mode cannot be null');
        }
        $allowedValues = $this->getCardCreateTokenModeAllowableValues();
        if (!in_array($card_create_token_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'card_create_token_mode', must be one of '%s'",
                    $card_create_token_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_create_token_mode'] = $card_create_token_mode;

        return $this;
    }

    /**
     * Gets ignore_address_verification
     *
     * @return bool|null
     */
    public function getIgnoreAddressVerification()
    {
        return $this->container['ignore_address_verification'];
    }

    /**
     * Sets ignore_address_verification
     *
     * @param bool|null $ignore_address_verification ignore_address_verification
     *
     * @return self
     */
    public function setIgnoreAddressVerification($ignore_address_verification)
    {
        if (is_null($ignore_address_verification)) {
            throw new \InvalidArgumentException('non-nullable ignore_address_verification cannot be null');
        }
        $this->container['ignore_address_verification'] = $ignore_address_verification;

        return $this;
    }

    /**
     * Gets card_ignore_cvn
     *
     * @return bool|null
     */
    public function getCardIgnoreCvn()
    {
        return $this->container['card_ignore_cvn'];
    }

    /**
     * Sets card_ignore_cvn
     *
     * @param bool|null $card_ignore_cvn card_ignore_cvn
     *
     * @return self
     */
    public function setCardIgnoreCvn($card_ignore_cvn)
    {
        if (is_null($card_ignore_cvn)) {
            throw new \InvalidArgumentException('non-nullable card_ignore_cvn cannot be null');
        }
        $this->container['card_ignore_cvn'] = $card_ignore_cvn;

        return $this;
    }

    /**
     * Gets lightning_invoice
     *
     * @return string|null
     */
    public function getLightningInvoice()
    {
        return $this->container['lightning_invoice'];
    }

    /**
     * Sets lightning_invoice
     *
     * @param string|null $lightning_invoice lightning_invoice
     *
     * @return self
     */
    public function setLightningInvoice($lightning_invoice)
    {
        if (is_null($lightning_invoice)) {
            array_push($this->openAPINullablesSetToNull, 'lightning_invoice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lightning_invoice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lightning_invoice'] = $lightning_invoice;

        return $this;
    }

    /**
     * Gets card_processor_merchant_id
     *
     * @return string|null
     */
    public function getCardProcessorMerchantId()
    {
        return $this->container['card_processor_merchant_id'];
    }

    /**
     * Sets card_processor_merchant_id
     *
     * @param string|null $card_processor_merchant_id card_processor_merchant_id
     *
     * @return self
     */
    public function setCardProcessorMerchantId($card_processor_merchant_id)
    {
        if (is_null($card_processor_merchant_id)) {
            array_push($this->openAPINullablesSetToNull, 'card_processor_merchant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_processor_merchant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_processor_merchant_id'] = $card_processor_merchant_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets partial_payment_method
     *
     * @return string|null
     */
    public function getPartialPaymentMethod()
    {
        return $this->container['partial_payment_method'];
    }

    /**
     * Sets partial_payment_method
     *
     * @param string|null $partial_payment_method partial_payment_method
     *
     * @return self
     */
    public function setPartialPaymentMethod($partial_payment_method)
    {
        if (is_null($partial_payment_method)) {
            throw new \InvalidArgumentException('non-nullable partial_payment_method cannot be null');
        }
        $allowedValues = $this->getPartialPaymentMethodAllowableValues();
        if (!in_array($partial_payment_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'partial_payment_method', must be one of '%s'",
                    $partial_payment_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['partial_payment_method'] = $partial_payment_method;

        return $this;
    }

    /**
     * Gets customer_email_address
     *
     * @return string|null
     */
    public function getCustomerEmailAddress()
    {
        return $this->container['customer_email_address'];
    }

    /**
     * Sets customer_email_address
     *
     * @param string|null $customer_email_address customer_email_address
     *
     * @return self
     */
    public function setCustomerEmailAddress($customer_email_address)
    {
        if (is_null($customer_email_address)) {
            array_push($this->openAPINullablesSetToNull, 'customer_email_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_email_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_email_address'] = $customer_email_address;

        return $this;
    }

    /**
     * Gets card_stripe_payment_intent_id
     *
     * @return string|null
     */
    public function getCardStripePaymentIntentId()
    {
        return $this->container['card_stripe_payment_intent_id'];
    }

    /**
     * Sets card_stripe_payment_intent_id
     *
     * @param string|null $card_stripe_payment_intent_id card_stripe_payment_intent_id
     *
     * @return self
     */
    public function setCardStripePaymentIntentId($card_stripe_payment_intent_id)
    {
        if (is_null($card_stripe_payment_intent_id)) {
            array_push($this->openAPINullablesSetToNull, 'card_stripe_payment_intent_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_stripe_payment_intent_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_stripe_payment_intent_id'] = $card_stripe_payment_intent_id;

        return $this;
    }

    /**
     * Gets card_stripe_payment_intent_secret
     *
     * @return string|null
     */
    public function getCardStripePaymentIntentSecret()
    {
        return $this->container['card_stripe_payment_intent_secret'];
    }

    /**
     * Sets card_stripe_payment_intent_secret
     *
     * @param string|null $card_stripe_payment_intent_secret card_stripe_payment_intent_secret
     *
     * @return self
     */
    public function setCardStripePaymentIntentSecret($card_stripe_payment_intent_secret)
    {
        if (is_null($card_stripe_payment_intent_secret)) {
            array_push($this->openAPINullablesSetToNull, 'card_stripe_payment_intent_secret');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_stripe_payment_intent_secret', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_stripe_payment_intent_secret'] = $card_stripe_payment_intent_secret;

        return $this;
    }

    /**
     * Gets notification_email_addresses
     *
     * @return string|null
     */
    public function getNotificationEmailAddresses()
    {
        return $this->container['notification_email_addresses'];
    }

    /**
     * Sets notification_email_addresses
     *
     * @param string|null $notification_email_addresses notification_email_addresses
     *
     * @return self
     */
    public function setNotificationEmailAddresses($notification_email_addresses)
    {
        if (is_null($notification_email_addresses)) {
            array_push($this->openAPINullablesSetToNull, 'notification_email_addresses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notification_email_addresses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notification_email_addresses'] = $notification_email_addresses;

        return $this;
    }

    /**
     * Gets priority_bank_id
     *
     * @return string|null
     */
    public function getPriorityBankId()
    {
        return $this->container['priority_bank_id'];
    }

    /**
     * Sets priority_bank_id
     *
     * @param string|null $priority_bank_id priority_bank_id
     *
     * @return self
     */
    public function setPriorityBankId($priority_bank_id)
    {
        if (is_null($priority_bank_id)) {
            array_push($this->openAPINullablesSetToNull, 'priority_bank_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('priority_bank_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['priority_bank_id'] = $priority_bank_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets partial_payment_steps
     *
     * @return string|null
     */
    public function getPartialPaymentSteps()
    {
        return $this->container['partial_payment_steps'];
    }

    /**
     * Sets partial_payment_steps
     *
     * @param string|null $partial_payment_steps partial_payment_steps
     *
     * @return self
     */
    public function setPartialPaymentSteps($partial_payment_steps)
    {
        if (is_null($partial_payment_steps)) {
            array_push($this->openAPINullablesSetToNull, 'partial_payment_steps');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('partial_payment_steps', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['partial_payment_steps'] = $partial_payment_steps;

        return $this;
    }

    /**
     * Gets amount_received
     *
     * @return float|null
     */
    public function getAmountReceived()
    {
        return $this->container['amount_received'];
    }

    /**
     * Sets amount_received
     *
     * @param float|null $amount_received amount_received
     *
     * @return self
     */
    public function setAmountReceived($amount_received)
    {
        if (is_null($amount_received)) {
            throw new \InvalidArgumentException('non-nullable amount_received cannot be null');
        }
        $this->container['amount_received'] = $amount_received;

        return $this;
    }

    /**
     * Gets amount_refunded
     *
     * @return float|null
     */
    public function getAmountRefunded()
    {
        return $this->container['amount_refunded'];
    }

    /**
     * Sets amount_refunded
     *
     * @param float|null $amount_refunded amount_refunded
     *
     * @return self
     */
    public function setAmountRefunded($amount_refunded)
    {
        if (is_null($amount_refunded)) {
            throw new \InvalidArgumentException('non-nullable amount_refunded cannot be null');
        }
        $this->container['amount_refunded'] = $amount_refunded;

        return $this;
    }

    /**
     * Gets amount_pending
     *
     * @return float|null
     */
    public function getAmountPending()
    {
        return $this->container['amount_pending'];
    }

    /**
     * Sets amount_pending
     *
     * @param float|null $amount_pending amount_pending
     *
     * @return self
     */
    public function setAmountPending($amount_pending)
    {
        if (is_null($amount_pending)) {
            throw new \InvalidArgumentException('non-nullable amount_pending cannot be null');
        }
        $this->container['amount_pending'] = $amount_pending;

        return $this;
    }

    /**
     * Gets created_by_user_id
     *
     * @return string|null
     */
    public function getCreatedByUserId()
    {
        return $this->container['created_by_user_id'];
    }

    /**
     * Sets created_by_user_id
     *
     * @param string|null $created_by_user_id created_by_user_id
     *
     * @return self
     */
    public function setCreatedByUserId($created_by_user_id)
    {
        if (is_null($created_by_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'created_by_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_by_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_by_user_id'] = $created_by_user_id;

        return $this;
    }

    /**
     * Gets merchant_token_description
     *
     * @return string|null
     */
    public function getMerchantTokenDescription()
    {
        return $this->container['merchant_token_description'];
    }

    /**
     * Sets merchant_token_description
     *
     * @param string|null $merchant_token_description merchant_token_description
     *
     * @return self
     */
    public function setMerchantTokenDescription($merchant_token_description)
    {
        if (is_null($merchant_token_description)) {
            array_push($this->openAPINullablesSetToNull, 'merchant_token_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchant_token_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchant_token_description'] = $merchant_token_description;

        return $this;
    }

    /**
     * Gets is_archived
     *
     * @return bool|null
     */
    public function getIsArchived()
    {
        return $this->container['is_archived'];
    }

    /**
     * Sets is_archived
     *
     * @param bool|null $is_archived is_archived
     *
     * @return self
     */
    public function setIsArchived($is_archived)
    {
        if (is_null($is_archived)) {
            throw new \InvalidArgumentException('non-nullable is_archived cannot be null');
        }
        $this->container['is_archived'] = $is_archived;

        return $this;
    }

    /**
     * Gets lightning_invoice_expires_at
     *
     * @return \DateTime|null
     */
    public function getLightningInvoiceExpiresAt()
    {
        return $this->container['lightning_invoice_expires_at'];
    }

    /**
     * Sets lightning_invoice_expires_at
     *
     * @param \DateTime|null $lightning_invoice_expires_at lightning_invoice_expires_at
     *
     * @return self
     */
    public function setLightningInvoiceExpiresAt($lightning_invoice_expires_at)
    {
        if (is_null($lightning_invoice_expires_at)) {
            array_push($this->openAPINullablesSetToNull, 'lightning_invoice_expires_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lightning_invoice_expires_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lightning_invoice_expires_at'] = $lightning_invoice_expires_at;

        return $this;
    }

    /**
     * Gets lightning_invoice_r_hash
     *
     * @return string|null
     */
    public function getLightningInvoiceRHash()
    {
        return $this->container['lightning_invoice_r_hash'];
    }

    /**
     * Sets lightning_invoice_r_hash
     *
     * @param string|null $lightning_invoice_r_hash lightning_invoice_r_hash
     *
     * @return self
     */
    public function setLightningInvoiceRHash($lightning_invoice_r_hash)
    {
        if (is_null($lightning_invoice_r_hash)) {
            array_push($this->openAPINullablesSetToNull, 'lightning_invoice_r_hash');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lightning_invoice_r_hash', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lightning_invoice_r_hash'] = $lightning_invoice_r_hash;

        return $this;
    }

    /**
     * Gets pisp_recipient_reference
     *
     * @return string|null
     */
    public function getPispRecipientReference()
    {
        return $this->container['pisp_recipient_reference'];
    }

    /**
     * Sets pisp_recipient_reference
     *
     * @param string|null $pisp_recipient_reference pisp_recipient_reference
     *
     * @return self
     */
    public function setPispRecipientReference($pisp_recipient_reference)
    {
        if (is_null($pisp_recipient_reference)) {
            array_push($this->openAPINullablesSetToNull, 'pisp_recipient_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pisp_recipient_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pisp_recipient_reference'] = $pisp_recipient_reference;

        return $this;
    }

    /**
     * Gets current_state
     *
     * @return string|null
     */
    public function getCurrentState()
    {
        return $this->container['current_state'];
    }

    /**
     * Sets current_state
     *
     * @param string|null $current_state current_state
     *
     * @return self
     */
    public function setCurrentState($current_state)
    {
        if (is_null($current_state)) {
            array_push($this->openAPINullablesSetToNull, 'current_state');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('current_state', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['current_state'] = $current_state;

        return $this;
    }

    /**
     * Gets correlation_id
     *
     * @return string|null
     */
    public function getCorrelationId()
    {
        return $this->container['correlation_id'];
    }

    /**
     * Sets correlation_id
     *
     * @param string|null $correlation_id correlation_id
     *
     * @return self
     */
    public function setCorrelationId($correlation_id)
    {
        if (is_null($correlation_id)) {
            throw new \InvalidArgumentException('non-nullable correlation_id cannot be null');
        }
        $this->container['correlation_id'] = $correlation_id;

        return $this;
    }

    /**
     * Gets scheduled_id
     *
     * @return string|null
     */
    public function getScheduledId()
    {
        return $this->container['scheduled_id'];
    }

    /**
     * Sets scheduled_id
     *
     * @param string|null $scheduled_id scheduled_id
     *
     * @return self
     */
    public function setScheduledId($scheduled_id)
    {
        if (is_null($scheduled_id)) {
            array_push($this->openAPINullablesSetToNull, 'scheduled_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scheduled_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scheduled_id'] = $scheduled_id;

        return $this;
    }

    /**
     * Gets is_card
     *
     * @return bool|null
     */
    public function getIsCard()
    {
        return $this->container['is_card'];
    }

    /**
     * Sets is_card
     *
     * @param bool|null $is_card is_card
     *
     * @return self
     */
    public function setIsCard($is_card)
    {
        if (is_null($is_card)) {
            throw new \InvalidArgumentException('non-nullable is_card cannot be null');
        }
        $this->container['is_card'] = $is_card;

        return $this;
    }

    /**
     * Gets payrun_id
     *
     * @return string|null
     */
    public function getPayrunId()
    {
        return $this->container['payrun_id'];
    }

    /**
     * Sets payrun_id
     *
     * @param string|null $payrun_id payrun_id
     *
     * @return self
     */
    public function setPayrunId($payrun_id)
    {
        if (is_null($payrun_id)) {
            array_push($this->openAPINullablesSetToNull, 'payrun_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payrun_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payrun_id'] = $payrun_id;

        return $this;
    }

    /**
     * Gets priority_bank
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsBankEntity|null
     */
    public function getPriorityBank()
    {
        return $this->container['priority_bank'];
    }

    /**
     * Sets priority_bank
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsBankEntity|null $priority_bank priority_bank
     *
     * @return self
     */
    public function setPriorityBank($priority_bank)
    {
        if (is_null($priority_bank)) {
            throw new \InvalidArgumentException('non-nullable priority_bank cannot be null');
        }
        $this->container['priority_bank'] = $priority_bank;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity|null
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity|null $merchant merchant
     *
     * @return self
     */
    public function setMerchant($merchant)
    {
        if (is_null($merchant)) {
            throw new \InvalidArgumentException('non-nullable merchant cannot be null');
        }
        $this->container['merchant'] = $merchant;

        return $this;
    }

    /**
     * Gets payrun
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunEntity|null
     */
    public function getPayrun()
    {
        return $this->container['payrun'];
    }

    /**
     * Sets payrun
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunEntity|null $payrun payrun
     *
     * @return self
     */
    public function setPayrun($payrun)
    {
        if (is_null($payrun)) {
            throw new \InvalidArgumentException('non-nullable payrun cannot be null');
        }
        $this->container['payrun'] = $payrun;

        return $this;
    }

    /**
     * Gets created_by_user
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsUserEntity|null
     */
    public function getCreatedByUser()
    {
        return $this->container['created_by_user'];
    }

    /**
     * Sets created_by_user
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsUserEntity|null $created_by_user created_by_user
     *
     * @return self
     */
    public function setCreatedByUser($created_by_user)
    {
        if (is_null($created_by_user)) {
            throw new \InvalidArgumentException('non-nullable created_by_user cannot be null');
        }
        $this->container['created_by_user'] = $created_by_user;

        return $this;
    }

    /**
     * Gets payment_request_addresses
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestAddressEntity[]|null
     */
    public function getPaymentRequestAddresses()
    {
        return $this->container['payment_request_addresses'];
    }

    /**
     * Sets payment_request_addresses
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestAddressEntity[]|null $payment_request_addresses payment_request_addresses
     *
     * @return self
     */
    public function setPaymentRequestAddresses($payment_request_addresses)
    {
        if (is_null($payment_request_addresses)) {
            array_push($this->openAPINullablesSetToNull, 'payment_request_addresses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_request_addresses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_request_addresses'] = $payment_request_addresses;

        return $this;
    }

    /**
     * Gets payment_request_events
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestEventEntity[]|null
     */
    public function getPaymentRequestEvents()
    {
        return $this->container['payment_request_events'];
    }

    /**
     * Sets payment_request_events
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestEventEntity[]|null $payment_request_events payment_request_events
     *
     * @return self
     */
    public function setPaymentRequestEvents($payment_request_events)
    {
        if (is_null($payment_request_events)) {
            array_push($this->openAPINullablesSetToNull, 'payment_request_events');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_request_events', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_request_events'] = $payment_request_events;

        return $this;
    }

    /**
     * Gets tokenised_cards
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsTokenisedCardsEntity[]|null
     */
    public function getTokenisedCards()
    {
        return $this->container['tokenised_cards'];
    }

    /**
     * Sets tokenised_cards
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsTokenisedCardsEntity[]|null $tokenised_cards tokenised_cards
     *
     * @return self
     */
    public function setTokenisedCards($tokenised_cards)
    {
        if (is_null($tokenised_cards)) {
            array_push($this->openAPINullablesSetToNull, 'tokenised_cards');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tokenised_cards', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tokenised_cards'] = $tokenised_cards;

        return $this;
    }

    /**
     * Gets payment_request_keys
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestKeysEntity|null
     */
    public function getPaymentRequestKeys()
    {
        return $this->container['payment_request_keys'];
    }

    /**
     * Sets payment_request_keys
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestKeysEntity|null $payment_request_keys payment_request_keys
     *
     * @return self
     */
    public function setPaymentRequestKeys($payment_request_keys)
    {
        if (is_null($payment_request_keys)) {
            throw new \InvalidArgumentException('non-nullable payment_request_keys cannot be null');
        }
        $this->container['payment_request_keys'] = $payment_request_keys;

        return $this;
    }

    /**
     * Gets payment_request_tags
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestTagEntity[]|null
     */
    public function getPaymentRequestTags()
    {
        return $this->container['payment_request_tags'];
    }

    /**
     * Sets payment_request_tags
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestTagEntity[]|null $payment_request_tags payment_request_tags
     *
     * @return self
     */
    public function setPaymentRequestTags($payment_request_tags)
    {
        if (is_null($payment_request_tags)) {
            array_push($this->openAPINullablesSetToNull, 'payment_request_tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_request_tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_request_tags'] = $payment_request_tags;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsTransactionEntity[]|null
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsTransactionEntity[]|null $transactions transactions
     *
     * @return self
     */
    public function setTransactions($transactions)
    {
        if (is_null($transactions)) {
            array_push($this->openAPINullablesSetToNull, 'transactions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transactions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transactions'] = $transactions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


