<?php
/**
 * NoFrixionDataModelsRoleEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionDataModelsRoleEntity Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionDataModelsRoleEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.DataModels.RoleEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'merchant_id' => 'string',
        'merchant_permissions' => 'string',
        'account_permissions' => 'string',
        'inserted' => '\DateTime',
        'last_updated' => '\DateTime',
        'merchant' => '\Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity',
        'users' => '\Nofrixion\Client\Model\NoFrixionDataModelsRoleUserEntity[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'name' => null,
        'description' => null,
        'merchant_id' => 'uuid',
        'merchant_permissions' => null,
        'account_permissions' => null,
        'inserted' => 'date-time',
        'last_updated' => 'date-time',
        'merchant' => null,
        'users' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => true,
        'description' => true,
        'merchant_id' => false,
        'merchant_permissions' => false,
        'account_permissions' => false,
        'inserted' => false,
        'last_updated' => false,
        'merchant' => false,
        'users' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'merchant_id' => 'merchantID',
        'merchant_permissions' => 'merchantPermissions',
        'account_permissions' => 'accountPermissions',
        'inserted' => 'inserted',
        'last_updated' => 'lastUpdated',
        'merchant' => 'merchant',
        'users' => 'users'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'merchant_id' => 'setMerchantId',
        'merchant_permissions' => 'setMerchantPermissions',
        'account_permissions' => 'setAccountPermissions',
        'inserted' => 'setInserted',
        'last_updated' => 'setLastUpdated',
        'merchant' => 'setMerchant',
        'users' => 'setUsers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'merchant_id' => 'getMerchantId',
        'merchant_permissions' => 'getMerchantPermissions',
        'account_permissions' => 'getAccountPermissions',
        'inserted' => 'getInserted',
        'last_updated' => 'getLastUpdated',
        'merchant' => 'getMerchant',
        'users' => 'getUsers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MERCHANT_PERMISSIONS_NONE = 'None';
    public const MERCHANT_PERMISSIONS_CAN_CREATE_ACCOUNTS = 'CanCreateAccounts';
    public const MERCHANT_PERMISSIONS_CAN_ARCHIVE_ACCOUNTS = 'CanArchiveAccounts';
    public const MERCHANT_PERMISSIONS_CAN_VIEW_BENEFICIARIES = 'CanViewBeneficiaries';
    public const MERCHANT_PERMISSIONS_CAN_DELETE_BENEFICIARIES = 'CanDeleteBeneficiaries';
    public const MERCHANT_PERMISSIONS_CAN_EDIT_BENEFICIARIES = 'CanEditBeneficiaries';
    public const MERCHANT_PERMISSIONS_CAN_CREATE_BENEFICIARIES = 'CanCreateBeneficiaries';
    public const MERCHANT_PERMISSIONS_CAN_AUTHORISE_BENEFICIARIES = 'CanAuthoriseBeneficiaries';
    public const MERCHANT_PERMISSIONS_CAN_VIEW_TOKENS = 'CanViewTokens';
    public const MERCHANT_PERMISSIONS_CAN_CREATE_TOKENS = 'CanCreateTokens';
    public const MERCHANT_PERMISSIONS_CAN_DELETE_TOKENS = 'CanDeleteTokens';
    public const MERCHANT_PERMISSIONS_CAN_CREATE_PAYRUNS = 'CanCreatePayruns';
    public const MERCHANT_PERMISSIONS_CAN_VIEW_PAYRUNS = 'CanViewPayruns';
    public const MERCHANT_PERMISSIONS_CAN_EDIT_PAYRUNS = 'CanEditPayruns';
    public const MERCHANT_PERMISSIONS_CAN_APPROVE_PAYRUNS = 'CanApprovePayruns';
    public const MERCHANT_PERMISSIONS_CAN_DELETE_PAYRUNS = 'CanDeletePayruns';
    public const MERCHANT_PERMISSIONS_CAN_VIEW_USER_ROLES = 'CanViewUserRoles';
    public const MERCHANT_PERMISSIONS_CAN_DELETE_USER_ROLES = 'CanDeleteUserRoles';
    public const MERCHANT_PERMISSIONS_CAN_ASSIGN_USER_ROLES = 'CanAssignUserRoles';
    public const MERCHANT_PERMISSIONS_CAN_VIEW_USERS = 'CanViewUsers';
    public const MERCHANT_PERMISSIONS_CAN_VIEW_WEBHOOKS = 'CanViewWebhooks';
    public const MERCHANT_PERMISSIONS_CAN_CREATE_WEBHOOKS = 'CanCreateWebhooks';
    public const MERCHANT_PERMISSIONS_CAN_DELETE_WEBHOOKS = 'CanDeleteWebhooks';
    public const MERCHANT_PERMISSIONS_CAN_VIEW_MERCHANT = 'CanViewMerchant';
    public const MERCHANT_PERMISSIONS_CAN_UPDATE_MERCHANT = 'CanUpdateMerchant';
    public const MERCHANT_PERMISSIONS_CAN_CREATE_PAYMENT_REQUESTS = 'CanCreatePaymentRequests';
    public const MERCHANT_PERMISSIONS_CAN_VIEW_PAYMENT_REQUESTS = 'CanViewPaymentRequests';
    public const MERCHANT_PERMISSIONS_CAN_UPDATE_PAYMENT_REQUESTS = 'CanUpdatePaymentRequests';
    public const MERCHANT_PERMISSIONS_CAN_VIEW_MANDATES = 'CanViewMandates';
    public const MERCHANT_PERMISSIONS_CAN_CREATE_MANDATES = 'CanCreateMandates';
    public const MERCHANT_PERMISSIONS_CAN_VIEW_ROLES = 'CanViewRoles';
    public const MERCHANT_PERMISSIONS_CAN_CREATE_ROLES = 'CanCreateRoles';
    public const MERCHANT_PERMISSIONS_CAN_EDIT_ROLES = 'CanEditRoles';
    public const MERCHANT_PERMISSIONS_CAN_CREATE_REPORTS = 'CanCreateReports';
    public const MERCHANT_PERMISSIONS_CAN_VIEW_REPORTS = 'CanViewReports';
    public const ACCOUNT_PERMISSIONS_NONE = 'None';
    public const ACCOUNT_PERMISSIONS_CAN_VIEW_PAYOUTS = 'CanViewPayouts';
    public const ACCOUNT_PERMISSIONS_CAN_CREATE_PAYOUTS = 'CanCreatePayouts';
    public const ACCOUNT_PERMISSIONS_CAN_EDIT_PAYOUTS = 'CanEditPayouts';
    public const ACCOUNT_PERMISSIONS_CAN_DELETE_PAYOUTS = 'CanDeletePayouts';
    public const ACCOUNT_PERMISSIONS_CAN_AUTHORISE_PAYOUTS = 'CanAuthorisePayouts';
    public const ACCOUNT_PERMISSIONS_CAN_REJECT_PAYOUTS = 'CanRejectPayouts';
    public const ACCOUNT_PERMISSIONS_CAN_CREATE_BATCH_PAYOUTS = 'CanCreateBatchPayouts';
    public const ACCOUNT_PERMISSIONS_CAN_VIEW_ACCOUNT = 'CanViewAccount';
    public const ACCOUNT_PERMISSIONS_CAN_UPDATE_ACCOUNT = 'CanUpdateAccount';
    public const ACCOUNT_PERMISSIONS_CAN_VIEW_RULES = 'CanViewRules';
    public const ACCOUNT_PERMISSIONS_CAN_CREATE_RULES = 'CanCreateRules';
    public const ACCOUNT_PERMISSIONS_CAN_EDIT_RULES = 'CanEditRules';
    public const ACCOUNT_PERMISSIONS_CAN_DELETE_RULES = 'CanDeleteRules';
    public const ACCOUNT_PERMISSIONS_CAN_AUTHORISE_RULES = 'CanAuthoriseRules';
    public const ACCOUNT_PERMISSIONS_CAN_VIEW_TRANSACTIONS = 'CanViewTransactions';
    public const ACCOUNT_PERMISSIONS_CAN_CREATE_STATEMENTS = 'CanCreateStatements';
    public const ACCOUNT_PERMISSIONS_CAN_VIEW_STATEMENTS = 'CanViewStatements';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMerchantPermissionsAllowableValues()
    {
        return [
            self::MERCHANT_PERMISSIONS_NONE,
            self::MERCHANT_PERMISSIONS_CAN_CREATE_ACCOUNTS,
            self::MERCHANT_PERMISSIONS_CAN_ARCHIVE_ACCOUNTS,
            self::MERCHANT_PERMISSIONS_CAN_VIEW_BENEFICIARIES,
            self::MERCHANT_PERMISSIONS_CAN_DELETE_BENEFICIARIES,
            self::MERCHANT_PERMISSIONS_CAN_EDIT_BENEFICIARIES,
            self::MERCHANT_PERMISSIONS_CAN_CREATE_BENEFICIARIES,
            self::MERCHANT_PERMISSIONS_CAN_AUTHORISE_BENEFICIARIES,
            self::MERCHANT_PERMISSIONS_CAN_VIEW_TOKENS,
            self::MERCHANT_PERMISSIONS_CAN_CREATE_TOKENS,
            self::MERCHANT_PERMISSIONS_CAN_DELETE_TOKENS,
            self::MERCHANT_PERMISSIONS_CAN_CREATE_PAYRUNS,
            self::MERCHANT_PERMISSIONS_CAN_VIEW_PAYRUNS,
            self::MERCHANT_PERMISSIONS_CAN_EDIT_PAYRUNS,
            self::MERCHANT_PERMISSIONS_CAN_APPROVE_PAYRUNS,
            self::MERCHANT_PERMISSIONS_CAN_DELETE_PAYRUNS,
            self::MERCHANT_PERMISSIONS_CAN_VIEW_USER_ROLES,
            self::MERCHANT_PERMISSIONS_CAN_DELETE_USER_ROLES,
            self::MERCHANT_PERMISSIONS_CAN_ASSIGN_USER_ROLES,
            self::MERCHANT_PERMISSIONS_CAN_VIEW_USERS,
            self::MERCHANT_PERMISSIONS_CAN_VIEW_WEBHOOKS,
            self::MERCHANT_PERMISSIONS_CAN_CREATE_WEBHOOKS,
            self::MERCHANT_PERMISSIONS_CAN_DELETE_WEBHOOKS,
            self::MERCHANT_PERMISSIONS_CAN_VIEW_MERCHANT,
            self::MERCHANT_PERMISSIONS_CAN_UPDATE_MERCHANT,
            self::MERCHANT_PERMISSIONS_CAN_CREATE_PAYMENT_REQUESTS,
            self::MERCHANT_PERMISSIONS_CAN_VIEW_PAYMENT_REQUESTS,
            self::MERCHANT_PERMISSIONS_CAN_UPDATE_PAYMENT_REQUESTS,
            self::MERCHANT_PERMISSIONS_CAN_VIEW_MANDATES,
            self::MERCHANT_PERMISSIONS_CAN_CREATE_MANDATES,
            self::MERCHANT_PERMISSIONS_CAN_VIEW_ROLES,
            self::MERCHANT_PERMISSIONS_CAN_CREATE_ROLES,
            self::MERCHANT_PERMISSIONS_CAN_EDIT_ROLES,
            self::MERCHANT_PERMISSIONS_CAN_CREATE_REPORTS,
            self::MERCHANT_PERMISSIONS_CAN_VIEW_REPORTS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountPermissionsAllowableValues()
    {
        return [
            self::ACCOUNT_PERMISSIONS_NONE,
            self::ACCOUNT_PERMISSIONS_CAN_VIEW_PAYOUTS,
            self::ACCOUNT_PERMISSIONS_CAN_CREATE_PAYOUTS,
            self::ACCOUNT_PERMISSIONS_CAN_EDIT_PAYOUTS,
            self::ACCOUNT_PERMISSIONS_CAN_DELETE_PAYOUTS,
            self::ACCOUNT_PERMISSIONS_CAN_AUTHORISE_PAYOUTS,
            self::ACCOUNT_PERMISSIONS_CAN_REJECT_PAYOUTS,
            self::ACCOUNT_PERMISSIONS_CAN_CREATE_BATCH_PAYOUTS,
            self::ACCOUNT_PERMISSIONS_CAN_VIEW_ACCOUNT,
            self::ACCOUNT_PERMISSIONS_CAN_UPDATE_ACCOUNT,
            self::ACCOUNT_PERMISSIONS_CAN_VIEW_RULES,
            self::ACCOUNT_PERMISSIONS_CAN_CREATE_RULES,
            self::ACCOUNT_PERMISSIONS_CAN_EDIT_RULES,
            self::ACCOUNT_PERMISSIONS_CAN_DELETE_RULES,
            self::ACCOUNT_PERMISSIONS_CAN_AUTHORISE_RULES,
            self::ACCOUNT_PERMISSIONS_CAN_VIEW_TRANSACTIONS,
            self::ACCOUNT_PERMISSIONS_CAN_CREATE_STATEMENTS,
            self::ACCOUNT_PERMISSIONS_CAN_VIEW_STATEMENTS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('merchant_permissions', $data ?? [], null);
        $this->setIfExists('account_permissions', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('merchant', $data ?? [], null);
        $this->setIfExists('users', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMerchantPermissionsAllowableValues();
        if (!is_null($this->container['merchant_permissions']) && !in_array($this->container['merchant_permissions'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'merchant_permissions', must be one of '%s'",
                $this->container['merchant_permissions'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccountPermissionsAllowableValues();
        if (!is_null($this->container['account_permissions']) && !in_array($this->container['account_permissions'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_permissions', must be one of '%s'",
                $this->container['account_permissions'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets merchant_permissions
     *
     * @return string|null
     */
    public function getMerchantPermissions()
    {
        return $this->container['merchant_permissions'];
    }

    /**
     * Sets merchant_permissions
     *
     * @param string|null $merchant_permissions merchant_permissions
     *
     * @return self
     */
    public function setMerchantPermissions($merchant_permissions)
    {
        if (is_null($merchant_permissions)) {
            throw new \InvalidArgumentException('non-nullable merchant_permissions cannot be null');
        }
        $allowedValues = $this->getMerchantPermissionsAllowableValues();
        if (!in_array($merchant_permissions, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'merchant_permissions', must be one of '%s'",
                    $merchant_permissions,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['merchant_permissions'] = $merchant_permissions;

        return $this;
    }

    /**
     * Gets account_permissions
     *
     * @return string|null
     */
    public function getAccountPermissions()
    {
        return $this->container['account_permissions'];
    }

    /**
     * Sets account_permissions
     *
     * @param string|null $account_permissions account_permissions
     *
     * @return self
     */
    public function setAccountPermissions($account_permissions)
    {
        if (is_null($account_permissions)) {
            throw new \InvalidArgumentException('non-nullable account_permissions cannot be null');
        }
        $allowedValues = $this->getAccountPermissionsAllowableValues();
        if (!in_array($account_permissions, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_permissions', must be one of '%s'",
                    $account_permissions,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_permissions'] = $account_permissions;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted inserted
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity|null
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity|null $merchant merchant
     *
     * @return self
     */
    public function setMerchant($merchant)
    {
        if (is_null($merchant)) {
            throw new \InvalidArgumentException('non-nullable merchant cannot be null');
        }
        $this->container['merchant'] = $merchant;

        return $this;
    }

    /**
     * Gets users
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsRoleUserEntity[]|null
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsRoleUserEntity[]|null $users users
     *
     * @return self
     */
    public function setUsers($users)
    {
        if (is_null($users)) {
            array_push($this->openAPINullablesSetToNull, 'users');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('users', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['users'] = $users;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


