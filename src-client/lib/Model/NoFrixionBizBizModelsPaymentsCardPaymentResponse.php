<?php
/**
 * NoFrixionBizBizModelsPaymentsCardPaymentResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionBizBizModelsPaymentsCardPaymentResponse Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionBizBizModelsPaymentsCardPaymentResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.Biz.BizModels.Payments.CardPaymentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'authorized_amount' => 'string',
        'currency_code' => 'string',
        'response_code' => 'string',
        'status' => 'string',
        'request_id' => 'string',
        'transaction_id' => 'string',
        'is_payer_authentication_required' => 'bool',
        'is_soft_decline' => 'bool',
        'payer_authentication_url' => 'string',
        'payer_authentication_access_token' => 'string',
        'payer_authentication_window_width' => 'int',
        'payer_authentication_window_height' => 'int',
        'payer_authentication_merchant_data' => 'string',
        'payment_request_callback_url' => 'string',
        'three_ds_redirect_url' => 'string',
        'payment_request_id' => 'string',
        'response_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'authorized_amount' => null,
        'currency_code' => null,
        'response_code' => null,
        'status' => null,
        'request_id' => null,
        'transaction_id' => null,
        'is_payer_authentication_required' => null,
        'is_soft_decline' => null,
        'payer_authentication_url' => null,
        'payer_authentication_access_token' => null,
        'payer_authentication_window_width' => 'int32',
        'payer_authentication_window_height' => 'int32',
        'payer_authentication_merchant_data' => null,
        'payment_request_callback_url' => null,
        'three_ds_redirect_url' => null,
        'payment_request_id' => 'uuid',
        'response_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'authorized_amount' => true,
        'currency_code' => true,
        'response_code' => true,
        'status' => true,
        'request_id' => true,
        'transaction_id' => true,
        'is_payer_authentication_required' => false,
        'is_soft_decline' => false,
        'payer_authentication_url' => true,
        'payer_authentication_access_token' => true,
        'payer_authentication_window_width' => false,
        'payer_authentication_window_height' => false,
        'payer_authentication_merchant_data' => true,
        'payment_request_callback_url' => true,
        'three_ds_redirect_url' => true,
        'payment_request_id' => false,
        'response_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authorized_amount' => 'authorizedAmount',
        'currency_code' => 'currencyCode',
        'response_code' => 'responseCode',
        'status' => 'status',
        'request_id' => 'requestID',
        'transaction_id' => 'transactionID',
        'is_payer_authentication_required' => 'isPayerAuthenticationRequired',
        'is_soft_decline' => 'isSoftDecline',
        'payer_authentication_url' => 'payerAuthenticationUrl',
        'payer_authentication_access_token' => 'payerAuthenticationAccessToken',
        'payer_authentication_window_width' => 'payerAuthenticationWindowWidth',
        'payer_authentication_window_height' => 'payerAuthenticationWindowHeight',
        'payer_authentication_merchant_data' => 'payerAuthenticationMerchantData',
        'payment_request_callback_url' => 'paymentRequestCallbackUrl',
        'three_ds_redirect_url' => 'threeDSRedirectUrl',
        'payment_request_id' => 'paymentRequestID',
        'response_type' => 'responseType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authorized_amount' => 'setAuthorizedAmount',
        'currency_code' => 'setCurrencyCode',
        'response_code' => 'setResponseCode',
        'status' => 'setStatus',
        'request_id' => 'setRequestId',
        'transaction_id' => 'setTransactionId',
        'is_payer_authentication_required' => 'setIsPayerAuthenticationRequired',
        'is_soft_decline' => 'setIsSoftDecline',
        'payer_authentication_url' => 'setPayerAuthenticationUrl',
        'payer_authentication_access_token' => 'setPayerAuthenticationAccessToken',
        'payer_authentication_window_width' => 'setPayerAuthenticationWindowWidth',
        'payer_authentication_window_height' => 'setPayerAuthenticationWindowHeight',
        'payer_authentication_merchant_data' => 'setPayerAuthenticationMerchantData',
        'payment_request_callback_url' => 'setPaymentRequestCallbackUrl',
        'three_ds_redirect_url' => 'setThreeDsRedirectUrl',
        'payment_request_id' => 'setPaymentRequestId',
        'response_type' => 'setResponseType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authorized_amount' => 'getAuthorizedAmount',
        'currency_code' => 'getCurrencyCode',
        'response_code' => 'getResponseCode',
        'status' => 'getStatus',
        'request_id' => 'getRequestId',
        'transaction_id' => 'getTransactionId',
        'is_payer_authentication_required' => 'getIsPayerAuthenticationRequired',
        'is_soft_decline' => 'getIsSoftDecline',
        'payer_authentication_url' => 'getPayerAuthenticationUrl',
        'payer_authentication_access_token' => 'getPayerAuthenticationAccessToken',
        'payer_authentication_window_width' => 'getPayerAuthenticationWindowWidth',
        'payer_authentication_window_height' => 'getPayerAuthenticationWindowHeight',
        'payer_authentication_merchant_data' => 'getPayerAuthenticationMerchantData',
        'payment_request_callback_url' => 'getPaymentRequestCallbackUrl',
        'three_ds_redirect_url' => 'getThreeDsRedirectUrl',
        'payment_request_id' => 'getPaymentRequestId',
        'response_type' => 'getResponseType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const RESPONSE_TYPE_NONE = 'None';
    public const RESPONSE_TYPE_CARD_PAYER_AUTHENTICATION_SETUP_RESPONSE = 'CardPayerAuthenticationSetupResponse';
    public const RESPONSE_TYPE_CARD_PAYMENT_RESPONSE = 'CardPaymentResponse';
    public const RESPONSE_TYPE_PAYMENT_INITIATION_RESPONSE = 'PaymentInitiationResponse';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResponseTypeAllowableValues()
    {
        return [
            self::RESPONSE_TYPE_NONE,
            self::RESPONSE_TYPE_CARD_PAYER_AUTHENTICATION_SETUP_RESPONSE,
            self::RESPONSE_TYPE_CARD_PAYMENT_RESPONSE,
            self::RESPONSE_TYPE_PAYMENT_INITIATION_RESPONSE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('authorized_amount', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('response_code', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('request_id', $data ?? [], null);
        $this->setIfExists('transaction_id', $data ?? [], null);
        $this->setIfExists('is_payer_authentication_required', $data ?? [], null);
        $this->setIfExists('is_soft_decline', $data ?? [], null);
        $this->setIfExists('payer_authentication_url', $data ?? [], null);
        $this->setIfExists('payer_authentication_access_token', $data ?? [], null);
        $this->setIfExists('payer_authentication_window_width', $data ?? [], null);
        $this->setIfExists('payer_authentication_window_height', $data ?? [], null);
        $this->setIfExists('payer_authentication_merchant_data', $data ?? [], null);
        $this->setIfExists('payment_request_callback_url', $data ?? [], null);
        $this->setIfExists('three_ds_redirect_url', $data ?? [], null);
        $this->setIfExists('payment_request_id', $data ?? [], null);
        $this->setIfExists('response_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getResponseTypeAllowableValues();
        if (!is_null($this->container['response_type']) && !in_array($this->container['response_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'response_type', must be one of '%s'",
                $this->container['response_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorized_amount
     *
     * @return string|null
     */
    public function getAuthorizedAmount()
    {
        return $this->container['authorized_amount'];
    }

    /**
     * Sets authorized_amount
     *
     * @param string|null $authorized_amount authorized_amount
     *
     * @return self
     */
    public function setAuthorizedAmount($authorized_amount)
    {
        if (is_null($authorized_amount)) {
            array_push($this->openAPINullablesSetToNull, 'authorized_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorized_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authorized_amount'] = $authorized_amount;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            array_push($this->openAPINullablesSetToNull, 'currency_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets response_code
     *
     * @return string|null
     */
    public function getResponseCode()
    {
        return $this->container['response_code'];
    }

    /**
     * Sets response_code
     *
     * @param string|null $response_code response_code
     *
     * @return self
     */
    public function setResponseCode($response_code)
    {
        if (is_null($response_code)) {
            array_push($this->openAPINullablesSetToNull, 'response_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('response_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['response_code'] = $response_code;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets request_id
     *
     * @return string|null
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string|null $request_id request_id
     *
     * @return self
     */
    public function setRequestId($request_id)
    {
        if (is_null($request_id)) {
            array_push($this->openAPINullablesSetToNull, 'request_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('request_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id transaction_id
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        if (is_null($transaction_id)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets is_payer_authentication_required
     *
     * @return bool|null
     */
    public function getIsPayerAuthenticationRequired()
    {
        return $this->container['is_payer_authentication_required'];
    }

    /**
     * Sets is_payer_authentication_required
     *
     * @param bool|null $is_payer_authentication_required Gets set to true if 3-D Secure payer authentication is required for a payment.
     *
     * @return self
     */
    public function setIsPayerAuthenticationRequired($is_payer_authentication_required)
    {
        if (is_null($is_payer_authentication_required)) {
            throw new \InvalidArgumentException('non-nullable is_payer_authentication_required cannot be null');
        }
        $this->container['is_payer_authentication_required'] = $is_payer_authentication_required;

        return $this;
    }

    /**
     * Gets is_soft_decline
     *
     * @return bool|null
     */
    public function getIsSoftDecline()
    {
        return $this->container['is_soft_decline'];
    }

    /**
     * Sets is_soft_decline
     *
     * @param bool|null $is_soft_decline Gets set to true if the card processor flagged the transaction as having failed address or  card security number verification. If the payment was for a sale a soft decline will prevent  the transaction being captured. The merchant can set the ignore address verification flag   if they want to allow soft declines to be accepted or false if not.
     *
     * @return self
     */
    public function setIsSoftDecline($is_soft_decline)
    {
        if (is_null($is_soft_decline)) {
            throw new \InvalidArgumentException('non-nullable is_soft_decline cannot be null');
        }
        $this->container['is_soft_decline'] = $is_soft_decline;

        return $this;
    }

    /**
     * Gets payer_authentication_url
     *
     * @return string|null
     */
    public function getPayerAuthenticationUrl()
    {
        return $this->container['payer_authentication_url'];
    }

    /**
     * Sets payer_authentication_url
     *
     * @param string|null $payer_authentication_url If a card payment response indicates a 3-D Secure payer authentication is required  this field holds the URL to redirect the payer to their issuing bank.
     *
     * @return self
     */
    public function setPayerAuthenticationUrl($payer_authentication_url)
    {
        if (is_null($payer_authentication_url)) {
            array_push($this->openAPINullablesSetToNull, 'payer_authentication_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payer_authentication_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payer_authentication_url'] = $payer_authentication_url;

        return $this;
    }

    /**
     * Gets payer_authentication_access_token
     *
     * @return string|null
     */
    public function getPayerAuthenticationAccessToken()
    {
        return $this->container['payer_authentication_access_token'];
    }

    /**
     * Sets payer_authentication_access_token
     *
     * @param string|null $payer_authentication_access_token If a card payment response indicates a 3-D Secure payer authentication is required  this field holds the access token to POST when performing the redirect.
     *
     * @return self
     */
    public function setPayerAuthenticationAccessToken($payer_authentication_access_token)
    {
        if (is_null($payer_authentication_access_token)) {
            array_push($this->openAPINullablesSetToNull, 'payer_authentication_access_token');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payer_authentication_access_token', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payer_authentication_access_token'] = $payer_authentication_access_token;

        return $this;
    }

    /**
     * Gets payer_authentication_window_width
     *
     * @return int|null
     */
    public function getPayerAuthenticationWindowWidth()
    {
        return $this->container['payer_authentication_window_width'];
    }

    /**
     * Sets payer_authentication_window_width
     *
     * @param int|null $payer_authentication_window_width If a card payment response indicates a 3-D Secure payer authentication is required  this field holds the requested width of the iframe used to hold the challenge.
     *
     * @return self
     */
    public function setPayerAuthenticationWindowWidth($payer_authentication_window_width)
    {
        if (is_null($payer_authentication_window_width)) {
            throw new \InvalidArgumentException('non-nullable payer_authentication_window_width cannot be null');
        }
        $this->container['payer_authentication_window_width'] = $payer_authentication_window_width;

        return $this;
    }

    /**
     * Gets payer_authentication_window_height
     *
     * @return int|null
     */
    public function getPayerAuthenticationWindowHeight()
    {
        return $this->container['payer_authentication_window_height'];
    }

    /**
     * Sets payer_authentication_window_height
     *
     * @param int|null $payer_authentication_window_height If a card payment response indicates a 3-D Secure payer authentication is required  this field holds the requested height of the iframe used to hold the challenge.
     *
     * @return self
     */
    public function setPayerAuthenticationWindowHeight($payer_authentication_window_height)
    {
        if (is_null($payer_authentication_window_height)) {
            throw new \InvalidArgumentException('non-nullable payer_authentication_window_height cannot be null');
        }
        $this->container['payer_authentication_window_height'] = $payer_authentication_window_height;

        return $this;
    }

    /**
     * Gets payer_authentication_merchant_data
     *
     * @return string|null
     */
    public function getPayerAuthenticationMerchantData()
    {
        return $this->container['payer_authentication_merchant_data'];
    }

    /**
     * Sets payer_authentication_merchant_data
     *
     * @param string|null $payer_authentication_merchant_data If a card payment response indicates a 3-D Secure payer authentication this field may   get set in order to transfer information back to the \"authenticationcallback\" method  that gets called automatically after a successful payer authentication attempt.
     *
     * @return self
     */
    public function setPayerAuthenticationMerchantData($payer_authentication_merchant_data)
    {
        if (is_null($payer_authentication_merchant_data)) {
            array_push($this->openAPINullablesSetToNull, 'payer_authentication_merchant_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payer_authentication_merchant_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payer_authentication_merchant_data'] = $payer_authentication_merchant_data;

        return $this;
    }

    /**
     * Gets payment_request_callback_url
     *
     * @return string|null
     */
    public function getPaymentRequestCallbackUrl()
    {
        return $this->container['payment_request_callback_url'];
    }

    /**
     * Sets payment_request_callback_url
     *
     * @param string|null $payment_request_callback_url The callback URL that was set when the payment request was created. Payers will be   redirected to this URL after a successful card authorisation.
     *
     * @return self
     */
    public function setPaymentRequestCallbackUrl($payment_request_callback_url)
    {
        if (is_null($payment_request_callback_url)) {
            array_push($this->openAPINullablesSetToNull, 'payment_request_callback_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_request_callback_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_request_callback_url'] = $payment_request_callback_url;

        return $this;
    }

    /**
     * Gets three_ds_redirect_url
     *
     * @return string|null
     */
    public function getThreeDsRedirectUrl()
    {
        return $this->container['three_ds_redirect_url'];
    }

    /**
     * Sets three_ds_redirect_url
     *
     * @param string|null $three_ds_redirect_url Checkout.com require a redirect for 3DS authentication. This link will contain the   link the payer needs to be redirected to.
     *
     * @return self
     */
    public function setThreeDsRedirectUrl($three_ds_redirect_url)
    {
        if (is_null($three_ds_redirect_url)) {
            array_push($this->openAPINullablesSetToNull, 'three_ds_redirect_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('three_ds_redirect_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['three_ds_redirect_url'] = $three_ds_redirect_url;

        return $this;
    }

    /**
     * Gets payment_request_id
     *
     * @return string|null
     */
    public function getPaymentRequestId()
    {
        return $this->container['payment_request_id'];
    }

    /**
     * Sets payment_request_id
     *
     * @param string|null $payment_request_id payment_request_id
     *
     * @return self
     */
    public function setPaymentRequestId($payment_request_id)
    {
        if (is_null($payment_request_id)) {
            throw new \InvalidArgumentException('non-nullable payment_request_id cannot be null');
        }
        $this->container['payment_request_id'] = $payment_request_id;

        return $this;
    }

    /**
     * Gets response_type
     *
     * @return string|null
     */
    public function getResponseType()
    {
        return $this->container['response_type'];
    }

    /**
     * Sets response_type
     *
     * @param string|null $response_type response_type
     *
     * @return self
     */
    public function setResponseType($response_type)
    {
        if (is_null($response_type)) {
            throw new \InvalidArgumentException('non-nullable response_type cannot be null');
        }
        $allowedValues = $this->getResponseTypeAllowableValues();
        if (!in_array($response_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'response_type', must be one of '%s'",
                    $response_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['response_type'] = $response_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


