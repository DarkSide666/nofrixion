<?php
/**
 * NoFrixionDataModelsReportResultEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionDataModelsReportResultEntity Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionDataModelsReportResultEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.DataModels.ReportResultEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'report_id' => 'string',
        'merchant_id' => 'string',
        'statement_number' => 'int',
        'report_period_started_at' => '\DateTime',
        'report_period_ended_at' => '\DateTime',
        'inserted' => '\DateTime',
        'report_content' => 'string',
        'report_content_type' => 'string',
        'merchant' => '\Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity',
        'report' => '\Nofrixion\Client\Model\NoFrixionDataModelsReportEntity'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'report_id' => 'uuid',
        'merchant_id' => 'uuid',
        'statement_number' => 'int32',
        'report_period_started_at' => 'date-time',
        'report_period_ended_at' => 'date-time',
        'inserted' => 'date-time',
        'report_content' => null,
        'report_content_type' => null,
        'merchant' => null,
        'report' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'report_id' => true,
        'merchant_id' => true,
        'statement_number' => false,
        'report_period_started_at' => false,
        'report_period_ended_at' => false,
        'inserted' => false,
        'report_content' => true,
        'report_content_type' => true,
        'merchant' => false,
        'report' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'report_id' => 'reportID',
        'merchant_id' => 'merchantID',
        'statement_number' => 'statementNumber',
        'report_period_started_at' => 'reportPeriodStartedAt',
        'report_period_ended_at' => 'reportPeriodEndedAt',
        'inserted' => 'inserted',
        'report_content' => 'reportContent',
        'report_content_type' => 'reportContentType',
        'merchant' => 'merchant',
        'report' => 'report'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'report_id' => 'setReportId',
        'merchant_id' => 'setMerchantId',
        'statement_number' => 'setStatementNumber',
        'report_period_started_at' => 'setReportPeriodStartedAt',
        'report_period_ended_at' => 'setReportPeriodEndedAt',
        'inserted' => 'setInserted',
        'report_content' => 'setReportContent',
        'report_content_type' => 'setReportContentType',
        'merchant' => 'setMerchant',
        'report' => 'setReport'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'report_id' => 'getReportId',
        'merchant_id' => 'getMerchantId',
        'statement_number' => 'getStatementNumber',
        'report_period_started_at' => 'getReportPeriodStartedAt',
        'report_period_ended_at' => 'getReportPeriodEndedAt',
        'inserted' => 'getInserted',
        'report_content' => 'getReportContent',
        'report_content_type' => 'getReportContentType',
        'merchant' => 'getMerchant',
        'report' => 'getReport'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('report_id', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('statement_number', $data ?? [], null);
        $this->setIfExists('report_period_started_at', $data ?? [], null);
        $this->setIfExists('report_period_ended_at', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('report_content', $data ?? [], null);
        $this->setIfExists('report_content_type', $data ?? [], null);
        $this->setIfExists('merchant', $data ?? [], null);
        $this->setIfExists('report', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets report_id
     *
     * @return string|null
     */
    public function getReportId()
    {
        return $this->container['report_id'];
    }

    /**
     * Sets report_id
     *
     * @param string|null $report_id report_id
     *
     * @return self
     */
    public function setReportId($report_id)
    {
        if (is_null($report_id)) {
            array_push($this->openAPINullablesSetToNull, 'report_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['report_id'] = $report_id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            array_push($this->openAPINullablesSetToNull, 'merchant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets statement_number
     *
     * @return int|null
     */
    public function getStatementNumber()
    {
        return $this->container['statement_number'];
    }

    /**
     * Sets statement_number
     *
     * @param int|null $statement_number statement_number
     *
     * @return self
     */
    public function setStatementNumber($statement_number)
    {
        if (is_null($statement_number)) {
            throw new \InvalidArgumentException('non-nullable statement_number cannot be null');
        }
        $this->container['statement_number'] = $statement_number;

        return $this;
    }

    /**
     * Gets report_period_started_at
     *
     * @return \DateTime|null
     */
    public function getReportPeriodStartedAt()
    {
        return $this->container['report_period_started_at'];
    }

    /**
     * Sets report_period_started_at
     *
     * @param \DateTime|null $report_period_started_at report_period_started_at
     *
     * @return self
     */
    public function setReportPeriodStartedAt($report_period_started_at)
    {
        if (is_null($report_period_started_at)) {
            throw new \InvalidArgumentException('non-nullable report_period_started_at cannot be null');
        }
        $this->container['report_period_started_at'] = $report_period_started_at;

        return $this;
    }

    /**
     * Gets report_period_ended_at
     *
     * @return \DateTime|null
     */
    public function getReportPeriodEndedAt()
    {
        return $this->container['report_period_ended_at'];
    }

    /**
     * Sets report_period_ended_at
     *
     * @param \DateTime|null $report_period_ended_at report_period_ended_at
     *
     * @return self
     */
    public function setReportPeriodEndedAt($report_period_ended_at)
    {
        if (is_null($report_period_ended_at)) {
            throw new \InvalidArgumentException('non-nullable report_period_ended_at cannot be null');
        }
        $this->container['report_period_ended_at'] = $report_period_ended_at;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted inserted
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets report_content
     *
     * @return string|null
     */
    public function getReportContent()
    {
        return $this->container['report_content'];
    }

    /**
     * Sets report_content
     *
     * @param string|null $report_content report_content
     *
     * @return self
     */
    public function setReportContent($report_content)
    {
        if (is_null($report_content)) {
            array_push($this->openAPINullablesSetToNull, 'report_content');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_content', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['report_content'] = $report_content;

        return $this;
    }

    /**
     * Gets report_content_type
     *
     * @return string|null
     */
    public function getReportContentType()
    {
        return $this->container['report_content_type'];
    }

    /**
     * Sets report_content_type
     *
     * @param string|null $report_content_type report_content_type
     *
     * @return self
     */
    public function setReportContentType($report_content_type)
    {
        if (is_null($report_content_type)) {
            array_push($this->openAPINullablesSetToNull, 'report_content_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_content_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['report_content_type'] = $report_content_type;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity|null
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity|null $merchant merchant
     *
     * @return self
     */
    public function setMerchant($merchant)
    {
        if (is_null($merchant)) {
            throw new \InvalidArgumentException('non-nullable merchant cannot be null');
        }
        $this->container['merchant'] = $merchant;

        return $this;
    }

    /**
     * Gets report
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsReportEntity|null
     */
    public function getReport()
    {
        return $this->container['report'];
    }

    /**
     * Sets report
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsReportEntity|null $report report
     *
     * @return self
     */
    public function setReport($report)
    {
        if (is_null($report)) {
            throw new \InvalidArgumentException('non-nullable report cannot be null');
        }
        $this->container['report'] = $report;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


