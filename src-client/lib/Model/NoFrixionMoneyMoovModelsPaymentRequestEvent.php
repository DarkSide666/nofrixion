<?php
/**
 * NoFrixionMoneyMoovModelsPaymentRequestEvent
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionMoneyMoovModelsPaymentRequestEvent Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionMoneyMoovModelsPaymentRequestEvent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.MoneyMoov.Models.PaymentRequestEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'payment_request_id' => 'string',
        'inserted' => '\DateTime',
        'event_type' => 'string',
        'amount' => 'float',
        'currency' => 'string',
        'status' => 'string',
        'error_reason' => 'string',
        'error_message' => 'string',
        'card_request_id' => 'string',
        'card_transaction_id' => 'string',
        'card_token_customer_id' => 'string',
        'card_authorization_response_id' => 'string',
        'lightning_invoice' => 'string',
        'lightning_r_hash' => 'string',
        'pisp_payment_service_provider_id' => 'string',
        'pisp_payment_initiation_id' => 'string',
        'pisp_redirect_url' => 'string',
        'payment_processor_name' => 'string',
        'pisp_bank_status' => 'string',
        'wallet_name' => 'string',
        'refund_payout_id' => 'string',
        'apple_pay_transaction_id' => 'string',
        'pisp_payment_institution_name' => 'string',
        'origin_url' => 'string',
        'reconciled_transaction_id' => 'string',
        'direct_debit_payment_id' => 'string',
        'direct_debit_payment_reference' => 'string',
        'drirect_debit_mandate_id' => 'string',
        'card_scheme' => 'string',
        'card_expiry_year' => 'int',
        'card_expiry_month' => 'int',
        'card_last_four_digits' => 'string',
        'card_issuer' => 'string',
        'card_issuer_country' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'payment_request_id' => 'uuid',
        'inserted' => 'date-time',
        'event_type' => null,
        'amount' => 'double',
        'currency' => null,
        'status' => null,
        'error_reason' => null,
        'error_message' => null,
        'card_request_id' => null,
        'card_transaction_id' => null,
        'card_token_customer_id' => null,
        'card_authorization_response_id' => null,
        'lightning_invoice' => null,
        'lightning_r_hash' => null,
        'pisp_payment_service_provider_id' => null,
        'pisp_payment_initiation_id' => null,
        'pisp_redirect_url' => null,
        'payment_processor_name' => null,
        'pisp_bank_status' => null,
        'wallet_name' => null,
        'refund_payout_id' => 'uuid',
        'apple_pay_transaction_id' => null,
        'pisp_payment_institution_name' => null,
        'origin_url' => null,
        'reconciled_transaction_id' => 'uuid',
        'direct_debit_payment_id' => null,
        'direct_debit_payment_reference' => null,
        'drirect_debit_mandate_id' => 'uuid',
        'card_scheme' => null,
        'card_expiry_year' => 'int32',
        'card_expiry_month' => 'int32',
        'card_last_four_digits' => null,
        'card_issuer' => null,
        'card_issuer_country' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'payment_request_id' => false,
        'inserted' => false,
        'event_type' => false,
        'amount' => false,
        'currency' => false,
        'status' => true,
        'error_reason' => true,
        'error_message' => true,
        'card_request_id' => true,
        'card_transaction_id' => true,
        'card_token_customer_id' => true,
        'card_authorization_response_id' => true,
        'lightning_invoice' => true,
        'lightning_r_hash' => true,
        'pisp_payment_service_provider_id' => true,
        'pisp_payment_initiation_id' => true,
        'pisp_redirect_url' => true,
        'payment_processor_name' => false,
        'pisp_bank_status' => true,
        'wallet_name' => true,
        'refund_payout_id' => true,
        'apple_pay_transaction_id' => true,
        'pisp_payment_institution_name' => true,
        'origin_url' => true,
        'reconciled_transaction_id' => true,
        'direct_debit_payment_id' => true,
        'direct_debit_payment_reference' => true,
        'drirect_debit_mandate_id' => true,
        'card_scheme' => true,
        'card_expiry_year' => true,
        'card_expiry_month' => true,
        'card_last_four_digits' => true,
        'card_issuer' => true,
        'card_issuer_country' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'payment_request_id' => 'paymentRequestID',
        'inserted' => 'inserted',
        'event_type' => 'eventType',
        'amount' => 'amount',
        'currency' => 'currency',
        'status' => 'status',
        'error_reason' => 'errorReason',
        'error_message' => 'errorMessage',
        'card_request_id' => 'cardRequestID',
        'card_transaction_id' => 'cardTransactionID',
        'card_token_customer_id' => 'cardTokenCustomerID',
        'card_authorization_response_id' => 'cardAuthorizationResponseID',
        'lightning_invoice' => 'lightningInvoice',
        'lightning_r_hash' => 'lightningRHash',
        'pisp_payment_service_provider_id' => 'pispPaymentServiceProviderID',
        'pisp_payment_initiation_id' => 'pispPaymentInitiationID',
        'pisp_redirect_url' => 'pispRedirectUrl',
        'payment_processor_name' => 'paymentProcessorName',
        'pisp_bank_status' => 'pispBankStatus',
        'wallet_name' => 'walletName',
        'refund_payout_id' => 'refundPayoutID',
        'apple_pay_transaction_id' => 'applePayTransactionID',
        'pisp_payment_institution_name' => 'pispPaymentInstitutionName',
        'origin_url' => 'originUrl',
        'reconciled_transaction_id' => 'reconciledTransactionID',
        'direct_debit_payment_id' => 'directDebitPaymentID',
        'direct_debit_payment_reference' => 'directDebitPaymentReference',
        'drirect_debit_mandate_id' => 'drirectDebitMandateID',
        'card_scheme' => 'cardScheme',
        'card_expiry_year' => 'cardExpiryYear',
        'card_expiry_month' => 'cardExpiryMonth',
        'card_last_four_digits' => 'cardLastFourDigits',
        'card_issuer' => 'cardIssuer',
        'card_issuer_country' => 'cardIssuerCountry'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'payment_request_id' => 'setPaymentRequestId',
        'inserted' => 'setInserted',
        'event_type' => 'setEventType',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'status' => 'setStatus',
        'error_reason' => 'setErrorReason',
        'error_message' => 'setErrorMessage',
        'card_request_id' => 'setCardRequestId',
        'card_transaction_id' => 'setCardTransactionId',
        'card_token_customer_id' => 'setCardTokenCustomerId',
        'card_authorization_response_id' => 'setCardAuthorizationResponseId',
        'lightning_invoice' => 'setLightningInvoice',
        'lightning_r_hash' => 'setLightningRHash',
        'pisp_payment_service_provider_id' => 'setPispPaymentServiceProviderId',
        'pisp_payment_initiation_id' => 'setPispPaymentInitiationId',
        'pisp_redirect_url' => 'setPispRedirectUrl',
        'payment_processor_name' => 'setPaymentProcessorName',
        'pisp_bank_status' => 'setPispBankStatus',
        'wallet_name' => 'setWalletName',
        'refund_payout_id' => 'setRefundPayoutId',
        'apple_pay_transaction_id' => 'setApplePayTransactionId',
        'pisp_payment_institution_name' => 'setPispPaymentInstitutionName',
        'origin_url' => 'setOriginUrl',
        'reconciled_transaction_id' => 'setReconciledTransactionId',
        'direct_debit_payment_id' => 'setDirectDebitPaymentId',
        'direct_debit_payment_reference' => 'setDirectDebitPaymentReference',
        'drirect_debit_mandate_id' => 'setDrirectDebitMandateId',
        'card_scheme' => 'setCardScheme',
        'card_expiry_year' => 'setCardExpiryYear',
        'card_expiry_month' => 'setCardExpiryMonth',
        'card_last_four_digits' => 'setCardLastFourDigits',
        'card_issuer' => 'setCardIssuer',
        'card_issuer_country' => 'setCardIssuerCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'payment_request_id' => 'getPaymentRequestId',
        'inserted' => 'getInserted',
        'event_type' => 'getEventType',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'status' => 'getStatus',
        'error_reason' => 'getErrorReason',
        'error_message' => 'getErrorMessage',
        'card_request_id' => 'getCardRequestId',
        'card_transaction_id' => 'getCardTransactionId',
        'card_token_customer_id' => 'getCardTokenCustomerId',
        'card_authorization_response_id' => 'getCardAuthorizationResponseId',
        'lightning_invoice' => 'getLightningInvoice',
        'lightning_r_hash' => 'getLightningRHash',
        'pisp_payment_service_provider_id' => 'getPispPaymentServiceProviderId',
        'pisp_payment_initiation_id' => 'getPispPaymentInitiationId',
        'pisp_redirect_url' => 'getPispRedirectUrl',
        'payment_processor_name' => 'getPaymentProcessorName',
        'pisp_bank_status' => 'getPispBankStatus',
        'wallet_name' => 'getWalletName',
        'refund_payout_id' => 'getRefundPayoutId',
        'apple_pay_transaction_id' => 'getApplePayTransactionId',
        'pisp_payment_institution_name' => 'getPispPaymentInstitutionName',
        'origin_url' => 'getOriginUrl',
        'reconciled_transaction_id' => 'getReconciledTransactionId',
        'direct_debit_payment_id' => 'getDirectDebitPaymentId',
        'direct_debit_payment_reference' => 'getDirectDebitPaymentReference',
        'drirect_debit_mandate_id' => 'getDrirectDebitMandateId',
        'card_scheme' => 'getCardScheme',
        'card_expiry_year' => 'getCardExpiryYear',
        'card_expiry_month' => 'getCardExpiryMonth',
        'card_last_four_digits' => 'getCardLastFourDigits',
        'card_issuer' => 'getCardIssuer',
        'card_issuer_country' => 'getCardIssuerCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EVENT_TYPE_UNKNOWN = 'unknown';
    public const EVENT_TYPE_CARD_PAYER_AUTHENTICATION_SETUP = 'card_payer_authentication_setup';
    public const EVENT_TYPE_CARD_AUTHORIZATION = 'card_authorization';
    public const EVENT_TYPE_CARD_SALE = 'card_sale';
    public const EVENT_TYPE_CARD_CAPTURE = 'card_capture';
    public const EVENT_TYPE_CARD_VOID = 'card_void';
    public const EVENT_TYPE_PISP_INITIATE = 'pisp_initiate';
    public const EVENT_TYPE_PISP_CALLBACK = 'pisp_callback';
    public const EVENT_TYPE_LIGHTNING_INVOICE_CREATED = 'lightning_invoice_created';
    public const EVENT_TYPE_LIGHTNING_INVOICE_PAID = 'lightning_invoice_paid';
    public const EVENT_TYPE_CARD_PAYER_AUTHENTICATION_FAILURE = 'card_payer_authentication_failure';
    public const EVENT_TYPE_PISP_WEBHOOK = 'pisp_webhook';
    public const EVENT_TYPE_PISP_SETTLE = 'pisp_settle';
    public const EVENT_TYPE_PISP_SETTLE_FAILURE = 'pisp_settle_failure';
    public const EVENT_TYPE_PISP_REFUND_INITIATED = 'pisp_refund_initiated';
    public const EVENT_TYPE_PISP_REFUND_SETTLED = 'pisp_refund_settled';
    public const EVENT_TYPE_PISP_REFUND_CANCELLED = 'pisp_refund_cancelled';
    public const EVENT_TYPE_CARD_WEBHOOK = 'card_webhook';
    public const EVENT_TYPE_CARD_REFUND = 'card_refund';
    public const EVENT_TYPE_LIGHTNING_INVOICE_EXPIRED = 'lightning_invoice_expired';
    public const EVENT_TYPE_LIGHTNING_INVOICE_CANCELLED = 'lightning_invoice_cancelled';
    public const EVENT_TYPE_DIRECT_DEBIT_INITIATE = 'direct_debit_initiate';
    public const EVENT_TYPE_DIRECT_DEBIT_CREATE = 'direct_debit_create';
    public const EVENT_TYPE_DIRECT_DEBIT_STATE_CHANGE = 'direct_debit_state_change';
    public const EVENT_TYPE_DIRECT_DEBIT_PAID = 'direct_debit_paid';
    public const EVENT_TYPE_DIRECT_DEBIT_FAILED = 'direct_debit_failed';
    public const CURRENCY_NONE = 'NONE';
    public const CURRENCY_GBP = 'GBP';
    public const CURRENCY_EUR = 'EUR';
    public const CURRENCY_BTC = 'BTC';
    public const PAYMENT_PROCESSOR_NAME_NONE = 'None';
    public const PAYMENT_PROCESSOR_NAME_CYBER_SOURCE = 'CyberSource';
    public const PAYMENT_PROCESSOR_NAME_CHECKOUT = 'Checkout';
    public const PAYMENT_PROCESSOR_NAME_STRIPE = 'Stripe';
    public const PAYMENT_PROCESSOR_NAME_MODULR = 'Modulr';
    public const PAYMENT_PROCESSOR_NAME_PLAID = 'Plaid';
    public const PAYMENT_PROCESSOR_NAME_YAPILY = 'Yapily';
    public const PAYMENT_PROCESSOR_NAME_NOFRIXION = 'Nofrixion';
    public const PAYMENT_PROCESSOR_NAME_BITCOIN = 'Bitcoin';
    public const PAYMENT_PROCESSOR_NAME_BITCOIN_TESTNET = 'BitcoinTestnet';
    public const PAYMENT_PROCESSOR_NAME_BANKING_CIRCLE = 'BankingCircle';
    public const PAYMENT_PROCESSOR_NAME_BANKING_CIRCLE_AGENCY = 'BankingCircleAgency';
    public const PAYMENT_PROCESSOR_NAME_SIMULATOR = 'Simulator';
    public const PAYMENT_PROCESSOR_NAME_LIGHTNING = 'Lightning';
    public const PAYMENT_PROCESSOR_NAME_LIGHTNING_TESTNET = 'LightningTestnet';
    public const PAYMENT_PROCESSOR_NAME_BANKING_CIRCLE_DIRECT_DEBIT = 'BankingCircleDirectDebit';
    public const PAYMENT_PROCESSOR_NAME_TRIBE = 'Tribe';
    public const WALLET_NAME_APPLE_PAY = 'ApplePay';
    public const WALLET_NAME_GOOGLE_PAY = 'GooglePay';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventTypeAllowableValues()
    {
        return [
            self::EVENT_TYPE_UNKNOWN,
            self::EVENT_TYPE_CARD_PAYER_AUTHENTICATION_SETUP,
            self::EVENT_TYPE_CARD_AUTHORIZATION,
            self::EVENT_TYPE_CARD_SALE,
            self::EVENT_TYPE_CARD_CAPTURE,
            self::EVENT_TYPE_CARD_VOID,
            self::EVENT_TYPE_PISP_INITIATE,
            self::EVENT_TYPE_PISP_CALLBACK,
            self::EVENT_TYPE_LIGHTNING_INVOICE_CREATED,
            self::EVENT_TYPE_LIGHTNING_INVOICE_PAID,
            self::EVENT_TYPE_CARD_PAYER_AUTHENTICATION_FAILURE,
            self::EVENT_TYPE_PISP_WEBHOOK,
            self::EVENT_TYPE_PISP_SETTLE,
            self::EVENT_TYPE_PISP_SETTLE_FAILURE,
            self::EVENT_TYPE_PISP_REFUND_INITIATED,
            self::EVENT_TYPE_PISP_REFUND_SETTLED,
            self::EVENT_TYPE_PISP_REFUND_CANCELLED,
            self::EVENT_TYPE_CARD_WEBHOOK,
            self::EVENT_TYPE_CARD_REFUND,
            self::EVENT_TYPE_LIGHTNING_INVOICE_EXPIRED,
            self::EVENT_TYPE_LIGHTNING_INVOICE_CANCELLED,
            self::EVENT_TYPE_DIRECT_DEBIT_INITIATE,
            self::EVENT_TYPE_DIRECT_DEBIT_CREATE,
            self::EVENT_TYPE_DIRECT_DEBIT_STATE_CHANGE,
            self::EVENT_TYPE_DIRECT_DEBIT_PAID,
            self::EVENT_TYPE_DIRECT_DEBIT_FAILED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_NONE,
            self::CURRENCY_GBP,
            self::CURRENCY_EUR,
            self::CURRENCY_BTC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentProcessorNameAllowableValues()
    {
        return [
            self::PAYMENT_PROCESSOR_NAME_NONE,
            self::PAYMENT_PROCESSOR_NAME_CYBER_SOURCE,
            self::PAYMENT_PROCESSOR_NAME_CHECKOUT,
            self::PAYMENT_PROCESSOR_NAME_STRIPE,
            self::PAYMENT_PROCESSOR_NAME_MODULR,
            self::PAYMENT_PROCESSOR_NAME_PLAID,
            self::PAYMENT_PROCESSOR_NAME_YAPILY,
            self::PAYMENT_PROCESSOR_NAME_NOFRIXION,
            self::PAYMENT_PROCESSOR_NAME_BITCOIN,
            self::PAYMENT_PROCESSOR_NAME_BITCOIN_TESTNET,
            self::PAYMENT_PROCESSOR_NAME_BANKING_CIRCLE,
            self::PAYMENT_PROCESSOR_NAME_BANKING_CIRCLE_AGENCY,
            self::PAYMENT_PROCESSOR_NAME_SIMULATOR,
            self::PAYMENT_PROCESSOR_NAME_LIGHTNING,
            self::PAYMENT_PROCESSOR_NAME_LIGHTNING_TESTNET,
            self::PAYMENT_PROCESSOR_NAME_BANKING_CIRCLE_DIRECT_DEBIT,
            self::PAYMENT_PROCESSOR_NAME_TRIBE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWalletNameAllowableValues()
    {
        return [
            self::WALLET_NAME_APPLE_PAY,
            self::WALLET_NAME_GOOGLE_PAY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('payment_request_id', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('event_type', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('error_reason', $data ?? [], null);
        $this->setIfExists('error_message', $data ?? [], null);
        $this->setIfExists('card_request_id', $data ?? [], null);
        $this->setIfExists('card_transaction_id', $data ?? [], null);
        $this->setIfExists('card_token_customer_id', $data ?? [], null);
        $this->setIfExists('card_authorization_response_id', $data ?? [], null);
        $this->setIfExists('lightning_invoice', $data ?? [], null);
        $this->setIfExists('lightning_r_hash', $data ?? [], null);
        $this->setIfExists('pisp_payment_service_provider_id', $data ?? [], null);
        $this->setIfExists('pisp_payment_initiation_id', $data ?? [], null);
        $this->setIfExists('pisp_redirect_url', $data ?? [], null);
        $this->setIfExists('payment_processor_name', $data ?? [], null);
        $this->setIfExists('pisp_bank_status', $data ?? [], null);
        $this->setIfExists('wallet_name', $data ?? [], null);
        $this->setIfExists('refund_payout_id', $data ?? [], null);
        $this->setIfExists('apple_pay_transaction_id', $data ?? [], null);
        $this->setIfExists('pisp_payment_institution_name', $data ?? [], null);
        $this->setIfExists('origin_url', $data ?? [], null);
        $this->setIfExists('reconciled_transaction_id', $data ?? [], null);
        $this->setIfExists('direct_debit_payment_id', $data ?? [], null);
        $this->setIfExists('direct_debit_payment_reference', $data ?? [], null);
        $this->setIfExists('drirect_debit_mandate_id', $data ?? [], null);
        $this->setIfExists('card_scheme', $data ?? [], null);
        $this->setIfExists('card_expiry_year', $data ?? [], null);
        $this->setIfExists('card_expiry_month', $data ?? [], null);
        $this->setIfExists('card_last_four_digits', $data ?? [], null);
        $this->setIfExists('card_issuer', $data ?? [], null);
        $this->setIfExists('card_issuer_country', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEventTypeAllowableValues();
        if (!is_null($this->container['event_type']) && !in_array($this->container['event_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_type', must be one of '%s'",
                $this->container['event_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentProcessorNameAllowableValues();
        if (!is_null($this->container['payment_processor_name']) && !in_array($this->container['payment_processor_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_processor_name', must be one of '%s'",
                $this->container['payment_processor_name'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWalletNameAllowableValues();
        if (!is_null($this->container['wallet_name']) && !in_array($this->container['wallet_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wallet_name', must be one of '%s'",
                $this->container['wallet_name'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets payment_request_id
     *
     * @return string|null
     */
    public function getPaymentRequestId()
    {
        return $this->container['payment_request_id'];
    }

    /**
     * Sets payment_request_id
     *
     * @param string|null $payment_request_id payment_request_id
     *
     * @return self
     */
    public function setPaymentRequestId($payment_request_id)
    {
        if (is_null($payment_request_id)) {
            throw new \InvalidArgumentException('non-nullable payment_request_id cannot be null');
        }
        $this->container['payment_request_id'] = $payment_request_id;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted inserted
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets event_type
     *
     * @return string|null
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     *
     * @param string|null $event_type event_type
     *
     * @return self
     */
    public function setEventType($event_type)
    {
        if (is_null($event_type)) {
            throw new \InvalidArgumentException('non-nullable event_type cannot be null');
        }
        $allowedValues = $this->getEventTypeAllowableValues();
        if (!in_array($event_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_type', must be one of '%s'",
                    $event_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets error_reason
     *
     * @return string|null
     */
    public function getErrorReason()
    {
        return $this->container['error_reason'];
    }

    /**
     * Sets error_reason
     *
     * @param string|null $error_reason error_reason
     *
     * @return self
     */
    public function setErrorReason($error_reason)
    {
        if (is_null($error_reason)) {
            array_push($this->openAPINullablesSetToNull, 'error_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error_reason'] = $error_reason;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string|null
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string|null $error_message error_message
     *
     * @return self
     */
    public function setErrorMessage($error_message)
    {
        if (is_null($error_message)) {
            array_push($this->openAPINullablesSetToNull, 'error_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets card_request_id
     *
     * @return string|null
     */
    public function getCardRequestId()
    {
        return $this->container['card_request_id'];
    }

    /**
     * Sets card_request_id
     *
     * @param string|null $card_request_id card_request_id
     *
     * @return self
     */
    public function setCardRequestId($card_request_id)
    {
        if (is_null($card_request_id)) {
            array_push($this->openAPINullablesSetToNull, 'card_request_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_request_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_request_id'] = $card_request_id;

        return $this;
    }

    /**
     * Gets card_transaction_id
     *
     * @return string|null
     */
    public function getCardTransactionId()
    {
        return $this->container['card_transaction_id'];
    }

    /**
     * Sets card_transaction_id
     *
     * @param string|null $card_transaction_id card_transaction_id
     *
     * @return self
     */
    public function setCardTransactionId($card_transaction_id)
    {
        if (is_null($card_transaction_id)) {
            array_push($this->openAPINullablesSetToNull, 'card_transaction_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_transaction_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_transaction_id'] = $card_transaction_id;

        return $this;
    }

    /**
     * Gets card_token_customer_id
     *
     * @return string|null
     */
    public function getCardTokenCustomerId()
    {
        return $this->container['card_token_customer_id'];
    }

    /**
     * Sets card_token_customer_id
     *
     * @param string|null $card_token_customer_id If the option to create a reusable token for card payments was set this field contains  the token the merchant can store to use for repeat payments.
     *
     * @return self
     */
    public function setCardTokenCustomerId($card_token_customer_id)
    {
        if (is_null($card_token_customer_id)) {
            array_push($this->openAPINullablesSetToNull, 'card_token_customer_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_token_customer_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_token_customer_id'] = $card_token_customer_id;

        return $this;
    }

    /**
     * Gets card_authorization_response_id
     *
     * @return string|null
     */
    public function getCardAuthorizationResponseId()
    {
        return $this->container['card_authorization_response_id'];
    }

    /**
     * Sets card_authorization_response_id
     *
     * @param string|null $card_authorization_response_id For a successful card authorization this field will hold the response ID. If a capture  needs to be performed this is the ID that must be used.
     *
     * @return self
     */
    public function setCardAuthorizationResponseId($card_authorization_response_id)
    {
        if (is_null($card_authorization_response_id)) {
            array_push($this->openAPINullablesSetToNull, 'card_authorization_response_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_authorization_response_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_authorization_response_id'] = $card_authorization_response_id;

        return $this;
    }

    /**
     * Gets lightning_invoice
     *
     * @return string|null
     */
    public function getLightningInvoice()
    {
        return $this->container['lightning_invoice'];
    }

    /**
     * Sets lightning_invoice
     *
     * @param string|null $lightning_invoice For Bitcoin Lightning payments this field holds the invoice presented to the payer.
     *
     * @return self
     */
    public function setLightningInvoice($lightning_invoice)
    {
        if (is_null($lightning_invoice)) {
            array_push($this->openAPINullablesSetToNull, 'lightning_invoice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lightning_invoice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lightning_invoice'] = $lightning_invoice;

        return $this;
    }

    /**
     * Gets lightning_r_hash
     *
     * @return string|null
     */
    public function getLightningRHash()
    {
        return $this->container['lightning_r_hash'];
    }

    /**
     * Sets lightning_r_hash
     *
     * @param string|null $lightning_r_hash For Bitcoin Lightning payments the hash of the invoice presented to the payer.
     *
     * @return self
     */
    public function setLightningRHash($lightning_r_hash)
    {
        if (is_null($lightning_r_hash)) {
            array_push($this->openAPINullablesSetToNull, 'lightning_r_hash');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lightning_r_hash', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lightning_r_hash'] = $lightning_r_hash;

        return $this;
    }

    /**
     * Gets pisp_payment_service_provider_id
     *
     * @return string|null
     */
    public function getPispPaymentServiceProviderId()
    {
        return $this->container['pisp_payment_service_provider_id'];
    }

    /**
     * Sets pisp_payment_service_provider_id
     *
     * @param string|null $pisp_payment_service_provider_id For a payment initiation this is the service provider ID selected by the payer, typically  the ID for the bank or similar financial institution.
     *
     * @return self
     */
    public function setPispPaymentServiceProviderId($pisp_payment_service_provider_id)
    {
        if (is_null($pisp_payment_service_provider_id)) {
            array_push($this->openAPINullablesSetToNull, 'pisp_payment_service_provider_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pisp_payment_service_provider_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pisp_payment_service_provider_id'] = $pisp_payment_service_provider_id;

        return $this;
    }

    /**
     * Gets pisp_payment_initiation_id
     *
     * @return string|null
     */
    public function getPispPaymentInitiationId()
    {
        return $this->container['pisp_payment_initiation_id'];
    }

    /**
     * Sets pisp_payment_initiation_id
     *
     * @param string|null $pisp_payment_initiation_id For a payment initiation this is the ID returned by the service provider initiating  the payment for us.
     *
     * @return self
     */
    public function setPispPaymentInitiationId($pisp_payment_initiation_id)
    {
        if (is_null($pisp_payment_initiation_id)) {
            array_push($this->openAPINullablesSetToNull, 'pisp_payment_initiation_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pisp_payment_initiation_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pisp_payment_initiation_id'] = $pisp_payment_initiation_id;

        return $this;
    }

    /**
     * Gets pisp_redirect_url
     *
     * @return string|null
     */
    public function getPispRedirectUrl()
    {
        return $this->container['pisp_redirect_url'];
    }

    /**
     * Sets pisp_redirect_url
     *
     * @param string|null $pisp_redirect_url For a payment initiation this is the redirect URL returned by the service provider  initiating the payment for us. This is the URL the payer is redirected to   authenticate with their financial institution and authorise the payment.
     *
     * @return self
     */
    public function setPispRedirectUrl($pisp_redirect_url)
    {
        if (is_null($pisp_redirect_url)) {
            array_push($this->openAPINullablesSetToNull, 'pisp_redirect_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pisp_redirect_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pisp_redirect_url'] = $pisp_redirect_url;

        return $this;
    }

    /**
     * Gets payment_processor_name
     *
     * @return string|null
     */
    public function getPaymentProcessorName()
    {
        return $this->container['payment_processor_name'];
    }

    /**
     * Sets payment_processor_name
     *
     * @param string|null $payment_processor_name If the event was for a card payment this is the name of the card processor,  e.g. CyberSource or Checkout, that was used.
     *
     * @return self
     */
    public function setPaymentProcessorName($payment_processor_name)
    {
        if (is_null($payment_processor_name)) {
            throw new \InvalidArgumentException('non-nullable payment_processor_name cannot be null');
        }
        $allowedValues = $this->getPaymentProcessorNameAllowableValues();
        if (!in_array($payment_processor_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_processor_name', must be one of '%s'",
                    $payment_processor_name,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_processor_name'] = $payment_processor_name;

        return $this;
    }

    /**
     * Gets pisp_bank_status
     *
     * @return string|null
     */
    public function getPispBankStatus()
    {
        return $this->container['pisp_bank_status'];
    }

    /**
     * Sets pisp_bank_status
     *
     * @param string|null $pisp_bank_status For payment initiation attempts some providers (e.g. Modulr) will return two status fields. The first  status field is from the provider and the second is from the bank.
     *
     * @return self
     */
    public function setPispBankStatus($pisp_bank_status)
    {
        if (is_null($pisp_bank_status)) {
            array_push($this->openAPINullablesSetToNull, 'pisp_bank_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pisp_bank_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pisp_bank_status'] = $pisp_bank_status;

        return $this;
    }

    /**
     * Gets wallet_name
     *
     * @return string|null
     */
    public function getWalletName()
    {
        return $this->container['wallet_name'];
    }

    /**
     * Sets wallet_name
     *
     * @param string|null $wallet_name wallet_name
     *
     * @return self
     */
    public function setWalletName($wallet_name)
    {
        if (is_null($wallet_name)) {
            array_push($this->openAPINullablesSetToNull, 'wallet_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wallet_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getWalletNameAllowableValues();
        if (!is_null($wallet_name) && !in_array($wallet_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wallet_name', must be one of '%s'",
                    $wallet_name,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wallet_name'] = $wallet_name;

        return $this;
    }

    /**
     * Gets refund_payout_id
     *
     * @return string|null
     */
    public function getRefundPayoutId()
    {
        return $this->container['refund_payout_id'];
    }

    /**
     * Sets refund_payout_id
     *
     * @param string|null $refund_payout_id ID of the Payout that was created for refund.
     *
     * @return self
     */
    public function setRefundPayoutId($refund_payout_id)
    {
        if (is_null($refund_payout_id)) {
            array_push($this->openAPINullablesSetToNull, 'refund_payout_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refund_payout_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['refund_payout_id'] = $refund_payout_id;

        return $this;
    }

    /**
     * Gets apple_pay_transaction_id
     *
     * @return string|null
     */
    public function getApplePayTransactionId()
    {
        return $this->container['apple_pay_transaction_id'];
    }

    /**
     * Sets apple_pay_transaction_id
     *
     * @param string|null $apple_pay_transaction_id Transaction ID received in Apple pay token.
     *
     * @return self
     */
    public function setApplePayTransactionId($apple_pay_transaction_id)
    {
        if (is_null($apple_pay_transaction_id)) {
            array_push($this->openAPINullablesSetToNull, 'apple_pay_transaction_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('apple_pay_transaction_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['apple_pay_transaction_id'] = $apple_pay_transaction_id;

        return $this;
    }

    /**
     * Gets pisp_payment_institution_name
     *
     * @return string|null
     */
    public function getPispPaymentInstitutionName()
    {
        return $this->container['pisp_payment_institution_name'];
    }

    /**
     * Sets pisp_payment_institution_name
     *
     * @param string|null $pisp_payment_institution_name For a payment initiation this is the name of the financial institution that  is used to initiate and authorise the payment.
     *
     * @return self
     */
    public function setPispPaymentInstitutionName($pisp_payment_institution_name)
    {
        if (is_null($pisp_payment_institution_name)) {
            array_push($this->openAPINullablesSetToNull, 'pisp_payment_institution_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pisp_payment_institution_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pisp_payment_institution_name'] = $pisp_payment_institution_name;

        return $this;
    }

    /**
     * Gets origin_url
     *
     * @return string|null
     */
    public function getOriginUrl()
    {
        return $this->container['origin_url'];
    }

    /**
     * Sets origin_url
     *
     * @param string|null $origin_url Optional field that can be set by payment methods, such as pay by bank, that may want to redirect  back to the URL that initiated the attempt in the case of a failure condition.
     *
     * @return self
     */
    public function setOriginUrl($origin_url)
    {
        if (is_null($origin_url)) {
            array_push($this->openAPINullablesSetToNull, 'origin_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('origin_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['origin_url'] = $origin_url;

        return $this;
    }

    /**
     * Gets reconciled_transaction_id
     *
     * @return string|null
     */
    public function getReconciledTransactionId()
    {
        return $this->container['reconciled_transaction_id'];
    }

    /**
     * Sets reconciled_transaction_id
     *
     * @param string|null $reconciled_transaction_id For settlement events (only relevant for non-card payments) this is the payin transaction that  the payment request event was reconciled with.
     *
     * @return self
     */
    public function setReconciledTransactionId($reconciled_transaction_id)
    {
        if (is_null($reconciled_transaction_id)) {
            array_push($this->openAPINullablesSetToNull, 'reconciled_transaction_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reconciled_transaction_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reconciled_transaction_id'] = $reconciled_transaction_id;

        return $this;
    }

    /**
     * Gets direct_debit_payment_id
     *
     * @return string|null
     */
    public function getDirectDebitPaymentId()
    {
        return $this->container['direct_debit_payment_id'];
    }

    /**
     * Sets direct_debit_payment_id
     *
     * @param string|null $direct_debit_payment_id Payment ID issued by the Direct Debit supplier.
     *
     * @return self
     */
    public function setDirectDebitPaymentId($direct_debit_payment_id)
    {
        if (is_null($direct_debit_payment_id)) {
            array_push($this->openAPINullablesSetToNull, 'direct_debit_payment_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('direct_debit_payment_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['direct_debit_payment_id'] = $direct_debit_payment_id;

        return $this;
    }

    /**
     * Gets direct_debit_payment_reference
     *
     * @return string|null
     */
    public function getDirectDebitPaymentReference()
    {
        return $this->container['direct_debit_payment_reference'];
    }

    /**
     * Sets direct_debit_payment_reference
     *
     * @param string|null $direct_debit_payment_reference Reference string issued by the Direct Debit supplier.
     *
     * @return self
     */
    public function setDirectDebitPaymentReference($direct_debit_payment_reference)
    {
        if (is_null($direct_debit_payment_reference)) {
            array_push($this->openAPINullablesSetToNull, 'direct_debit_payment_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('direct_debit_payment_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['direct_debit_payment_reference'] = $direct_debit_payment_reference;

        return $this;
    }

    /**
     * Gets drirect_debit_mandate_id
     *
     * @return string|null
     */
    public function getDrirectDebitMandateId()
    {
        return $this->container['drirect_debit_mandate_id'];
    }

    /**
     * Sets drirect_debit_mandate_id
     *
     * @param string|null $drirect_debit_mandate_id The ID of the mandate that was used wehn requesting payment.
     *
     * @return self
     */
    public function setDrirectDebitMandateId($drirect_debit_mandate_id)
    {
        if (is_null($drirect_debit_mandate_id)) {
            array_push($this->openAPINullablesSetToNull, 'drirect_debit_mandate_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('drirect_debit_mandate_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['drirect_debit_mandate_id'] = $drirect_debit_mandate_id;

        return $this;
    }

    /**
     * Gets card_scheme
     *
     * @return string|null
     */
    public function getCardScheme()
    {
        return $this->container['card_scheme'];
    }

    /**
     * Sets card_scheme
     *
     * @param string|null $card_scheme For card payment events this field holds the scheme of the payer's card, e.g. Visa, Mastercard, etc.
     *
     * @return self
     */
    public function setCardScheme($card_scheme)
    {
        if (is_null($card_scheme)) {
            array_push($this->openAPINullablesSetToNull, 'card_scheme');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_scheme', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_scheme'] = $card_scheme;

        return $this;
    }

    /**
     * Gets card_expiry_year
     *
     * @return int|null
     */
    public function getCardExpiryYear()
    {
        return $this->container['card_expiry_year'];
    }

    /**
     * Sets card_expiry_year
     *
     * @param int|null $card_expiry_year For card payment events this field holds the payer's card expiry year.
     *
     * @return self
     */
    public function setCardExpiryYear($card_expiry_year)
    {
        if (is_null($card_expiry_year)) {
            array_push($this->openAPINullablesSetToNull, 'card_expiry_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_expiry_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_expiry_year'] = $card_expiry_year;

        return $this;
    }

    /**
     * Gets card_expiry_month
     *
     * @return int|null
     */
    public function getCardExpiryMonth()
    {
        return $this->container['card_expiry_month'];
    }

    /**
     * Sets card_expiry_month
     *
     * @param int|null $card_expiry_month For card payment events this field holds the payer's card expiry month.
     *
     * @return self
     */
    public function setCardExpiryMonth($card_expiry_month)
    {
        if (is_null($card_expiry_month)) {
            array_push($this->openAPINullablesSetToNull, 'card_expiry_month');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_expiry_month', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_expiry_month'] = $card_expiry_month;

        return $this;
    }

    /**
     * Gets card_last_four_digits
     *
     * @return string|null
     */
    public function getCardLastFourDigits()
    {
        return $this->container['card_last_four_digits'];
    }

    /**
     * Sets card_last_four_digits
     *
     * @param string|null $card_last_four_digits For card payment events this field holds the payer's card last four digits.
     *
     * @return self
     */
    public function setCardLastFourDigits($card_last_four_digits)
    {
        if (is_null($card_last_four_digits)) {
            array_push($this->openAPINullablesSetToNull, 'card_last_four_digits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_last_four_digits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_last_four_digits'] = $card_last_four_digits;

        return $this;
    }

    /**
     * Gets card_issuer
     *
     * @return string|null
     */
    public function getCardIssuer()
    {
        return $this->container['card_issuer'];
    }

    /**
     * Sets card_issuer
     *
     * @param string|null $card_issuer For card payment events this field holds the payer's card issuer.
     *
     * @return self
     */
    public function setCardIssuer($card_issuer)
    {
        if (is_null($card_issuer)) {
            array_push($this->openAPINullablesSetToNull, 'card_issuer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_issuer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_issuer'] = $card_issuer;

        return $this;
    }

    /**
     * Gets card_issuer_country
     *
     * @return string|null
     */
    public function getCardIssuerCountry()
    {
        return $this->container['card_issuer_country'];
    }

    /**
     * Sets card_issuer_country
     *
     * @param string|null $card_issuer_country For card payment events this field holds the payer's card issuer country of origin.
     *
     * @return self
     */
    public function setCardIssuerCountry($card_issuer_country)
    {
        if (is_null($card_issuer_country)) {
            array_push($this->openAPINullablesSetToNull, 'card_issuer_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_issuer_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_issuer_country'] = $card_issuer_country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


