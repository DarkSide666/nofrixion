<?php
/**
 * NoFrixionMoneyMoovModelsSweepDestination
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionMoneyMoovModelsSweepDestination Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionMoneyMoovModelsSweepDestination implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.MoneyMoov.Models.SweepDestination';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sweep_percentage' => 'float',
        'sweep_amount' => 'float',
        'priority' => 'int',
        'is_disabled' => 'bool',
        'account_id' => 'string',
        'internal_account_name' => 'string',
        'beneficiary_id' => 'string',
        'name' => 'string',
        'email_address' => 'string',
        'phone_number' => 'string',
        'identifier' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsAccountIdentifier',
        'summary' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sweep_percentage' => 'double',
        'sweep_amount' => 'double',
        'priority' => 'int32',
        'is_disabled' => null,
        'account_id' => 'uuid',
        'internal_account_name' => null,
        'beneficiary_id' => 'uuid',
        'name' => null,
        'email_address' => null,
        'phone_number' => null,
        'identifier' => null,
        'summary' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sweep_percentage' => false,
        'sweep_amount' => false,
        'priority' => false,
        'is_disabled' => false,
        'account_id' => true,
        'internal_account_name' => true,
        'beneficiary_id' => true,
        'name' => true,
        'email_address' => true,
        'phone_number' => true,
        'identifier' => false,
        'summary' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sweep_percentage' => 'sweepPercentage',
        'sweep_amount' => 'sweepAmount',
        'priority' => 'priority',
        'is_disabled' => 'isDisabled',
        'account_id' => 'accountID',
        'internal_account_name' => 'internalAccountName',
        'beneficiary_id' => 'beneficiaryID',
        'name' => 'name',
        'email_address' => 'emailAddress',
        'phone_number' => 'phoneNumber',
        'identifier' => 'identifier',
        'summary' => 'summary'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sweep_percentage' => 'setSweepPercentage',
        'sweep_amount' => 'setSweepAmount',
        'priority' => 'setPriority',
        'is_disabled' => 'setIsDisabled',
        'account_id' => 'setAccountId',
        'internal_account_name' => 'setInternalAccountName',
        'beneficiary_id' => 'setBeneficiaryId',
        'name' => 'setName',
        'email_address' => 'setEmailAddress',
        'phone_number' => 'setPhoneNumber',
        'identifier' => 'setIdentifier',
        'summary' => 'setSummary'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sweep_percentage' => 'getSweepPercentage',
        'sweep_amount' => 'getSweepAmount',
        'priority' => 'getPriority',
        'is_disabled' => 'getIsDisabled',
        'account_id' => 'getAccountId',
        'internal_account_name' => 'getInternalAccountName',
        'beneficiary_id' => 'getBeneficiaryId',
        'name' => 'getName',
        'email_address' => 'getEmailAddress',
        'phone_number' => 'getPhoneNumber',
        'identifier' => 'getIdentifier',
        'summary' => 'getSummary'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sweep_percentage', $data ?? [], null);
        $this->setIfExists('sweep_amount', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
        $this->setIfExists('is_disabled', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('internal_account_name', $data ?? [], null);
        $this->setIfExists('beneficiary_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('email_address', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('identifier', $data ?? [], null);
        $this->setIfExists('summary', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['sweep_percentage']) && ($this->container['sweep_percentage'] > 100)) {
            $invalidProperties[] = "invalid value for 'sweep_percentage', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['sweep_percentage']) && ($this->container['sweep_percentage'] < 0)) {
            $invalidProperties[] = "invalid value for 'sweep_percentage', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] > 1000)) {
            $invalidProperties[] = "invalid value for 'priority', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] < 0)) {
            $invalidProperties[] = "invalid value for 'priority', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sweep_percentage
     *
     * @return float|null
     */
    public function getSweepPercentage()
    {
        return $this->container['sweep_percentage'];
    }

    /**
     * Sets sweep_percentage
     *
     * @param float|null $sweep_percentage The percentage of the total funds in the account when the rule is executed  that should be swept to the destination.
     *
     * @return self
     */
    public function setSweepPercentage($sweep_percentage)
    {
        if (is_null($sweep_percentage)) {
            throw new \InvalidArgumentException('non-nullable sweep_percentage cannot be null');
        }

        if (($sweep_percentage > 100)) {
            throw new \InvalidArgumentException('invalid value for $sweep_percentage when calling NoFrixionMoneyMoovModelsSweepDestination., must be smaller than or equal to 100.');
        }
        if (($sweep_percentage < 0)) {
            throw new \InvalidArgumentException('invalid value for $sweep_percentage when calling NoFrixionMoneyMoovModelsSweepDestination., must be bigger than or equal to 0.');
        }

        $this->container['sweep_percentage'] = $sweep_percentage;

        return $this;
    }

    /**
     * Gets sweep_amount
     *
     * @return float|null
     */
    public function getSweepAmount()
    {
        return $this->container['sweep_amount'];
    }

    /**
     * Sets sweep_amount
     *
     * @param float|null $sweep_amount The amount that should be swept to the destination. Ignored if a sweep percentage is set.
     *
     * @return self
     */
    public function setSweepAmount($sweep_amount)
    {
        if (is_null($sweep_amount)) {
            throw new \InvalidArgumentException('non-nullable sweep_amount cannot be null');
        }
        $this->container['sweep_amount'] = $sweep_amount;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority The priority of the destination. Lower numbers represent higher priorities, e.g. 0 is the highest priority.   Relevant when there are multiple destinations in a sweep. The higher priority destinations will be paid first   and also attributed any remaining balance in the case of an uneven split.
     *
     * @return self
     */
    public function setPriority($priority)
    {
        if (is_null($priority)) {
            throw new \InvalidArgumentException('non-nullable priority cannot be null');
        }

        if (($priority > 1000)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling NoFrixionMoneyMoovModelsSweepDestination., must be smaller than or equal to 1000.');
        }
        if (($priority < 0)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling NoFrixionMoneyMoovModelsSweepDestination., must be bigger than or equal to 0.');
        }

        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets is_disabled
     *
     * @return bool|null
     */
    public function getIsDisabled()
    {
        return $this->container['is_disabled'];
    }

    /**
     * Sets is_disabled
     *
     * @param bool|null $is_disabled If set to true, it indicates that the destiation is disabled and should not be used.
     *
     * @return self
     */
    public function setIsDisabled($is_disabled)
    {
        if (is_null($is_disabled)) {
            throw new \InvalidArgumentException('non-nullable is_disabled cannot be null');
        }
        $this->container['is_disabled'] = $is_disabled;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id An optional ID of an internal account the counterparty is associated with. If set  it will take precedence over any other destination details set for the counterparty.
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            array_push($this->openAPINullablesSetToNull, 'account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets internal_account_name
     *
     * @return string|null
     */
    public function getInternalAccountName()
    {
        return $this->container['internal_account_name'];
    }

    /**
     * Sets internal_account_name
     *
     * @param string|null $internal_account_name If the counterparty is an internal account, this is the name of the account.
     *
     * @return self
     */
    public function setInternalAccountName($internal_account_name)
    {
        if (is_null($internal_account_name)) {
            array_push($this->openAPINullablesSetToNull, 'internal_account_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('internal_account_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['internal_account_name'] = $internal_account_name;

        return $this;
    }

    /**
     * Gets beneficiary_id
     *
     * @return string|null
     */
    public function getBeneficiaryId()
    {
        return $this->container['beneficiary_id'];
    }

    /**
     * Sets beneficiary_id
     *
     * @param string|null $beneficiary_id Optional ID of a Beneficiary to use for the counterparty destination. If set  it will take precedence over any other destination details, except for AccountID,  set for the counterparty.
     *
     * @return self
     */
    public function setBeneficiaryId($beneficiary_id)
    {
        if (is_null($beneficiary_id)) {
            array_push($this->openAPINullablesSetToNull, 'beneficiary_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('beneficiary_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['beneficiary_id'] = $beneficiary_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the counterparty. For a person this should be their full name. For a   company this should be their registered or trading name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string|null $email_address An email address for the counterparty. Optional to set and depending on the payment  network does not always get set for pay ins.
     *
     * @return self
     */
    public function setEmailAddress($email_address)
    {
        if (is_null($email_address)) {
            array_push($this->openAPINullablesSetToNull, 'email_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsAccountIdentifier|null
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsAccountIdentifier|null $identifier identifier
     *
     * @return self
     */
    public function setIdentifier($identifier)
    {
        if (is_null($identifier)) {
            throw new \InvalidArgumentException('non-nullable identifier cannot be null');
        }
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string|null $summary Gets a convenient summary representation of the counterparty.
     *
     * @return self
     */
    public function setSummary($summary)
    {
        if (is_null($summary)) {
            array_push($this->openAPINullablesSetToNull, 'summary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('summary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['summary'] = $summary;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


