<?php
/**
 * NoFrixionMoneyMoovModelsOpenBankingAccount
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionMoneyMoovModelsOpenBankingAccount Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionMoneyMoovModelsOpenBankingAccount implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.MoneyMoov.Models.OpenBanking.Account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'usage_type' => 'string',
        'account_type' => 'string',
        'id' => 'string',
        'type' => 'string',
        'description' => 'string',
        'balance' => 'float',
        'currency' => 'string',
        'nickname' => 'string',
        'details' => 'string',
        'account_names' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAccountName[]',
        'account_identifications' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAccountIdentification[]',
        'account_balances' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAccountBalance[]',
        'consolidated_account_information' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsolidatedAccountInformation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'usage_type' => null,
        'account_type' => null,
        'id' => null,
        'type' => null,
        'description' => null,
        'balance' => 'double',
        'currency' => null,
        'nickname' => null,
        'details' => null,
        'account_names' => null,
        'account_identifications' => null,
        'account_balances' => null,
        'consolidated_account_information' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'usage_type' => true,
        'account_type' => true,
        'id' => true,
        'type' => true,
        'description' => true,
        'balance' => false,
        'currency' => true,
        'nickname' => true,
        'details' => true,
        'account_names' => true,
        'account_identifications' => true,
        'account_balances' => true,
        'consolidated_account_information' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'usage_type' => 'usageType',
        'account_type' => 'accountType',
        'id' => 'id',
        'type' => 'type',
        'description' => 'description',
        'balance' => 'balance',
        'currency' => 'currency',
        'nickname' => 'nickname',
        'details' => 'details',
        'account_names' => 'accountNames',
        'account_identifications' => 'accountIdentifications',
        'account_balances' => 'accountBalances',
        'consolidated_account_information' => 'consolidatedAccountInformation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'usage_type' => 'setUsageType',
        'account_type' => 'setAccountType',
        'id' => 'setId',
        'type' => 'setType',
        'description' => 'setDescription',
        'balance' => 'setBalance',
        'currency' => 'setCurrency',
        'nickname' => 'setNickname',
        'details' => 'setDetails',
        'account_names' => 'setAccountNames',
        'account_identifications' => 'setAccountIdentifications',
        'account_balances' => 'setAccountBalances',
        'consolidated_account_information' => 'setConsolidatedAccountInformation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'usage_type' => 'getUsageType',
        'account_type' => 'getAccountType',
        'id' => 'getId',
        'type' => 'getType',
        'description' => 'getDescription',
        'balance' => 'getBalance',
        'currency' => 'getCurrency',
        'nickname' => 'getNickname',
        'details' => 'getDetails',
        'account_names' => 'getAccountNames',
        'account_identifications' => 'getAccountIdentifications',
        'account_balances' => 'getAccountBalances',
        'consolidated_account_information' => 'getConsolidatedAccountInformation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const USAGE_TYPE_PERSONAL = 'PERSONAL';
    public const USAGE_TYPE_BUSINESS = 'BUSINESS';
    public const USAGE_TYPE_OTHER = 'OTHER';
    public const USAGE_TYPE_UNKNOWN = 'UNKNOWN';
    public const ACCOUNT_TYPE_CASH_TRADING = 'CASH_TRADING';
    public const ACCOUNT_TYPE_CASH_INCOME = 'CASH_INCOME';
    public const ACCOUNT_TYPE_CASH_PAYMENT = 'CASH_PAYMENT';
    public const ACCOUNT_TYPE_CHARGE_CARD = 'CHARGE_CARD';
    public const ACCOUNT_TYPE_CHARGES = 'CHARGES';
    public const ACCOUNT_TYPE_COMMISSION = 'COMMISSION';
    public const ACCOUNT_TYPE_CREDIT_CARD = 'CREDIT_CARD';
    public const ACCOUNT_TYPE_CURRENT = 'CURRENT';
    public const ACCOUNT_TYPE_E_MONEY = 'E_MONEY';
    public const ACCOUNT_TYPE_LIMITED_LIQUIDITY_SAVINGS_ACCOUNT = 'LIMITED_LIQUIDITY_SAVINGS_ACCOUNT';
    public const ACCOUNT_TYPE_LOAN = 'LOAN';
    public const ACCOUNT_TYPE_MARGINAL_LENDING = 'MARGINAL_LENDING';
    public const ACCOUNT_TYPE_MONEY_MARKET = 'MONEY_MARKET';
    public const ACCOUNT_TYPE_MORTGAGE = 'MORTGAGE';
    public const ACCOUNT_TYPE_NON_RESIDENT_EXTERNAL = 'NON_RESIDENT_EXTERNAL';
    public const ACCOUNT_TYPE_OTHER = 'OTHER';
    public const ACCOUNT_TYPE_OVERDRAFT = 'OVERDRAFT';
    public const ACCOUNT_TYPE_OVERNIGHT_DEPOSIT = 'OVERNIGHT_DEPOSIT';
    public const ACCOUNT_TYPE_PREPAID_CARD = 'PREPAID_CARD';
    public const ACCOUNT_TYPE_SALARY = 'SALARY';
    public const ACCOUNT_TYPE_SAVINGS = 'SAVINGS';
    public const ACCOUNT_TYPE_SETTLEMENT = 'SETTLEMENT';
    public const ACCOUNT_TYPE_TAX = 'TAX';
    public const ACCOUNT_TYPE_UNKNOWN = 'UNKNOWN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUsageTypeAllowableValues()
    {
        return [
            self::USAGE_TYPE_PERSONAL,
            self::USAGE_TYPE_BUSINESS,
            self::USAGE_TYPE_OTHER,
            self::USAGE_TYPE_UNKNOWN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountTypeAllowableValues()
    {
        return [
            self::ACCOUNT_TYPE_CASH_TRADING,
            self::ACCOUNT_TYPE_CASH_INCOME,
            self::ACCOUNT_TYPE_CASH_PAYMENT,
            self::ACCOUNT_TYPE_CHARGE_CARD,
            self::ACCOUNT_TYPE_CHARGES,
            self::ACCOUNT_TYPE_COMMISSION,
            self::ACCOUNT_TYPE_CREDIT_CARD,
            self::ACCOUNT_TYPE_CURRENT,
            self::ACCOUNT_TYPE_E_MONEY,
            self::ACCOUNT_TYPE_LIMITED_LIQUIDITY_SAVINGS_ACCOUNT,
            self::ACCOUNT_TYPE_LOAN,
            self::ACCOUNT_TYPE_MARGINAL_LENDING,
            self::ACCOUNT_TYPE_MONEY_MARKET,
            self::ACCOUNT_TYPE_MORTGAGE,
            self::ACCOUNT_TYPE_NON_RESIDENT_EXTERNAL,
            self::ACCOUNT_TYPE_OTHER,
            self::ACCOUNT_TYPE_OVERDRAFT,
            self::ACCOUNT_TYPE_OVERNIGHT_DEPOSIT,
            self::ACCOUNT_TYPE_PREPAID_CARD,
            self::ACCOUNT_TYPE_SALARY,
            self::ACCOUNT_TYPE_SAVINGS,
            self::ACCOUNT_TYPE_SETTLEMENT,
            self::ACCOUNT_TYPE_TAX,
            self::ACCOUNT_TYPE_UNKNOWN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('usage_type', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], '');
        $this->setIfExists('description', $data ?? [], '');
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], '');
        $this->setIfExists('nickname', $data ?? [], '');
        $this->setIfExists('details', $data ?? [], '');
        $this->setIfExists('account_names', $data ?? [], null);
        $this->setIfExists('account_identifications', $data ?? [], null);
        $this->setIfExists('account_balances', $data ?? [], null);
        $this->setIfExists('consolidated_account_information', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUsageTypeAllowableValues();
        if (!is_null($this->container['usage_type']) && !in_array($this->container['usage_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'usage_type', must be one of '%s'",
                $this->container['usage_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($this->container['account_type']) && !in_array($this->container['account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_type', must be one of '%s'",
                $this->container['account_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets usage_type
     *
     * @return string|null
     */
    public function getUsageType()
    {
        return $this->container['usage_type'];
    }

    /**
     * Sets usage_type
     *
     * @param string|null $usage_type usage_type
     *
     * @return self
     */
    public function setUsageType($usage_type)
    {
        if (is_null($usage_type)) {
            array_push($this->openAPINullablesSetToNull, 'usage_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usage_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getUsageTypeAllowableValues();
        if (!is_null($usage_type) && !in_array($usage_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'usage_type', must be one of '%s'",
                    $usage_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['usage_type'] = $usage_type;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type The type of account e.g. (Credit Card, Savings).
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            array_push($this->openAPINullablesSetToNull, 'account_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($account_type) && !in_array($account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_type', must be one of '%s'",
                    $account_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique identifier of the account.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Specifies the type of account e.g. (BUSINESS_CURRENT).
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Product name as defined by the financial institution for this account.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance Main or headline balance for the account. Use of this field is recommended as fallback only. Instead, use of the typed balances (accountBalances) is recommended.
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency the bank account balance is denoted in. Specified as a 3-letter ISO 4217 currency code.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string|null
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string|null $nickname Nickname of the account that was provided by the account owner. May be used to aid identification of the account.
     *
     * @return self
     */
    public function setNickname($nickname)
    {
        if (is_null($nickname)) {
            array_push($this->openAPINullablesSetToNull, 'nickname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nickname', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets details
     *
     * @return string|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param string|null $details Supplementary specifications that might be provided by the Bank. These provide further characteristics about the account.
     *
     * @return self
     */
    public function setDetails($details)
    {
        if (is_null($details)) {
            array_push($this->openAPINullablesSetToNull, 'details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('details', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets account_names
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAccountName[]|null
     */
    public function getAccountNames()
    {
        return $this->container['account_names'];
    }

    /**
     * Sets account_names
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAccountName[]|null $account_names Optional account names set by the account holder.
     *
     * @return self
     */
    public function setAccountNames($account_names)
    {
        if (is_null($account_names)) {
            array_push($this->openAPINullablesSetToNull, 'account_names');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_names', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['account_names'] = $account_names;

        return $this;
    }

    /**
     * Gets account_identifications
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAccountIdentification[]|null
     */
    public function getAccountIdentifications()
    {
        return $this->container['account_identifications'];
    }

    /**
     * Sets account_identifications
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAccountIdentification[]|null $account_identifications The canoncial identifiers for the account.
     *
     * @return self
     */
    public function setAccountIdentifications($account_identifications)
    {
        if (is_null($account_identifications)) {
            array_push($this->openAPINullablesSetToNull, 'account_identifications');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_identifications', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['account_identifications'] = $account_identifications;

        return $this;
    }

    /**
     * Gets account_balances
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAccountBalance[]|null
     */
    public function getAccountBalances()
    {
        return $this->container['account_balances'];
    }

    /**
     * Sets account_balances
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAccountBalance[]|null $account_balances The various balances for the account.
     *
     * @return self
     */
    public function setAccountBalances($account_balances)
    {
        if (is_null($account_balances)) {
            array_push($this->openAPINullablesSetToNull, 'account_balances');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_balances', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['account_balances'] = $account_balances;

        return $this;
    }

    /**
     * Gets consolidated_account_information
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsolidatedAccountInformation|null
     */
    public function getConsolidatedAccountInformation()
    {
        return $this->container['consolidated_account_information'];
    }

    /**
     * Sets consolidated_account_information
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingConsolidatedAccountInformation|null $consolidated_account_information consolidated_account_information
     *
     * @return self
     */
    public function setConsolidatedAccountInformation($consolidated_account_information)
    {
        if (is_null($consolidated_account_information)) {
            throw new \InvalidArgumentException('non-nullable consolidated_account_information cannot be null');
        }
        $this->container['consolidated_account_information'] = $consolidated_account_information;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


