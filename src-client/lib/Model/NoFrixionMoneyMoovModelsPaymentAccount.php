<?php
/**
 * NoFrixionMoneyMoovModelsPaymentAccount
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionMoneyMoovModelsPaymentAccount Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionMoneyMoovModelsPaymentAccount implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.MoneyMoov.Models.PaymentAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'merchant_id' => 'string',
        'balance' => 'float',
        'submitted_payouts_balance' => 'float',
        'inserted' => '\DateTime',
        'last_updated' => '\DateTime',
        'currency' => 'string',
        'account_name' => 'string',
        'identifier' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsAccountIdentifier',
        'display_name' => 'string',
        'summary' => 'string',
        'is_default' => 'bool',
        'available_balance' => 'float',
        'account_supplier_name' => 'string',
        'is_connected_account' => 'bool',
        'consent_id' => 'string',
        'external_account_icon' => 'string',
        'bank_name' => 'string',
        'expiry_date' => '\DateTime',
        'xero_bank_feed_connection_status' => 'string',
        'xero_bank_feed_sync_status' => 'string',
        'xero_bank_feed_last_synced_at' => '\DateTime',
        'xero_bank_feed_sync_last_failed_at' => '\DateTime',
        'xero_bank_feed_sync_last_failure_reason' => 'string',
        'xero_unsynchronised_transactions_count' => 'int',
        'last_transaction' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsLastTransaction',
        'created_by' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUser',
        'default_payment_rail' => 'string',
        'rules' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsRuleMinimal[]',
        'is_archived' => 'bool',
        'supplier_sepa_instant_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'merchant_id' => 'uuid',
        'balance' => 'double',
        'submitted_payouts_balance' => 'double',
        'inserted' => 'date-time',
        'last_updated' => 'date-time',
        'currency' => null,
        'account_name' => null,
        'identifier' => null,
        'display_name' => null,
        'summary' => null,
        'is_default' => null,
        'available_balance' => 'double',
        'account_supplier_name' => null,
        'is_connected_account' => null,
        'consent_id' => 'uuid',
        'external_account_icon' => null,
        'bank_name' => null,
        'expiry_date' => 'date-time',
        'xero_bank_feed_connection_status' => null,
        'xero_bank_feed_sync_status' => null,
        'xero_bank_feed_last_synced_at' => 'date-time',
        'xero_bank_feed_sync_last_failed_at' => 'date-time',
        'xero_bank_feed_sync_last_failure_reason' => null,
        'xero_unsynchronised_transactions_count' => 'int32',
        'last_transaction' => null,
        'created_by' => null,
        'default_payment_rail' => null,
        'rules' => null,
        'is_archived' => null,
        'supplier_sepa_instant_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'merchant_id' => false,
        'balance' => false,
        'submitted_payouts_balance' => false,
        'inserted' => false,
        'last_updated' => false,
        'currency' => false,
        'account_name' => true,
        'identifier' => false,
        'display_name' => true,
        'summary' => true,
        'is_default' => false,
        'available_balance' => false,
        'account_supplier_name' => false,
        'is_connected_account' => false,
        'consent_id' => true,
        'external_account_icon' => true,
        'bank_name' => true,
        'expiry_date' => true,
        'xero_bank_feed_connection_status' => true,
        'xero_bank_feed_sync_status' => false,
        'xero_bank_feed_last_synced_at' => true,
        'xero_bank_feed_sync_last_failed_at' => true,
        'xero_bank_feed_sync_last_failure_reason' => true,
        'xero_unsynchronised_transactions_count' => true,
        'last_transaction' => false,
        'created_by' => false,
        'default_payment_rail' => false,
        'rules' => true,
        'is_archived' => false,
        'supplier_sepa_instant_status' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'merchant_id' => 'merchantID',
        'balance' => 'balance',
        'submitted_payouts_balance' => 'submittedPayoutsBalance',
        'inserted' => 'inserted',
        'last_updated' => 'lastUpdated',
        'currency' => 'currency',
        'account_name' => 'accountName',
        'identifier' => 'identifier',
        'display_name' => 'displayName',
        'summary' => 'summary',
        'is_default' => 'isDefault',
        'available_balance' => 'availableBalance',
        'account_supplier_name' => 'accountSupplierName',
        'is_connected_account' => 'isConnectedAccount',
        'consent_id' => 'consentID',
        'external_account_icon' => 'externalAccountIcon',
        'bank_name' => 'bankName',
        'expiry_date' => 'expiryDate',
        'xero_bank_feed_connection_status' => 'xeroBankFeedConnectionStatus',
        'xero_bank_feed_sync_status' => 'xeroBankFeedSyncStatus',
        'xero_bank_feed_last_synced_at' => 'xeroBankFeedLastSyncedAt',
        'xero_bank_feed_sync_last_failed_at' => 'xeroBankFeedSyncLastFailedAt',
        'xero_bank_feed_sync_last_failure_reason' => 'xeroBankFeedSyncLastFailureReason',
        'xero_unsynchronised_transactions_count' => 'xeroUnsynchronisedTransactionsCount',
        'last_transaction' => 'lastTransaction',
        'created_by' => 'createdBy',
        'default_payment_rail' => 'defaultPaymentRail',
        'rules' => 'rules',
        'is_archived' => 'isArchived',
        'supplier_sepa_instant_status' => 'supplierSepaInstantStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'merchant_id' => 'setMerchantId',
        'balance' => 'setBalance',
        'submitted_payouts_balance' => 'setSubmittedPayoutsBalance',
        'inserted' => 'setInserted',
        'last_updated' => 'setLastUpdated',
        'currency' => 'setCurrency',
        'account_name' => 'setAccountName',
        'identifier' => 'setIdentifier',
        'display_name' => 'setDisplayName',
        'summary' => 'setSummary',
        'is_default' => 'setIsDefault',
        'available_balance' => 'setAvailableBalance',
        'account_supplier_name' => 'setAccountSupplierName',
        'is_connected_account' => 'setIsConnectedAccount',
        'consent_id' => 'setConsentId',
        'external_account_icon' => 'setExternalAccountIcon',
        'bank_name' => 'setBankName',
        'expiry_date' => 'setExpiryDate',
        'xero_bank_feed_connection_status' => 'setXeroBankFeedConnectionStatus',
        'xero_bank_feed_sync_status' => 'setXeroBankFeedSyncStatus',
        'xero_bank_feed_last_synced_at' => 'setXeroBankFeedLastSyncedAt',
        'xero_bank_feed_sync_last_failed_at' => 'setXeroBankFeedSyncLastFailedAt',
        'xero_bank_feed_sync_last_failure_reason' => 'setXeroBankFeedSyncLastFailureReason',
        'xero_unsynchronised_transactions_count' => 'setXeroUnsynchronisedTransactionsCount',
        'last_transaction' => 'setLastTransaction',
        'created_by' => 'setCreatedBy',
        'default_payment_rail' => 'setDefaultPaymentRail',
        'rules' => 'setRules',
        'is_archived' => 'setIsArchived',
        'supplier_sepa_instant_status' => 'setSupplierSepaInstantStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'merchant_id' => 'getMerchantId',
        'balance' => 'getBalance',
        'submitted_payouts_balance' => 'getSubmittedPayoutsBalance',
        'inserted' => 'getInserted',
        'last_updated' => 'getLastUpdated',
        'currency' => 'getCurrency',
        'account_name' => 'getAccountName',
        'identifier' => 'getIdentifier',
        'display_name' => 'getDisplayName',
        'summary' => 'getSummary',
        'is_default' => 'getIsDefault',
        'available_balance' => 'getAvailableBalance',
        'account_supplier_name' => 'getAccountSupplierName',
        'is_connected_account' => 'getIsConnectedAccount',
        'consent_id' => 'getConsentId',
        'external_account_icon' => 'getExternalAccountIcon',
        'bank_name' => 'getBankName',
        'expiry_date' => 'getExpiryDate',
        'xero_bank_feed_connection_status' => 'getXeroBankFeedConnectionStatus',
        'xero_bank_feed_sync_status' => 'getXeroBankFeedSyncStatus',
        'xero_bank_feed_last_synced_at' => 'getXeroBankFeedLastSyncedAt',
        'xero_bank_feed_sync_last_failed_at' => 'getXeroBankFeedSyncLastFailedAt',
        'xero_bank_feed_sync_last_failure_reason' => 'getXeroBankFeedSyncLastFailureReason',
        'xero_unsynchronised_transactions_count' => 'getXeroUnsynchronisedTransactionsCount',
        'last_transaction' => 'getLastTransaction',
        'created_by' => 'getCreatedBy',
        'default_payment_rail' => 'getDefaultPaymentRail',
        'rules' => 'getRules',
        'is_archived' => 'getIsArchived',
        'supplier_sepa_instant_status' => 'getSupplierSepaInstantStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CURRENCY_NONE = 'NONE';
    public const CURRENCY_GBP = 'GBP';
    public const CURRENCY_EUR = 'EUR';
    public const CURRENCY_BTC = 'BTC';
    public const ACCOUNT_SUPPLIER_NAME_NONE = 'None';
    public const ACCOUNT_SUPPLIER_NAME_CYBER_SOURCE = 'CyberSource';
    public const ACCOUNT_SUPPLIER_NAME_CHECKOUT = 'Checkout';
    public const ACCOUNT_SUPPLIER_NAME_STRIPE = 'Stripe';
    public const ACCOUNT_SUPPLIER_NAME_MODULR = 'Modulr';
    public const ACCOUNT_SUPPLIER_NAME_PLAID = 'Plaid';
    public const ACCOUNT_SUPPLIER_NAME_YAPILY = 'Yapily';
    public const ACCOUNT_SUPPLIER_NAME_NOFRIXION = 'Nofrixion';
    public const ACCOUNT_SUPPLIER_NAME_BITCOIN = 'Bitcoin';
    public const ACCOUNT_SUPPLIER_NAME_BITCOIN_TESTNET = 'BitcoinTestnet';
    public const ACCOUNT_SUPPLIER_NAME_BANKING_CIRCLE = 'BankingCircle';
    public const ACCOUNT_SUPPLIER_NAME_BANKING_CIRCLE_AGENCY = 'BankingCircleAgency';
    public const ACCOUNT_SUPPLIER_NAME_SIMULATOR = 'Simulator';
    public const ACCOUNT_SUPPLIER_NAME_LIGHTNING = 'Lightning';
    public const ACCOUNT_SUPPLIER_NAME_LIGHTNING_TESTNET = 'LightningTestnet';
    public const ACCOUNT_SUPPLIER_NAME_BANKING_CIRCLE_DIRECT_DEBIT = 'BankingCircleDirectDebit';
    public const ACCOUNT_SUPPLIER_NAME_TRIBE = 'Tribe';
    public const XERO_BANK_FEED_CONNECTION_STATUS_NONE = 'None';
    public const XERO_BANK_FEED_CONNECTION_STATUS_PENDING = 'Pending';
    public const XERO_BANK_FEED_CONNECTION_STATUS_ACTIVE = 'Active';
    public const XERO_BANK_FEED_CONNECTION_STATUS_INACTIVE = 'Inactive';
    public const XERO_BANK_FEED_CONNECTION_STATUS_FAILED = 'Failed';
    public const XERO_BANK_FEED_SYNC_STATUS_NONE = 'None';
    public const XERO_BANK_FEED_SYNC_STATUS_IN_PROGRESS = 'InProgress';
    public const XERO_BANK_FEED_SYNC_STATUS_COMPLETED = 'Completed';
    public const XERO_BANK_FEED_SYNC_STATUS_FAILED = 'Failed';
    public const DEFAULT_PAYMENT_RAIL__DEFAULT = 'Default';
    public const DEFAULT_PAYMENT_RAIL_SEPA_CT = 'SEPA_CT';
    public const DEFAULT_PAYMENT_RAIL_SEPA_INST = 'SEPA_INST';
    public const DEFAULT_PAYMENT_RAIL_TARGET2 = 'TARGET2';
    public const SUPPLIER_SEPA_INSTANT_STATUS_NONE = 'None';
    public const SUPPLIER_SEPA_INSTANT_STATUS_IN_PROGRESS = 'InProgress';
    public const SUPPLIER_SEPA_INSTANT_STATUS_ENABLED = 'Enabled';
    public const SUPPLIER_SEPA_INSTANT_STATUS_DISABLED = 'Disabled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_NONE,
            self::CURRENCY_GBP,
            self::CURRENCY_EUR,
            self::CURRENCY_BTC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountSupplierNameAllowableValues()
    {
        return [
            self::ACCOUNT_SUPPLIER_NAME_NONE,
            self::ACCOUNT_SUPPLIER_NAME_CYBER_SOURCE,
            self::ACCOUNT_SUPPLIER_NAME_CHECKOUT,
            self::ACCOUNT_SUPPLIER_NAME_STRIPE,
            self::ACCOUNT_SUPPLIER_NAME_MODULR,
            self::ACCOUNT_SUPPLIER_NAME_PLAID,
            self::ACCOUNT_SUPPLIER_NAME_YAPILY,
            self::ACCOUNT_SUPPLIER_NAME_NOFRIXION,
            self::ACCOUNT_SUPPLIER_NAME_BITCOIN,
            self::ACCOUNT_SUPPLIER_NAME_BITCOIN_TESTNET,
            self::ACCOUNT_SUPPLIER_NAME_BANKING_CIRCLE,
            self::ACCOUNT_SUPPLIER_NAME_BANKING_CIRCLE_AGENCY,
            self::ACCOUNT_SUPPLIER_NAME_SIMULATOR,
            self::ACCOUNT_SUPPLIER_NAME_LIGHTNING,
            self::ACCOUNT_SUPPLIER_NAME_LIGHTNING_TESTNET,
            self::ACCOUNT_SUPPLIER_NAME_BANKING_CIRCLE_DIRECT_DEBIT,
            self::ACCOUNT_SUPPLIER_NAME_TRIBE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getXeroBankFeedConnectionStatusAllowableValues()
    {
        return [
            self::XERO_BANK_FEED_CONNECTION_STATUS_NONE,
            self::XERO_BANK_FEED_CONNECTION_STATUS_PENDING,
            self::XERO_BANK_FEED_CONNECTION_STATUS_ACTIVE,
            self::XERO_BANK_FEED_CONNECTION_STATUS_INACTIVE,
            self::XERO_BANK_FEED_CONNECTION_STATUS_FAILED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getXeroBankFeedSyncStatusAllowableValues()
    {
        return [
            self::XERO_BANK_FEED_SYNC_STATUS_NONE,
            self::XERO_BANK_FEED_SYNC_STATUS_IN_PROGRESS,
            self::XERO_BANK_FEED_SYNC_STATUS_COMPLETED,
            self::XERO_BANK_FEED_SYNC_STATUS_FAILED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultPaymentRailAllowableValues()
    {
        return [
            self::DEFAULT_PAYMENT_RAIL__DEFAULT,
            self::DEFAULT_PAYMENT_RAIL_SEPA_CT,
            self::DEFAULT_PAYMENT_RAIL_SEPA_INST,
            self::DEFAULT_PAYMENT_RAIL_TARGET2,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupplierSepaInstantStatusAllowableValues()
    {
        return [
            self::SUPPLIER_SEPA_INSTANT_STATUS_NONE,
            self::SUPPLIER_SEPA_INSTANT_STATUS_IN_PROGRESS,
            self::SUPPLIER_SEPA_INSTANT_STATUS_ENABLED,
            self::SUPPLIER_SEPA_INSTANT_STATUS_DISABLED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('submitted_payouts_balance', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('account_name', $data ?? [], null);
        $this->setIfExists('identifier', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('summary', $data ?? [], null);
        $this->setIfExists('is_default', $data ?? [], null);
        $this->setIfExists('available_balance', $data ?? [], null);
        $this->setIfExists('account_supplier_name', $data ?? [], null);
        $this->setIfExists('is_connected_account', $data ?? [], null);
        $this->setIfExists('consent_id', $data ?? [], null);
        $this->setIfExists('external_account_icon', $data ?? [], null);
        $this->setIfExists('bank_name', $data ?? [], null);
        $this->setIfExists('expiry_date', $data ?? [], null);
        $this->setIfExists('xero_bank_feed_connection_status', $data ?? [], null);
        $this->setIfExists('xero_bank_feed_sync_status', $data ?? [], null);
        $this->setIfExists('xero_bank_feed_last_synced_at', $data ?? [], null);
        $this->setIfExists('xero_bank_feed_sync_last_failed_at', $data ?? [], null);
        $this->setIfExists('xero_bank_feed_sync_last_failure_reason', $data ?? [], null);
        $this->setIfExists('xero_unsynchronised_transactions_count', $data ?? [], null);
        $this->setIfExists('last_transaction', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('default_payment_rail', $data ?? [], null);
        $this->setIfExists('rules', $data ?? [], null);
        $this->setIfExists('is_archived', $data ?? [], null);
        $this->setIfExists('supplier_sepa_instant_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccountSupplierNameAllowableValues();
        if (!is_null($this->container['account_supplier_name']) && !in_array($this->container['account_supplier_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_supplier_name', must be one of '%s'",
                $this->container['account_supplier_name'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getXeroBankFeedConnectionStatusAllowableValues();
        if (!is_null($this->container['xero_bank_feed_connection_status']) && !in_array($this->container['xero_bank_feed_connection_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'xero_bank_feed_connection_status', must be one of '%s'",
                $this->container['xero_bank_feed_connection_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getXeroBankFeedSyncStatusAllowableValues();
        if (!is_null($this->container['xero_bank_feed_sync_status']) && !in_array($this->container['xero_bank_feed_sync_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'xero_bank_feed_sync_status', must be one of '%s'",
                $this->container['xero_bank_feed_sync_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDefaultPaymentRailAllowableValues();
        if (!is_null($this->container['default_payment_rail']) && !in_array($this->container['default_payment_rail'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_payment_rail', must be one of '%s'",
                $this->container['default_payment_rail'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSupplierSepaInstantStatusAllowableValues();
        if (!is_null($this->container['supplier_sepa_instant_status']) && !in_array($this->container['supplier_sepa_instant_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'supplier_sepa_instant_status', must be one of '%s'",
                $this->container['supplier_sepa_instant_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique id for the account.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id The ID of the merchant that owns the account.
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance Balance of the account.
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets submitted_payouts_balance
     *
     * @return float|null
     */
    public function getSubmittedPayoutsBalance()
    {
        return $this->container['submitted_payouts_balance'];
    }

    /**
     * Sets submitted_payouts_balance
     *
     * @param float|null $submitted_payouts_balance Total of the payouts that have been submitted for processing.
     *
     * @return self
     */
    public function setSubmittedPayoutsBalance($submitted_payouts_balance)
    {
        if (is_null($submitted_payouts_balance)) {
            throw new \InvalidArgumentException('non-nullable submitted_payouts_balance cannot be null');
        }
        $this->container['submitted_payouts_balance'] = $submitted_payouts_balance;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted Timestamp when the account was created.
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated Timestamp when the account was last updated.
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency of the account in ISO 4217 format
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string|null $account_name Name for the account
     *
     * @return self
     */
    public function setAccountName($account_name)
    {
        if (is_null($account_name)) {
            array_push($this->openAPINullablesSetToNull, 'account_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsAccountIdentifier|null
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsAccountIdentifier|null $identifier identifier
     *
     * @return self
     */
    public function setIdentifier($identifier)
    {
        if (is_null($identifier)) {
            throw new \InvalidArgumentException('non-nullable identifier cannot be null');
        }
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name Gets a unique display name for the payment account. Useful for when payment accounts need to   be listed.
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            array_push($this->openAPINullablesSetToNull, 'display_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('display_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string|null $summary Gets a summary of the payments account's most important properties.
     *
     * @return self
     */
    public function setSummary($summary)
    {
        if (is_null($summary)) {
            array_push($this->openAPINullablesSetToNull, 'summary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('summary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool|null
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool|null $is_default Is the default account
     *
     * @return self
     */
    public function setIsDefault($is_default)
    {
        if (is_null($is_default)) {
            throw new \InvalidArgumentException('non-nullable is_default cannot be null');
        }
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets available_balance
     *
     * @return float|null
     */
    public function getAvailableBalance()
    {
        return $this->container['available_balance'];
    }

    /**
     * Sets available_balance
     *
     * @param float|null $available_balance The current available balance of the account. Calculated by subtracting any submitted payments from the current balance.
     *
     * @return self
     */
    public function setAvailableBalance($available_balance)
    {
        if (is_null($available_balance)) {
            throw new \InvalidArgumentException('non-nullable available_balance cannot be null');
        }
        $this->container['available_balance'] = $available_balance;

        return $this;
    }

    /**
     * Gets account_supplier_name
     *
     * @return string|null
     */
    public function getAccountSupplierName()
    {
        return $this->container['account_supplier_name'];
    }

    /**
     * Sets account_supplier_name
     *
     * @param string|null $account_supplier_name The payment account supplier name. A payment account can be supplied by multiple payment processors.
     *
     * @return self
     */
    public function setAccountSupplierName($account_supplier_name)
    {
        if (is_null($account_supplier_name)) {
            throw new \InvalidArgumentException('non-nullable account_supplier_name cannot be null');
        }
        $allowedValues = $this->getAccountSupplierNameAllowableValues();
        if (!in_array($account_supplier_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_supplier_name', must be one of '%s'",
                    $account_supplier_name,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_supplier_name'] = $account_supplier_name;

        return $this;
    }

    /**
     * Gets is_connected_account
     *
     * @return bool|null
     */
    public function getIsConnectedAccount()
    {
        return $this->container['is_connected_account'];
    }

    /**
     * Sets is_connected_account
     *
     * @param bool|null $is_connected_account Indicates if the payment account is an externally connected account.  Externally connected account can be used to view account balances and transactions.
     *
     * @return self
     */
    public function setIsConnectedAccount($is_connected_account)
    {
        if (is_null($is_connected_account)) {
            throw new \InvalidArgumentException('non-nullable is_connected_account cannot be null');
        }
        $this->container['is_connected_account'] = $is_connected_account;

        return $this;
    }

    /**
     * Gets consent_id
     *
     * @return string|null
     */
    public function getConsentId()
    {
        return $this->container['consent_id'];
    }

    /**
     * Sets consent_id
     *
     * @param string|null $consent_id The ID of the consent used to connect the external account.
     *
     * @return self
     */
    public function setConsentId($consent_id)
    {
        if (is_null($consent_id)) {
            array_push($this->openAPINullablesSetToNull, 'consent_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('consent_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['consent_id'] = $consent_id;

        return $this;
    }

    /**
     * Gets external_account_icon
     *
     * @return string|null
     */
    public function getExternalAccountIcon()
    {
        return $this->container['external_account_icon'];
    }

    /**
     * Sets external_account_icon
     *
     * @param string|null $external_account_icon The Icon for external accounts
     *
     * @return self
     */
    public function setExternalAccountIcon($external_account_icon)
    {
        if (is_null($external_account_icon)) {
            array_push($this->openAPINullablesSetToNull, 'external_account_icon');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_account_icon', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_account_icon'] = $external_account_icon;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string|null
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string|null $bank_name The bank name for external accounts
     *
     * @return self
     */
    public function setBankName($bank_name)
    {
        if (is_null($bank_name)) {
            array_push($this->openAPINullablesSetToNull, 'bank_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bank_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return \DateTime|null
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param \DateTime|null $expiry_date The date that the external account will expire
     *
     * @return self
     */
    public function setExpiryDate($expiry_date)
    {
        if (is_null($expiry_date)) {
            array_push($this->openAPINullablesSetToNull, 'expiry_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expiry_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets xero_bank_feed_connection_status
     *
     * @return string|null
     */
    public function getXeroBankFeedConnectionStatus()
    {
        return $this->container['xero_bank_feed_connection_status'];
    }

    /**
     * Sets xero_bank_feed_connection_status
     *
     * @param string|null $xero_bank_feed_connection_status States the status of the Xero bank feed connection, if applicable.
     *
     * @return self
     */
    public function setXeroBankFeedConnectionStatus($xero_bank_feed_connection_status)
    {
        if (is_null($xero_bank_feed_connection_status)) {
            array_push($this->openAPINullablesSetToNull, 'xero_bank_feed_connection_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('xero_bank_feed_connection_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getXeroBankFeedConnectionStatusAllowableValues();
        if (!is_null($xero_bank_feed_connection_status) && !in_array($xero_bank_feed_connection_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'xero_bank_feed_connection_status', must be one of '%s'",
                    $xero_bank_feed_connection_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['xero_bank_feed_connection_status'] = $xero_bank_feed_connection_status;

        return $this;
    }

    /**
     * Gets xero_bank_feed_sync_status
     *
     * @return string|null
     */
    public function getXeroBankFeedSyncStatus()
    {
        return $this->container['xero_bank_feed_sync_status'];
    }

    /**
     * Sets xero_bank_feed_sync_status
     *
     * @param string|null $xero_bank_feed_sync_status xero_bank_feed_sync_status
     *
     * @return self
     */
    public function setXeroBankFeedSyncStatus($xero_bank_feed_sync_status)
    {
        if (is_null($xero_bank_feed_sync_status)) {
            throw new \InvalidArgumentException('non-nullable xero_bank_feed_sync_status cannot be null');
        }
        $allowedValues = $this->getXeroBankFeedSyncStatusAllowableValues();
        if (!in_array($xero_bank_feed_sync_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'xero_bank_feed_sync_status', must be one of '%s'",
                    $xero_bank_feed_sync_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['xero_bank_feed_sync_status'] = $xero_bank_feed_sync_status;

        return $this;
    }

    /**
     * Gets xero_bank_feed_last_synced_at
     *
     * @return \DateTime|null
     */
    public function getXeroBankFeedLastSyncedAt()
    {
        return $this->container['xero_bank_feed_last_synced_at'];
    }

    /**
     * Sets xero_bank_feed_last_synced_at
     *
     * @param \DateTime|null $xero_bank_feed_last_synced_at xero_bank_feed_last_synced_at
     *
     * @return self
     */
    public function setXeroBankFeedLastSyncedAt($xero_bank_feed_last_synced_at)
    {
        if (is_null($xero_bank_feed_last_synced_at)) {
            array_push($this->openAPINullablesSetToNull, 'xero_bank_feed_last_synced_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('xero_bank_feed_last_synced_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['xero_bank_feed_last_synced_at'] = $xero_bank_feed_last_synced_at;

        return $this;
    }

    /**
     * Gets xero_bank_feed_sync_last_failed_at
     *
     * @return \DateTime|null
     */
    public function getXeroBankFeedSyncLastFailedAt()
    {
        return $this->container['xero_bank_feed_sync_last_failed_at'];
    }

    /**
     * Sets xero_bank_feed_sync_last_failed_at
     *
     * @param \DateTime|null $xero_bank_feed_sync_last_failed_at xero_bank_feed_sync_last_failed_at
     *
     * @return self
     */
    public function setXeroBankFeedSyncLastFailedAt($xero_bank_feed_sync_last_failed_at)
    {
        if (is_null($xero_bank_feed_sync_last_failed_at)) {
            array_push($this->openAPINullablesSetToNull, 'xero_bank_feed_sync_last_failed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('xero_bank_feed_sync_last_failed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['xero_bank_feed_sync_last_failed_at'] = $xero_bank_feed_sync_last_failed_at;

        return $this;
    }

    /**
     * Gets xero_bank_feed_sync_last_failure_reason
     *
     * @return string|null
     */
    public function getXeroBankFeedSyncLastFailureReason()
    {
        return $this->container['xero_bank_feed_sync_last_failure_reason'];
    }

    /**
     * Sets xero_bank_feed_sync_last_failure_reason
     *
     * @param string|null $xero_bank_feed_sync_last_failure_reason xero_bank_feed_sync_last_failure_reason
     *
     * @return self
     */
    public function setXeroBankFeedSyncLastFailureReason($xero_bank_feed_sync_last_failure_reason)
    {
        if (is_null($xero_bank_feed_sync_last_failure_reason)) {
            array_push($this->openAPINullablesSetToNull, 'xero_bank_feed_sync_last_failure_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('xero_bank_feed_sync_last_failure_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['xero_bank_feed_sync_last_failure_reason'] = $xero_bank_feed_sync_last_failure_reason;

        return $this;
    }

    /**
     * Gets xero_unsynchronised_transactions_count
     *
     * @return int|null
     */
    public function getXeroUnsynchronisedTransactionsCount()
    {
        return $this->container['xero_unsynchronised_transactions_count'];
    }

    /**
     * Sets xero_unsynchronised_transactions_count
     *
     * @param int|null $xero_unsynchronised_transactions_count Indicates the number of unsynchronised transactions with Xero
     *
     * @return self
     */
    public function setXeroUnsynchronisedTransactionsCount($xero_unsynchronised_transactions_count)
    {
        if (is_null($xero_unsynchronised_transactions_count)) {
            array_push($this->openAPINullablesSetToNull, 'xero_unsynchronised_transactions_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('xero_unsynchronised_transactions_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['xero_unsynchronised_transactions_count'] = $xero_unsynchronised_transactions_count;

        return $this;
    }

    /**
     * Gets last_transaction
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsLastTransaction|null
     */
    public function getLastTransaction()
    {
        return $this->container['last_transaction'];
    }

    /**
     * Sets last_transaction
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsLastTransaction|null $last_transaction last_transaction
     *
     * @return self
     */
    public function setLastTransaction($last_transaction)
    {
        if (is_null($last_transaction)) {
            throw new \InvalidArgumentException('non-nullable last_transaction cannot be null');
        }
        $this->container['last_transaction'] = $last_transaction;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUser|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsUser|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets default_payment_rail
     *
     * @return string|null
     */
    public function getDefaultPaymentRail()
    {
        return $this->container['default_payment_rail'];
    }

    /**
     * Sets default_payment_rail
     *
     * @param string|null $default_payment_rail Indicates the default payment rail for this account. Normally it will be left as the  default value but in some special cases it may be set to indicate payouts from this account  should be attempted with a specific payment rail.
     *
     * @return self
     */
    public function setDefaultPaymentRail($default_payment_rail)
    {
        if (is_null($default_payment_rail)) {
            throw new \InvalidArgumentException('non-nullable default_payment_rail cannot be null');
        }
        $allowedValues = $this->getDefaultPaymentRailAllowableValues();
        if (!in_array($default_payment_rail, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_payment_rail', must be one of '%s'",
                    $default_payment_rail,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_payment_rail'] = $default_payment_rail;

        return $this;
    }

    /**
     * Gets rules
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsRuleMinimal[]|null
     */
    public function getRules()
    {
        return $this->container['rules'];
    }

    /**
     * Sets rules
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsRuleMinimal[]|null $rules The list of rules associated with this account.
     *
     * @return self
     */
    public function setRules($rules)
    {
        if (is_null($rules)) {
            array_push($this->openAPINullablesSetToNull, 'rules');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rules', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rules'] = $rules;

        return $this;
    }

    /**
     * Gets is_archived
     *
     * @return bool|null
     */
    public function getIsArchived()
    {
        return $this->container['is_archived'];
    }

    /**
     * Sets is_archived
     *
     * @param bool|null $is_archived Indicates whether the account is archived. Archived accounts are not displayed in the UI.  If an account receives a payment it will be automatically unarchived.
     *
     * @return self
     */
    public function setIsArchived($is_archived)
    {
        if (is_null($is_archived)) {
            throw new \InvalidArgumentException('non-nullable is_archived cannot be null');
        }
        $this->container['is_archived'] = $is_archived;

        return $this;
    }

    /**
     * Gets supplier_sepa_instant_status
     *
     * @return string|null
     */
    public function getSupplierSepaInstantStatus()
    {
        return $this->container['supplier_sepa_instant_status'];
    }

    /**
     * Sets supplier_sepa_instant_status
     *
     * @param string|null $supplier_sepa_instant_status Indicates the status of the SEPA Instant payment rail for this account.
     *
     * @return self
     */
    public function setSupplierSepaInstantStatus($supplier_sepa_instant_status)
    {
        if (is_null($supplier_sepa_instant_status)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_sepa_instant_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_sepa_instant_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getSupplierSepaInstantStatusAllowableValues();
        if (!is_null($supplier_sepa_instant_status) && !in_array($supplier_sepa_instant_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'supplier_sepa_instant_status', must be one of '%s'",
                    $supplier_sepa_instant_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['supplier_sepa_instant_status'] = $supplier_sepa_instant_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


