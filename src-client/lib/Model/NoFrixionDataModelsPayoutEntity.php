<?php
/**
 * NoFrixionDataModelsPayoutEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionDataModelsPayoutEntity Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionDataModelsPayoutEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.DataModels.PayoutEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'account_id' => 'string',
        'user_id' => 'string',
        'approver_id' => 'string',
        'payrun_id' => 'string',
        'topup_payrun_id' => 'string',
        'type' => 'string',
        'description' => 'string',
        'currency' => 'string',
        'amount' => 'float',
        'your_reference' => 'string',
        'destination_account_id' => 'string',
        'destination_iban' => 'string',
        'destination_account_number' => 'string',
        'destination_sort_code' => 'string',
        'destination_bitcoin_address' => 'string',
        'destination_account_name' => 'string',
        'their_reference' => 'string',
        'status' => 'string',
        'batch_payout_id' => 'string',
        'payment_id' => 'string',
        'transaction_id' => 'string',
        'merchant_token_description' => 'string',
        'inserted' => '\DateTime',
        'last_updated' => '\DateTime',
        'invoice_id' => 'string',
        'is_submitted' => 'bool',
        'is_settled' => 'bool',
        'is_failed' => 'bool',
        'timestamp' => 'string',
        'payment_rail' => 'string',
        'account' => '\Nofrixion\Client\Model\NoFrixionDataModelsAccountEntity',
        'destination_internal_account' => '\Nofrixion\Client\Model\NoFrixionDataModelsAccountEntity',
        'user' => '\Nofrixion\Client\Model\NoFrixionDataModelsUserEntity',
        'approver' => '\Nofrixion\Client\Model\NoFrixionDataModelsUserEntity',
        'beneficiary' => '\Nofrixion\Client\Model\NoFrixionDataModelsBeneficiaryEntity',
        'transactions' => '\Nofrixion\Client\Model\NoFrixionDataModelsTransactionEntity[]',
        'payout_tags' => '\Nofrixion\Client\Model\NoFrixionDataModelsPayoutTagEntity[]',
        'payout_events' => '\Nofrixion\Client\Model\NoFrixionDataModelsPayoutEventEntity[]',
        'payrun' => '\Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunEntity',
        'topup_payrun' => '\Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunEntity',
        'scheduled' => 'bool',
        'schedule_date' => '\DateTime',
        'bitcoin_subtract_fee_from_amount' => 'bool',
        'bitcoin_fee_sats_per_vbyte' => 'int',
        'beneficiary_id' => 'string',
        'can_process' => 'bool',
        'invoice_payments' => '\Nofrixion\Client\Model\NoFrixionDataAccessDataModelsInvoicePaymentEntity[]',
        'rule' => '\Nofrixion\Client\Model\NoFrixionDataModelsRuleEntity',
        'current_state' => 'string',
        'correlation_id' => 'string',
        'scheduled_id' => 'string',
        'rule_id' => 'string',
        'supplier_name' => 'string',
        'transaction_type' => 'string',
        'last_updated_by' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'account_id' => 'uuid',
        'user_id' => 'uuid',
        'approver_id' => 'uuid',
        'payrun_id' => 'uuid',
        'topup_payrun_id' => 'uuid',
        'type' => null,
        'description' => null,
        'currency' => null,
        'amount' => 'double',
        'your_reference' => null,
        'destination_account_id' => 'uuid',
        'destination_iban' => null,
        'destination_account_number' => null,
        'destination_sort_code' => null,
        'destination_bitcoin_address' => null,
        'destination_account_name' => null,
        'their_reference' => null,
        'status' => null,
        'batch_payout_id' => 'uuid',
        'payment_id' => null,
        'transaction_id' => null,
        'merchant_token_description' => null,
        'inserted' => 'date-time',
        'last_updated' => 'date-time',
        'invoice_id' => null,
        'is_submitted' => null,
        'is_settled' => null,
        'is_failed' => null,
        'timestamp' => 'byte',
        'payment_rail' => null,
        'account' => null,
        'destination_internal_account' => null,
        'user' => null,
        'approver' => null,
        'beneficiary' => null,
        'transactions' => null,
        'payout_tags' => null,
        'payout_events' => null,
        'payrun' => null,
        'topup_payrun' => null,
        'scheduled' => null,
        'schedule_date' => 'date-time',
        'bitcoin_subtract_fee_from_amount' => null,
        'bitcoin_fee_sats_per_vbyte' => 'int32',
        'beneficiary_id' => 'uuid',
        'can_process' => null,
        'invoice_payments' => null,
        'rule' => null,
        'current_state' => null,
        'correlation_id' => 'uuid',
        'scheduled_id' => 'uuid',
        'rule_id' => 'uuid',
        'supplier_name' => null,
        'transaction_type' => null,
        'last_updated_by' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'account_id' => false,
        'user_id' => true,
        'approver_id' => true,
        'payrun_id' => true,
        'topup_payrun_id' => true,
        'type' => false,
        'description' => true,
        'currency' => false,
        'amount' => false,
        'your_reference' => true,
        'destination_account_id' => true,
        'destination_iban' => true,
        'destination_account_number' => true,
        'destination_sort_code' => true,
        'destination_bitcoin_address' => true,
        'destination_account_name' => true,
        'their_reference' => true,
        'status' => false,
        'batch_payout_id' => true,
        'payment_id' => true,
        'transaction_id' => true,
        'merchant_token_description' => true,
        'inserted' => false,
        'last_updated' => false,
        'invoice_id' => true,
        'is_submitted' => false,
        'is_settled' => false,
        'is_failed' => false,
        'timestamp' => true,
        'payment_rail' => false,
        'account' => false,
        'destination_internal_account' => false,
        'user' => false,
        'approver' => false,
        'beneficiary' => false,
        'transactions' => true,
        'payout_tags' => true,
        'payout_events' => true,
        'payrun' => false,
        'topup_payrun' => false,
        'scheduled' => false,
        'schedule_date' => true,
        'bitcoin_subtract_fee_from_amount' => false,
        'bitcoin_fee_sats_per_vbyte' => false,
        'beneficiary_id' => true,
        'can_process' => false,
        'invoice_payments' => true,
        'rule' => false,
        'current_state' => true,
        'correlation_id' => false,
        'scheduled_id' => true,
        'rule_id' => true,
        'supplier_name' => false,
        'transaction_type' => true,
        'last_updated_by' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'account_id' => 'accountID',
        'user_id' => 'userID',
        'approver_id' => 'approverID',
        'payrun_id' => 'payrunID',
        'topup_payrun_id' => 'topupPayrunID',
        'type' => 'type',
        'description' => 'description',
        'currency' => 'currency',
        'amount' => 'amount',
        'your_reference' => 'yourReference',
        'destination_account_id' => 'destinationAccountID',
        'destination_iban' => 'destinationIBAN',
        'destination_account_number' => 'destinationAccountNumber',
        'destination_sort_code' => 'destinationSortCode',
        'destination_bitcoin_address' => 'destinationBitcoinAddress',
        'destination_account_name' => 'destinationAccountName',
        'their_reference' => 'theirReference',
        'status' => 'status',
        'batch_payout_id' => 'batchPayoutID',
        'payment_id' => 'paymentID',
        'transaction_id' => 'transactionID',
        'merchant_token_description' => 'merchantTokenDescription',
        'inserted' => 'inserted',
        'last_updated' => 'lastUpdated',
        'invoice_id' => 'invoiceID',
        'is_submitted' => 'isSubmitted',
        'is_settled' => 'isSettled',
        'is_failed' => 'isFailed',
        'timestamp' => 'timestamp',
        'payment_rail' => 'paymentRail',
        'account' => 'account',
        'destination_internal_account' => 'destinationInternalAccount',
        'user' => 'user',
        'approver' => 'approver',
        'beneficiary' => 'beneficiary',
        'transactions' => 'transactions',
        'payout_tags' => 'payoutTags',
        'payout_events' => 'payoutEvents',
        'payrun' => 'payrun',
        'topup_payrun' => 'topupPayrun',
        'scheduled' => 'scheduled',
        'schedule_date' => 'scheduleDate',
        'bitcoin_subtract_fee_from_amount' => 'bitcoinSubtractFeeFromAmount',
        'bitcoin_fee_sats_per_vbyte' => 'bitcoinFeeSatsPerVbyte',
        'beneficiary_id' => 'beneficiaryID',
        'can_process' => 'canProcess',
        'invoice_payments' => 'invoicePayments',
        'rule' => 'rule',
        'current_state' => 'currentState',
        'correlation_id' => 'correlationId',
        'scheduled_id' => 'scheduledId',
        'rule_id' => 'ruleID',
        'supplier_name' => 'supplierName',
        'transaction_type' => 'transactionType',
        'last_updated_by' => 'lastUpdatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'account_id' => 'setAccountId',
        'user_id' => 'setUserId',
        'approver_id' => 'setApproverId',
        'payrun_id' => 'setPayrunId',
        'topup_payrun_id' => 'setTopupPayrunId',
        'type' => 'setType',
        'description' => 'setDescription',
        'currency' => 'setCurrency',
        'amount' => 'setAmount',
        'your_reference' => 'setYourReference',
        'destination_account_id' => 'setDestinationAccountId',
        'destination_iban' => 'setDestinationIban',
        'destination_account_number' => 'setDestinationAccountNumber',
        'destination_sort_code' => 'setDestinationSortCode',
        'destination_bitcoin_address' => 'setDestinationBitcoinAddress',
        'destination_account_name' => 'setDestinationAccountName',
        'their_reference' => 'setTheirReference',
        'status' => 'setStatus',
        'batch_payout_id' => 'setBatchPayoutId',
        'payment_id' => 'setPaymentId',
        'transaction_id' => 'setTransactionId',
        'merchant_token_description' => 'setMerchantTokenDescription',
        'inserted' => 'setInserted',
        'last_updated' => 'setLastUpdated',
        'invoice_id' => 'setInvoiceId',
        'is_submitted' => 'setIsSubmitted',
        'is_settled' => 'setIsSettled',
        'is_failed' => 'setIsFailed',
        'timestamp' => 'setTimestamp',
        'payment_rail' => 'setPaymentRail',
        'account' => 'setAccount',
        'destination_internal_account' => 'setDestinationInternalAccount',
        'user' => 'setUser',
        'approver' => 'setApprover',
        'beneficiary' => 'setBeneficiary',
        'transactions' => 'setTransactions',
        'payout_tags' => 'setPayoutTags',
        'payout_events' => 'setPayoutEvents',
        'payrun' => 'setPayrun',
        'topup_payrun' => 'setTopupPayrun',
        'scheduled' => 'setScheduled',
        'schedule_date' => 'setScheduleDate',
        'bitcoin_subtract_fee_from_amount' => 'setBitcoinSubtractFeeFromAmount',
        'bitcoin_fee_sats_per_vbyte' => 'setBitcoinFeeSatsPerVbyte',
        'beneficiary_id' => 'setBeneficiaryId',
        'can_process' => 'setCanProcess',
        'invoice_payments' => 'setInvoicePayments',
        'rule' => 'setRule',
        'current_state' => 'setCurrentState',
        'correlation_id' => 'setCorrelationId',
        'scheduled_id' => 'setScheduledId',
        'rule_id' => 'setRuleId',
        'supplier_name' => 'setSupplierName',
        'transaction_type' => 'setTransactionType',
        'last_updated_by' => 'setLastUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'account_id' => 'getAccountId',
        'user_id' => 'getUserId',
        'approver_id' => 'getApproverId',
        'payrun_id' => 'getPayrunId',
        'topup_payrun_id' => 'getTopupPayrunId',
        'type' => 'getType',
        'description' => 'getDescription',
        'currency' => 'getCurrency',
        'amount' => 'getAmount',
        'your_reference' => 'getYourReference',
        'destination_account_id' => 'getDestinationAccountId',
        'destination_iban' => 'getDestinationIban',
        'destination_account_number' => 'getDestinationAccountNumber',
        'destination_sort_code' => 'getDestinationSortCode',
        'destination_bitcoin_address' => 'getDestinationBitcoinAddress',
        'destination_account_name' => 'getDestinationAccountName',
        'their_reference' => 'getTheirReference',
        'status' => 'getStatus',
        'batch_payout_id' => 'getBatchPayoutId',
        'payment_id' => 'getPaymentId',
        'transaction_id' => 'getTransactionId',
        'merchant_token_description' => 'getMerchantTokenDescription',
        'inserted' => 'getInserted',
        'last_updated' => 'getLastUpdated',
        'invoice_id' => 'getInvoiceId',
        'is_submitted' => 'getIsSubmitted',
        'is_settled' => 'getIsSettled',
        'is_failed' => 'getIsFailed',
        'timestamp' => 'getTimestamp',
        'payment_rail' => 'getPaymentRail',
        'account' => 'getAccount',
        'destination_internal_account' => 'getDestinationInternalAccount',
        'user' => 'getUser',
        'approver' => 'getApprover',
        'beneficiary' => 'getBeneficiary',
        'transactions' => 'getTransactions',
        'payout_tags' => 'getPayoutTags',
        'payout_events' => 'getPayoutEvents',
        'payrun' => 'getPayrun',
        'topup_payrun' => 'getTopupPayrun',
        'scheduled' => 'getScheduled',
        'schedule_date' => 'getScheduleDate',
        'bitcoin_subtract_fee_from_amount' => 'getBitcoinSubtractFeeFromAmount',
        'bitcoin_fee_sats_per_vbyte' => 'getBitcoinFeeSatsPerVbyte',
        'beneficiary_id' => 'getBeneficiaryId',
        'can_process' => 'getCanProcess',
        'invoice_payments' => 'getInvoicePayments',
        'rule' => 'getRule',
        'current_state' => 'getCurrentState',
        'correlation_id' => 'getCorrelationId',
        'scheduled_id' => 'getScheduledId',
        'rule_id' => 'getRuleId',
        'supplier_name' => 'getSupplierName',
        'transaction_type' => 'getTransactionType',
        'last_updated_by' => 'getLastUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_UNKNOWN = 'Unknown';
    public const TYPE_SCAN = 'SCAN';
    public const TYPE_IBAN = 'IBAN';
    public const TYPE_DD = 'DD';
    public const TYPE_BTC = 'BTC';
    public const CURRENCY_NONE = 'NONE';
    public const CURRENCY_GBP = 'GBP';
    public const CURRENCY_EUR = 'EUR';
    public const CURRENCY_BTC = 'BTC';
    public const STATUS_UNKNOWN = 'UNKNOWN';
    public const STATUS_REJECTED = 'REJECTED';
    public const STATUS_PENDING = 'PENDING';
    public const STATUS_PROCESSED = 'PROCESSED';
    public const STATUS_PENDING_APPROVAL = 'PENDING_APPROVAL';
    public const STATUS_QUEUED_UPSTREAM = 'QUEUED_UPSTREAM';
    public const STATUS_QUEUED = 'QUEUED';
    public const STATUS_FAILED = 'FAILED';
    public const STATUS_PENDING_INPUT = 'PENDING_INPUT';
    public const STATUS_SCHEDULED = 'SCHEDULED';
    public const STATUS_REJECTED_APPROVAL = 'REJECTED_APPROVAL';
    public const PAYMENT_RAIL__DEFAULT = 'Default';
    public const PAYMENT_RAIL_SEPA_CT = 'SEPA_CT';
    public const PAYMENT_RAIL_SEPA_INST = 'SEPA_INST';
    public const PAYMENT_RAIL_TARGET2 = 'TARGET2';
    public const SUPPLIER_NAME_NONE = 'None';
    public const SUPPLIER_NAME_CYBER_SOURCE = 'CyberSource';
    public const SUPPLIER_NAME_CHECKOUT = 'Checkout';
    public const SUPPLIER_NAME_STRIPE = 'Stripe';
    public const SUPPLIER_NAME_MODULR = 'Modulr';
    public const SUPPLIER_NAME_PLAID = 'Plaid';
    public const SUPPLIER_NAME_YAPILY = 'Yapily';
    public const SUPPLIER_NAME_NOFRIXION = 'Nofrixion';
    public const SUPPLIER_NAME_BITCOIN = 'Bitcoin';
    public const SUPPLIER_NAME_BITCOIN_TESTNET = 'BitcoinTestnet';
    public const SUPPLIER_NAME_BANKING_CIRCLE = 'BankingCircle';
    public const SUPPLIER_NAME_BANKING_CIRCLE_AGENCY = 'BankingCircleAgency';
    public const SUPPLIER_NAME_SIMULATOR = 'Simulator';
    public const SUPPLIER_NAME_LIGHTNING = 'Lightning';
    public const SUPPLIER_NAME_LIGHTNING_TESTNET = 'LightningTestnet';
    public const SUPPLIER_NAME_BANKING_CIRCLE_DIRECT_DEBIT = 'BankingCircleDirectDebit';
    public const SUPPLIER_NAME_TRIBE = 'Tribe';
    public const TRANSACTION_TYPE_INTERNAL = 'Internal';
    public const TRANSACTION_TYPE_SEPA_CT = 'SEPA_CT';
    public const TRANSACTION_TYPE_SEPA_INST = 'SEPA_INST';
    public const TRANSACTION_TYPE_UK_FAST = 'UK_FAST';
    public const TRANSACTION_TYPE_UK_BACS = 'UK_BACS';
    public const TRANSACTION_TYPE_REVERSAL = 'Reversal';
    public const TRANSACTION_TYPE_BTC = 'BTC';
    public const TRANSACTION_TYPE_BTC_TEST = 'BTC_TEST';
    public const TRANSACTION_TYPE_LBTC = 'LBTC';
    public const TRANSACTION_TYPE_LBTC_TEST = 'LBTC_TEST';
    public const TRANSACTION_TYPE_SEPA_DD = 'SEPA_DD';
    public const TRANSACTION_TYPE_SEPA = 'SEPA';
    public const TRANSACTION_TYPE_UNKNOWN = 'Unknown';
    public const TRANSACTION_TYPE_TARGET2 = 'TARGET2';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_UNKNOWN,
            self::TYPE_SCAN,
            self::TYPE_IBAN,
            self::TYPE_DD,
            self::TYPE_BTC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_NONE,
            self::CURRENCY_GBP,
            self::CURRENCY_EUR,
            self::CURRENCY_BTC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNKNOWN,
            self::STATUS_REJECTED,
            self::STATUS_PENDING,
            self::STATUS_PROCESSED,
            self::STATUS_PENDING_APPROVAL,
            self::STATUS_QUEUED_UPSTREAM,
            self::STATUS_QUEUED,
            self::STATUS_FAILED,
            self::STATUS_PENDING_INPUT,
            self::STATUS_SCHEDULED,
            self::STATUS_REJECTED_APPROVAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentRailAllowableValues()
    {
        return [
            self::PAYMENT_RAIL__DEFAULT,
            self::PAYMENT_RAIL_SEPA_CT,
            self::PAYMENT_RAIL_SEPA_INST,
            self::PAYMENT_RAIL_TARGET2,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupplierNameAllowableValues()
    {
        return [
            self::SUPPLIER_NAME_NONE,
            self::SUPPLIER_NAME_CYBER_SOURCE,
            self::SUPPLIER_NAME_CHECKOUT,
            self::SUPPLIER_NAME_STRIPE,
            self::SUPPLIER_NAME_MODULR,
            self::SUPPLIER_NAME_PLAID,
            self::SUPPLIER_NAME_YAPILY,
            self::SUPPLIER_NAME_NOFRIXION,
            self::SUPPLIER_NAME_BITCOIN,
            self::SUPPLIER_NAME_BITCOIN_TESTNET,
            self::SUPPLIER_NAME_BANKING_CIRCLE,
            self::SUPPLIER_NAME_BANKING_CIRCLE_AGENCY,
            self::SUPPLIER_NAME_SIMULATOR,
            self::SUPPLIER_NAME_LIGHTNING,
            self::SUPPLIER_NAME_LIGHTNING_TESTNET,
            self::SUPPLIER_NAME_BANKING_CIRCLE_DIRECT_DEBIT,
            self::SUPPLIER_NAME_TRIBE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionTypeAllowableValues()
    {
        return [
            self::TRANSACTION_TYPE_INTERNAL,
            self::TRANSACTION_TYPE_SEPA_CT,
            self::TRANSACTION_TYPE_SEPA_INST,
            self::TRANSACTION_TYPE_UK_FAST,
            self::TRANSACTION_TYPE_UK_BACS,
            self::TRANSACTION_TYPE_REVERSAL,
            self::TRANSACTION_TYPE_BTC,
            self::TRANSACTION_TYPE_BTC_TEST,
            self::TRANSACTION_TYPE_LBTC,
            self::TRANSACTION_TYPE_LBTC_TEST,
            self::TRANSACTION_TYPE_SEPA_DD,
            self::TRANSACTION_TYPE_SEPA,
            self::TRANSACTION_TYPE_UNKNOWN,
            self::TRANSACTION_TYPE_TARGET2,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('approver_id', $data ?? [], null);
        $this->setIfExists('payrun_id', $data ?? [], null);
        $this->setIfExists('topup_payrun_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('your_reference', $data ?? [], null);
        $this->setIfExists('destination_account_id', $data ?? [], null);
        $this->setIfExists('destination_iban', $data ?? [], null);
        $this->setIfExists('destination_account_number', $data ?? [], null);
        $this->setIfExists('destination_sort_code', $data ?? [], null);
        $this->setIfExists('destination_bitcoin_address', $data ?? [], null);
        $this->setIfExists('destination_account_name', $data ?? [], null);
        $this->setIfExists('their_reference', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('batch_payout_id', $data ?? [], null);
        $this->setIfExists('payment_id', $data ?? [], null);
        $this->setIfExists('transaction_id', $data ?? [], null);
        $this->setIfExists('merchant_token_description', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('invoice_id', $data ?? [], null);
        $this->setIfExists('is_submitted', $data ?? [], null);
        $this->setIfExists('is_settled', $data ?? [], null);
        $this->setIfExists('is_failed', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('payment_rail', $data ?? [], null);
        $this->setIfExists('account', $data ?? [], null);
        $this->setIfExists('destination_internal_account', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('approver', $data ?? [], null);
        $this->setIfExists('beneficiary', $data ?? [], null);
        $this->setIfExists('transactions', $data ?? [], null);
        $this->setIfExists('payout_tags', $data ?? [], null);
        $this->setIfExists('payout_events', $data ?? [], null);
        $this->setIfExists('payrun', $data ?? [], null);
        $this->setIfExists('topup_payrun', $data ?? [], null);
        $this->setIfExists('scheduled', $data ?? [], null);
        $this->setIfExists('schedule_date', $data ?? [], null);
        $this->setIfExists('bitcoin_subtract_fee_from_amount', $data ?? [], null);
        $this->setIfExists('bitcoin_fee_sats_per_vbyte', $data ?? [], null);
        $this->setIfExists('beneficiary_id', $data ?? [], null);
        $this->setIfExists('can_process', $data ?? [], null);
        $this->setIfExists('invoice_payments', $data ?? [], null);
        $this->setIfExists('rule', $data ?? [], null);
        $this->setIfExists('current_state', $data ?? [], null);
        $this->setIfExists('correlation_id', $data ?? [], null);
        $this->setIfExists('scheduled_id', $data ?? [], null);
        $this->setIfExists('rule_id', $data ?? [], null);
        $this->setIfExists('supplier_name', $data ?? [], null);
        $this->setIfExists('transaction_type', $data ?? [], null);
        $this->setIfExists('last_updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentRailAllowableValues();
        if (!is_null($this->container['payment_rail']) && !in_array($this->container['payment_rail'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_rail', must be one of '%s'",
                $this->container['payment_rail'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSupplierNameAllowableValues();
        if (!is_null($this->container['supplier_name']) && !in_array($this->container['supplier_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'supplier_name', must be one of '%s'",
                $this->container['supplier_name'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!is_null($this->container['transaction_type']) && !in_array($this->container['transaction_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transaction_type', must be one of '%s'",
                $this->container['transaction_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets approver_id
     *
     * @return string|null
     */
    public function getApproverId()
    {
        return $this->container['approver_id'];
    }

    /**
     * Sets approver_id
     *
     * @param string|null $approver_id approver_id
     *
     * @return self
     */
    public function setApproverId($approver_id)
    {
        if (is_null($approver_id)) {
            array_push($this->openAPINullablesSetToNull, 'approver_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approver_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['approver_id'] = $approver_id;

        return $this;
    }

    /**
     * Gets payrun_id
     *
     * @return string|null
     */
    public function getPayrunId()
    {
        return $this->container['payrun_id'];
    }

    /**
     * Sets payrun_id
     *
     * @param string|null $payrun_id payrun_id
     *
     * @return self
     */
    public function setPayrunId($payrun_id)
    {
        if (is_null($payrun_id)) {
            array_push($this->openAPINullablesSetToNull, 'payrun_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payrun_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payrun_id'] = $payrun_id;

        return $this;
    }

    /**
     * Gets topup_payrun_id
     *
     * @return string|null
     */
    public function getTopupPayrunId()
    {
        return $this->container['topup_payrun_id'];
    }

    /**
     * Sets topup_payrun_id
     *
     * @param string|null $topup_payrun_id topup_payrun_id
     *
     * @return self
     */
    public function setTopupPayrunId($topup_payrun_id)
    {
        if (is_null($topup_payrun_id)) {
            array_push($this->openAPINullablesSetToNull, 'topup_payrun_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('topup_payrun_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['topup_payrun_id'] = $topup_payrun_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Defines the different types of account identifiers that are supported.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets your_reference
     *
     * @return string|null
     */
    public function getYourReference()
    {
        return $this->container['your_reference'];
    }

    /**
     * Sets your_reference
     *
     * @param string|null $your_reference your_reference
     *
     * @return self
     */
    public function setYourReference($your_reference)
    {
        if (is_null($your_reference)) {
            array_push($this->openAPINullablesSetToNull, 'your_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('your_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['your_reference'] = $your_reference;

        return $this;
    }

    /**
     * Gets destination_account_id
     *
     * @return string|null
     */
    public function getDestinationAccountId()
    {
        return $this->container['destination_account_id'];
    }

    /**
     * Sets destination_account_id
     *
     * @param string|null $destination_account_id destination_account_id
     *
     * @return self
     */
    public function setDestinationAccountId($destination_account_id)
    {
        if (is_null($destination_account_id)) {
            array_push($this->openAPINullablesSetToNull, 'destination_account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('destination_account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['destination_account_id'] = $destination_account_id;

        return $this;
    }

    /**
     * Gets destination_iban
     *
     * @return string|null
     */
    public function getDestinationIban()
    {
        return $this->container['destination_iban'];
    }

    /**
     * Sets destination_iban
     *
     * @param string|null $destination_iban destination_iban
     *
     * @return self
     */
    public function setDestinationIban($destination_iban)
    {
        if (is_null($destination_iban)) {
            array_push($this->openAPINullablesSetToNull, 'destination_iban');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('destination_iban', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['destination_iban'] = $destination_iban;

        return $this;
    }

    /**
     * Gets destination_account_number
     *
     * @return string|null
     */
    public function getDestinationAccountNumber()
    {
        return $this->container['destination_account_number'];
    }

    /**
     * Sets destination_account_number
     *
     * @param string|null $destination_account_number destination_account_number
     *
     * @return self
     */
    public function setDestinationAccountNumber($destination_account_number)
    {
        if (is_null($destination_account_number)) {
            array_push($this->openAPINullablesSetToNull, 'destination_account_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('destination_account_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['destination_account_number'] = $destination_account_number;

        return $this;
    }

    /**
     * Gets destination_sort_code
     *
     * @return string|null
     */
    public function getDestinationSortCode()
    {
        return $this->container['destination_sort_code'];
    }

    /**
     * Sets destination_sort_code
     *
     * @param string|null $destination_sort_code destination_sort_code
     *
     * @return self
     */
    public function setDestinationSortCode($destination_sort_code)
    {
        if (is_null($destination_sort_code)) {
            array_push($this->openAPINullablesSetToNull, 'destination_sort_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('destination_sort_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['destination_sort_code'] = $destination_sort_code;

        return $this;
    }

    /**
     * Gets destination_bitcoin_address
     *
     * @return string|null
     */
    public function getDestinationBitcoinAddress()
    {
        return $this->container['destination_bitcoin_address'];
    }

    /**
     * Sets destination_bitcoin_address
     *
     * @param string|null $destination_bitcoin_address destination_bitcoin_address
     *
     * @return self
     */
    public function setDestinationBitcoinAddress($destination_bitcoin_address)
    {
        if (is_null($destination_bitcoin_address)) {
            array_push($this->openAPINullablesSetToNull, 'destination_bitcoin_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('destination_bitcoin_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['destination_bitcoin_address'] = $destination_bitcoin_address;

        return $this;
    }

    /**
     * Gets destination_account_name
     *
     * @return string|null
     */
    public function getDestinationAccountName()
    {
        return $this->container['destination_account_name'];
    }

    /**
     * Sets destination_account_name
     *
     * @param string|null $destination_account_name destination_account_name
     *
     * @return self
     */
    public function setDestinationAccountName($destination_account_name)
    {
        if (is_null($destination_account_name)) {
            array_push($this->openAPINullablesSetToNull, 'destination_account_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('destination_account_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['destination_account_name'] = $destination_account_name;

        return $this;
    }

    /**
     * Gets their_reference
     *
     * @return string|null
     */
    public function getTheirReference()
    {
        return $this->container['their_reference'];
    }

    /**
     * Sets their_reference
     *
     * @param string|null $their_reference their_reference
     *
     * @return self
     */
    public function setTheirReference($their_reference)
    {
        if (is_null($their_reference)) {
            array_push($this->openAPINullablesSetToNull, 'their_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('their_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['their_reference'] = $their_reference;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of payout.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets batch_payout_id
     *
     * @return string|null
     */
    public function getBatchPayoutId()
    {
        return $this->container['batch_payout_id'];
    }

    /**
     * Sets batch_payout_id
     *
     * @param string|null $batch_payout_id batch_payout_id
     *
     * @return self
     */
    public function setBatchPayoutId($batch_payout_id)
    {
        if (is_null($batch_payout_id)) {
            array_push($this->openAPINullablesSetToNull, 'batch_payout_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('batch_payout_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['batch_payout_id'] = $batch_payout_id;

        return $this;
    }

    /**
     * Gets payment_id
     *
     * @return string|null
     */
    public function getPaymentId()
    {
        return $this->container['payment_id'];
    }

    /**
     * Sets payment_id
     *
     * @param string|null $payment_id payment_id
     *
     * @return self
     */
    public function setPaymentId($payment_id)
    {
        if (is_null($payment_id)) {
            array_push($this->openAPINullablesSetToNull, 'payment_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_id'] = $payment_id;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id transaction_id
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        if (is_null($transaction_id)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets merchant_token_description
     *
     * @return string|null
     */
    public function getMerchantTokenDescription()
    {
        return $this->container['merchant_token_description'];
    }

    /**
     * Sets merchant_token_description
     *
     * @param string|null $merchant_token_description merchant_token_description
     *
     * @return self
     */
    public function setMerchantTokenDescription($merchant_token_description)
    {
        if (is_null($merchant_token_description)) {
            array_push($this->openAPINullablesSetToNull, 'merchant_token_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchant_token_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchant_token_description'] = $merchant_token_description;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted inserted
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets invoice_id
     *
     * @return string|null
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param string|null $invoice_id invoice_id
     *
     * @return self
     */
    public function setInvoiceId($invoice_id)
    {
        if (is_null($invoice_id)) {
            array_push($this->openAPINullablesSetToNull, 'invoice_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoice_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets is_submitted
     *
     * @return bool|null
     */
    public function getIsSubmitted()
    {
        return $this->container['is_submitted'];
    }

    /**
     * Sets is_submitted
     *
     * @param bool|null $is_submitted is_submitted
     *
     * @return self
     */
    public function setIsSubmitted($is_submitted)
    {
        if (is_null($is_submitted)) {
            throw new \InvalidArgumentException('non-nullable is_submitted cannot be null');
        }
        $this->container['is_submitted'] = $is_submitted;

        return $this;
    }

    /**
     * Gets is_settled
     *
     * @return bool|null
     */
    public function getIsSettled()
    {
        return $this->container['is_settled'];
    }

    /**
     * Sets is_settled
     *
     * @param bool|null $is_settled is_settled
     *
     * @return self
     */
    public function setIsSettled($is_settled)
    {
        if (is_null($is_settled)) {
            throw new \InvalidArgumentException('non-nullable is_settled cannot be null');
        }
        $this->container['is_settled'] = $is_settled;

        return $this;
    }

    /**
     * Gets is_failed
     *
     * @return bool|null
     */
    public function getIsFailed()
    {
        return $this->container['is_failed'];
    }

    /**
     * Sets is_failed
     *
     * @param bool|null $is_failed is_failed
     *
     * @return self
     */
    public function setIsFailed($is_failed)
    {
        if (is_null($is_failed)) {
            throw new \InvalidArgumentException('non-nullable is_failed cannot be null');
        }
        $this->container['is_failed'] = $is_failed;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets payment_rail
     *
     * @return string|null
     */
    public function getPaymentRail()
    {
        return $this->container['payment_rail'];
    }

    /**
     * Sets payment_rail
     *
     * @param string|null $payment_rail payment_rail
     *
     * @return self
     */
    public function setPaymentRail($payment_rail)
    {
        if (is_null($payment_rail)) {
            throw new \InvalidArgumentException('non-nullable payment_rail cannot be null');
        }
        $allowedValues = $this->getPaymentRailAllowableValues();
        if (!in_array($payment_rail, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_rail', must be one of '%s'",
                    $payment_rail,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_rail'] = $payment_rail;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsAccountEntity|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsAccountEntity|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        if (is_null($account)) {
            throw new \InvalidArgumentException('non-nullable account cannot be null');
        }
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets destination_internal_account
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsAccountEntity|null
     */
    public function getDestinationInternalAccount()
    {
        return $this->container['destination_internal_account'];
    }

    /**
     * Sets destination_internal_account
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsAccountEntity|null $destination_internal_account destination_internal_account
     *
     * @return self
     */
    public function setDestinationInternalAccount($destination_internal_account)
    {
        if (is_null($destination_internal_account)) {
            throw new \InvalidArgumentException('non-nullable destination_internal_account cannot be null');
        }
        $this->container['destination_internal_account'] = $destination_internal_account;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsUserEntity|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsUserEntity|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets approver
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsUserEntity|null
     */
    public function getApprover()
    {
        return $this->container['approver'];
    }

    /**
     * Sets approver
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsUserEntity|null $approver approver
     *
     * @return self
     */
    public function setApprover($approver)
    {
        if (is_null($approver)) {
            throw new \InvalidArgumentException('non-nullable approver cannot be null');
        }
        $this->container['approver'] = $approver;

        return $this;
    }

    /**
     * Gets beneficiary
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsBeneficiaryEntity|null
     */
    public function getBeneficiary()
    {
        return $this->container['beneficiary'];
    }

    /**
     * Sets beneficiary
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsBeneficiaryEntity|null $beneficiary beneficiary
     *
     * @return self
     */
    public function setBeneficiary($beneficiary)
    {
        if (is_null($beneficiary)) {
            throw new \InvalidArgumentException('non-nullable beneficiary cannot be null');
        }
        $this->container['beneficiary'] = $beneficiary;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsTransactionEntity[]|null
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsTransactionEntity[]|null $transactions transactions
     *
     * @return self
     */
    public function setTransactions($transactions)
    {
        if (is_null($transactions)) {
            array_push($this->openAPINullablesSetToNull, 'transactions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transactions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets payout_tags
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPayoutTagEntity[]|null
     */
    public function getPayoutTags()
    {
        return $this->container['payout_tags'];
    }

    /**
     * Sets payout_tags
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPayoutTagEntity[]|null $payout_tags payout_tags
     *
     * @return self
     */
    public function setPayoutTags($payout_tags)
    {
        if (is_null($payout_tags)) {
            array_push($this->openAPINullablesSetToNull, 'payout_tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payout_tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payout_tags'] = $payout_tags;

        return $this;
    }

    /**
     * Gets payout_events
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEventEntity[]|null
     */
    public function getPayoutEvents()
    {
        return $this->container['payout_events'];
    }

    /**
     * Sets payout_events
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEventEntity[]|null $payout_events payout_events
     *
     * @return self
     */
    public function setPayoutEvents($payout_events)
    {
        if (is_null($payout_events)) {
            array_push($this->openAPINullablesSetToNull, 'payout_events');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payout_events', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payout_events'] = $payout_events;

        return $this;
    }

    /**
     * Gets payrun
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunEntity|null
     */
    public function getPayrun()
    {
        return $this->container['payrun'];
    }

    /**
     * Sets payrun
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunEntity|null $payrun payrun
     *
     * @return self
     */
    public function setPayrun($payrun)
    {
        if (is_null($payrun)) {
            throw new \InvalidArgumentException('non-nullable payrun cannot be null');
        }
        $this->container['payrun'] = $payrun;

        return $this;
    }

    /**
     * Gets topup_payrun
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunEntity|null
     */
    public function getTopupPayrun()
    {
        return $this->container['topup_payrun'];
    }

    /**
     * Sets topup_payrun
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunEntity|null $topup_payrun topup_payrun
     *
     * @return self
     */
    public function setTopupPayrun($topup_payrun)
    {
        if (is_null($topup_payrun)) {
            throw new \InvalidArgumentException('non-nullable topup_payrun cannot be null');
        }
        $this->container['topup_payrun'] = $topup_payrun;

        return $this;
    }

    /**
     * Gets scheduled
     *
     * @return bool|null
     */
    public function getScheduled()
    {
        return $this->container['scheduled'];
    }

    /**
     * Sets scheduled
     *
     * @param bool|null $scheduled scheduled
     *
     * @return self
     */
    public function setScheduled($scheduled)
    {
        if (is_null($scheduled)) {
            throw new \InvalidArgumentException('non-nullable scheduled cannot be null');
        }
        $this->container['scheduled'] = $scheduled;

        return $this;
    }

    /**
     * Gets schedule_date
     *
     * @return \DateTime|null
     */
    public function getScheduleDate()
    {
        return $this->container['schedule_date'];
    }

    /**
     * Sets schedule_date
     *
     * @param \DateTime|null $schedule_date schedule_date
     *
     * @return self
     */
    public function setScheduleDate($schedule_date)
    {
        if (is_null($schedule_date)) {
            array_push($this->openAPINullablesSetToNull, 'schedule_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('schedule_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['schedule_date'] = $schedule_date;

        return $this;
    }

    /**
     * Gets bitcoin_subtract_fee_from_amount
     *
     * @return bool|null
     */
    public function getBitcoinSubtractFeeFromAmount()
    {
        return $this->container['bitcoin_subtract_fee_from_amount'];
    }

    /**
     * Sets bitcoin_subtract_fee_from_amount
     *
     * @param bool|null $bitcoin_subtract_fee_from_amount bitcoin_subtract_fee_from_amount
     *
     * @return self
     */
    public function setBitcoinSubtractFeeFromAmount($bitcoin_subtract_fee_from_amount)
    {
        if (is_null($bitcoin_subtract_fee_from_amount)) {
            throw new \InvalidArgumentException('non-nullable bitcoin_subtract_fee_from_amount cannot be null');
        }
        $this->container['bitcoin_subtract_fee_from_amount'] = $bitcoin_subtract_fee_from_amount;

        return $this;
    }

    /**
     * Gets bitcoin_fee_sats_per_vbyte
     *
     * @return int|null
     */
    public function getBitcoinFeeSatsPerVbyte()
    {
        return $this->container['bitcoin_fee_sats_per_vbyte'];
    }

    /**
     * Sets bitcoin_fee_sats_per_vbyte
     *
     * @param int|null $bitcoin_fee_sats_per_vbyte bitcoin_fee_sats_per_vbyte
     *
     * @return self
     */
    public function setBitcoinFeeSatsPerVbyte($bitcoin_fee_sats_per_vbyte)
    {
        if (is_null($bitcoin_fee_sats_per_vbyte)) {
            throw new \InvalidArgumentException('non-nullable bitcoin_fee_sats_per_vbyte cannot be null');
        }
        $this->container['bitcoin_fee_sats_per_vbyte'] = $bitcoin_fee_sats_per_vbyte;

        return $this;
    }

    /**
     * Gets beneficiary_id
     *
     * @return string|null
     */
    public function getBeneficiaryId()
    {
        return $this->container['beneficiary_id'];
    }

    /**
     * Sets beneficiary_id
     *
     * @param string|null $beneficiary_id beneficiary_id
     *
     * @return self
     */
    public function setBeneficiaryId($beneficiary_id)
    {
        if (is_null($beneficiary_id)) {
            array_push($this->openAPINullablesSetToNull, 'beneficiary_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('beneficiary_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['beneficiary_id'] = $beneficiary_id;

        return $this;
    }

    /**
     * Gets can_process
     *
     * @return bool|null
     */
    public function getCanProcess()
    {
        return $this->container['can_process'];
    }

    /**
     * Sets can_process
     *
     * @param bool|null $can_process can_process
     *
     * @return self
     */
    public function setCanProcess($can_process)
    {
        if (is_null($can_process)) {
            throw new \InvalidArgumentException('non-nullable can_process cannot be null');
        }
        $this->container['can_process'] = $can_process;

        return $this;
    }

    /**
     * Gets invoice_payments
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsInvoicePaymentEntity[]|null
     */
    public function getInvoicePayments()
    {
        return $this->container['invoice_payments'];
    }

    /**
     * Sets invoice_payments
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsInvoicePaymentEntity[]|null $invoice_payments invoice_payments
     *
     * @return self
     */
    public function setInvoicePayments($invoice_payments)
    {
        if (is_null($invoice_payments)) {
            array_push($this->openAPINullablesSetToNull, 'invoice_payments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoice_payments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoice_payments'] = $invoice_payments;

        return $this;
    }

    /**
     * Gets rule
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsRuleEntity|null
     */
    public function getRule()
    {
        return $this->container['rule'];
    }

    /**
     * Sets rule
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsRuleEntity|null $rule rule
     *
     * @return self
     */
    public function setRule($rule)
    {
        if (is_null($rule)) {
            throw new \InvalidArgumentException('non-nullable rule cannot be null');
        }
        $this->container['rule'] = $rule;

        return $this;
    }

    /**
     * Gets current_state
     *
     * @return string|null
     */
    public function getCurrentState()
    {
        return $this->container['current_state'];
    }

    /**
     * Sets current_state
     *
     * @param string|null $current_state current_state
     *
     * @return self
     */
    public function setCurrentState($current_state)
    {
        if (is_null($current_state)) {
            array_push($this->openAPINullablesSetToNull, 'current_state');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('current_state', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['current_state'] = $current_state;

        return $this;
    }

    /**
     * Gets correlation_id
     *
     * @return string|null
     */
    public function getCorrelationId()
    {
        return $this->container['correlation_id'];
    }

    /**
     * Sets correlation_id
     *
     * @param string|null $correlation_id correlation_id
     *
     * @return self
     */
    public function setCorrelationId($correlation_id)
    {
        if (is_null($correlation_id)) {
            throw new \InvalidArgumentException('non-nullable correlation_id cannot be null');
        }
        $this->container['correlation_id'] = $correlation_id;

        return $this;
    }

    /**
     * Gets scheduled_id
     *
     * @return string|null
     */
    public function getScheduledId()
    {
        return $this->container['scheduled_id'];
    }

    /**
     * Sets scheduled_id
     *
     * @param string|null $scheduled_id scheduled_id
     *
     * @return self
     */
    public function setScheduledId($scheduled_id)
    {
        if (is_null($scheduled_id)) {
            array_push($this->openAPINullablesSetToNull, 'scheduled_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scheduled_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scheduled_id'] = $scheduled_id;

        return $this;
    }

    /**
     * Gets rule_id
     *
     * @return string|null
     */
    public function getRuleId()
    {
        return $this->container['rule_id'];
    }

    /**
     * Sets rule_id
     *
     * @param string|null $rule_id rule_id
     *
     * @return self
     */
    public function setRuleId($rule_id)
    {
        if (is_null($rule_id)) {
            array_push($this->openAPINullablesSetToNull, 'rule_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rule_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rule_id'] = $rule_id;

        return $this;
    }

    /**
     * Gets supplier_name
     *
     * @return string|null
     */
    public function getSupplierName()
    {
        return $this->container['supplier_name'];
    }

    /**
     * Sets supplier_name
     *
     * @param string|null $supplier_name Lists the supported card and PIS processors.
     *
     * @return self
     */
    public function setSupplierName($supplier_name)
    {
        if (is_null($supplier_name)) {
            throw new \InvalidArgumentException('non-nullable supplier_name cannot be null');
        }
        $allowedValues = $this->getSupplierNameAllowableValues();
        if (!in_array($supplier_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'supplier_name', must be one of '%s'",
                    $supplier_name,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['supplier_name'] = $supplier_name;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string|null
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string|null $transaction_type transaction_type
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        if (is_null($transaction_type)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!is_null($transaction_type) && !in_array($transaction_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transaction_type', must be one of '%s'",
                    $transaction_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets last_updated_by
     *
     * @return string|null
     */
    public function getLastUpdatedBy()
    {
        return $this->container['last_updated_by'];
    }

    /**
     * Sets last_updated_by
     *
     * @param string|null $last_updated_by last_updated_by
     *
     * @return self
     */
    public function setLastUpdatedBy($last_updated_by)
    {
        if (is_null($last_updated_by)) {
            array_push($this->openAPINullablesSetToNull, 'last_updated_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_updated_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_updated_by'] = $last_updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


