<?php
/**
 * NoFrixionDataModelsUserEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionDataModelsUserEntity Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionDataModelsUserEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.DataModels.UserEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'identity_user_id' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'email_address' => 'string',
        'inserted' => '\DateTime',
        'last_updated' => '\DateTime',
        'enabled' => 'bool',
        'profile' => 'string',
        'payout_approvers' => '\Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity[]',
        'payout_events' => '\Nofrixion\Client\Model\NoFrixionDataModelsPayoutEventEntity[]',
        'payout_users' => '\Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity[]',
        'user_roles' => '\Nofrixion\Client\Model\NoFrixionDataModelsUserRoleEntity[]',
        'rule_approvers' => '\Nofrixion\Client\Model\NoFrixionDataModelsRuleEntity[]',
        'rule_users' => '\Nofrixion\Client\Model\NoFrixionDataModelsRuleEntity[]',
        'payment_requests' => '\Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestEntity[]',
        'beneficiary_events' => '\Nofrixion\Client\Model\NoFrixionDataModelsBeneficiaryEventEntity[]',
        'merchant_reports' => '\Nofrixion\Client\Model\NoFrixionDataModelsReportEntity[]',
        'payrun_users' => '\Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunEntity[]',
        'payrun_events' => '\Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunEventEntity[]',
        'third_party_applications' => '\Nofrixion\Client\Model\NoFrixionDataAccessDataModelsThirdPartyApplicationEntity[]',
        'rule_events' => '\Nofrixion\Client\Model\NoFrixionDataModelsRuleEventEntity[]',
        'role_users' => '\Nofrixion\Client\Model\NoFrixionDataModelsRoleUserEntity[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'identity_user_id' => null,
        'first_name' => null,
        'last_name' => null,
        'email_address' => null,
        'inserted' => 'date-time',
        'last_updated' => 'date-time',
        'enabled' => null,
        'profile' => null,
        'payout_approvers' => null,
        'payout_events' => null,
        'payout_users' => null,
        'user_roles' => null,
        'rule_approvers' => null,
        'rule_users' => null,
        'payment_requests' => null,
        'beneficiary_events' => null,
        'merchant_reports' => null,
        'payrun_users' => null,
        'payrun_events' => null,
        'third_party_applications' => null,
        'rule_events' => null,
        'role_users' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'identity_user_id' => true,
        'first_name' => true,
        'last_name' => true,
        'email_address' => true,
        'inserted' => false,
        'last_updated' => false,
        'enabled' => false,
        'profile' => true,
        'payout_approvers' => true,
        'payout_events' => true,
        'payout_users' => true,
        'user_roles' => true,
        'rule_approvers' => true,
        'rule_users' => true,
        'payment_requests' => true,
        'beneficiary_events' => true,
        'merchant_reports' => true,
        'payrun_users' => true,
        'payrun_events' => true,
        'third_party_applications' => true,
        'rule_events' => true,
        'role_users' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'identity_user_id' => 'identityUserID',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'email_address' => 'emailAddress',
        'inserted' => 'inserted',
        'last_updated' => 'lastUpdated',
        'enabled' => 'enabled',
        'profile' => 'profile',
        'payout_approvers' => 'payoutApprovers',
        'payout_events' => 'payoutEvents',
        'payout_users' => 'payoutUsers',
        'user_roles' => 'userRoles',
        'rule_approvers' => 'ruleApprovers',
        'rule_users' => 'ruleUsers',
        'payment_requests' => 'paymentRequests',
        'beneficiary_events' => 'beneficiaryEvents',
        'merchant_reports' => 'merchantReports',
        'payrun_users' => 'payrunUsers',
        'payrun_events' => 'payrunEvents',
        'third_party_applications' => 'thirdPartyApplications',
        'rule_events' => 'ruleEvents',
        'role_users' => 'roleUsers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'identity_user_id' => 'setIdentityUserId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email_address' => 'setEmailAddress',
        'inserted' => 'setInserted',
        'last_updated' => 'setLastUpdated',
        'enabled' => 'setEnabled',
        'profile' => 'setProfile',
        'payout_approvers' => 'setPayoutApprovers',
        'payout_events' => 'setPayoutEvents',
        'payout_users' => 'setPayoutUsers',
        'user_roles' => 'setUserRoles',
        'rule_approvers' => 'setRuleApprovers',
        'rule_users' => 'setRuleUsers',
        'payment_requests' => 'setPaymentRequests',
        'beneficiary_events' => 'setBeneficiaryEvents',
        'merchant_reports' => 'setMerchantReports',
        'payrun_users' => 'setPayrunUsers',
        'payrun_events' => 'setPayrunEvents',
        'third_party_applications' => 'setThirdPartyApplications',
        'rule_events' => 'setRuleEvents',
        'role_users' => 'setRoleUsers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'identity_user_id' => 'getIdentityUserId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email_address' => 'getEmailAddress',
        'inserted' => 'getInserted',
        'last_updated' => 'getLastUpdated',
        'enabled' => 'getEnabled',
        'profile' => 'getProfile',
        'payout_approvers' => 'getPayoutApprovers',
        'payout_events' => 'getPayoutEvents',
        'payout_users' => 'getPayoutUsers',
        'user_roles' => 'getUserRoles',
        'rule_approvers' => 'getRuleApprovers',
        'rule_users' => 'getRuleUsers',
        'payment_requests' => 'getPaymentRequests',
        'beneficiary_events' => 'getBeneficiaryEvents',
        'merchant_reports' => 'getMerchantReports',
        'payrun_users' => 'getPayrunUsers',
        'payrun_events' => 'getPayrunEvents',
        'third_party_applications' => 'getThirdPartyApplications',
        'rule_events' => 'getRuleEvents',
        'role_users' => 'getRoleUsers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('identity_user_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('email_address', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('profile', $data ?? [], null);
        $this->setIfExists('payout_approvers', $data ?? [], null);
        $this->setIfExists('payout_events', $data ?? [], null);
        $this->setIfExists('payout_users', $data ?? [], null);
        $this->setIfExists('user_roles', $data ?? [], null);
        $this->setIfExists('rule_approvers', $data ?? [], null);
        $this->setIfExists('rule_users', $data ?? [], null);
        $this->setIfExists('payment_requests', $data ?? [], null);
        $this->setIfExists('beneficiary_events', $data ?? [], null);
        $this->setIfExists('merchant_reports', $data ?? [], null);
        $this->setIfExists('payrun_users', $data ?? [], null);
        $this->setIfExists('payrun_events', $data ?? [], null);
        $this->setIfExists('third_party_applications', $data ?? [], null);
        $this->setIfExists('rule_events', $data ?? [], null);
        $this->setIfExists('role_users', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identity_user_id
     *
     * @return string|null
     */
    public function getIdentityUserId()
    {
        return $this->container['identity_user_id'];
    }

    /**
     * Sets identity_user_id
     *
     * @param string|null $identity_user_id identity_user_id
     *
     * @return self
     */
    public function setIdentityUserId($identity_user_id)
    {
        if (is_null($identity_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'identity_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('identity_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['identity_user_id'] = $identity_user_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            array_push($this->openAPINullablesSetToNull, 'first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            array_push($this->openAPINullablesSetToNull, 'last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string|null $email_address email_address
     *
     * @return self
     */
    public function setEmailAddress($email_address)
    {
        if (is_null($email_address)) {
            array_push($this->openAPINullablesSetToNull, 'email_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted inserted
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return string|null
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param string|null $profile profile
     *
     * @return self
     */
    public function setProfile($profile)
    {
        if (is_null($profile)) {
            array_push($this->openAPINullablesSetToNull, 'profile');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profile', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets payout_approvers
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity[]|null
     */
    public function getPayoutApprovers()
    {
        return $this->container['payout_approvers'];
    }

    /**
     * Sets payout_approvers
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity[]|null $payout_approvers payout_approvers
     *
     * @return self
     */
    public function setPayoutApprovers($payout_approvers)
    {
        if (is_null($payout_approvers)) {
            array_push($this->openAPINullablesSetToNull, 'payout_approvers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payout_approvers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payout_approvers'] = $payout_approvers;

        return $this;
    }

    /**
     * Gets payout_events
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEventEntity[]|null
     */
    public function getPayoutEvents()
    {
        return $this->container['payout_events'];
    }

    /**
     * Sets payout_events
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEventEntity[]|null $payout_events payout_events
     *
     * @return self
     */
    public function setPayoutEvents($payout_events)
    {
        if (is_null($payout_events)) {
            array_push($this->openAPINullablesSetToNull, 'payout_events');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payout_events', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payout_events'] = $payout_events;

        return $this;
    }

    /**
     * Gets payout_users
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity[]|null
     */
    public function getPayoutUsers()
    {
        return $this->container['payout_users'];
    }

    /**
     * Sets payout_users
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity[]|null $payout_users payout_users
     *
     * @return self
     */
    public function setPayoutUsers($payout_users)
    {
        if (is_null($payout_users)) {
            array_push($this->openAPINullablesSetToNull, 'payout_users');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payout_users', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payout_users'] = $payout_users;

        return $this;
    }

    /**
     * Gets user_roles
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsUserRoleEntity[]|null
     */
    public function getUserRoles()
    {
        return $this->container['user_roles'];
    }

    /**
     * Sets user_roles
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsUserRoleEntity[]|null $user_roles user_roles
     *
     * @return self
     */
    public function setUserRoles($user_roles)
    {
        if (is_null($user_roles)) {
            array_push($this->openAPINullablesSetToNull, 'user_roles');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_roles', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_roles'] = $user_roles;

        return $this;
    }

    /**
     * Gets rule_approvers
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsRuleEntity[]|null
     */
    public function getRuleApprovers()
    {
        return $this->container['rule_approvers'];
    }

    /**
     * Sets rule_approvers
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsRuleEntity[]|null $rule_approvers rule_approvers
     *
     * @return self
     */
    public function setRuleApprovers($rule_approvers)
    {
        if (is_null($rule_approvers)) {
            array_push($this->openAPINullablesSetToNull, 'rule_approvers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rule_approvers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rule_approvers'] = $rule_approvers;

        return $this;
    }

    /**
     * Gets rule_users
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsRuleEntity[]|null
     */
    public function getRuleUsers()
    {
        return $this->container['rule_users'];
    }

    /**
     * Sets rule_users
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsRuleEntity[]|null $rule_users rule_users
     *
     * @return self
     */
    public function setRuleUsers($rule_users)
    {
        if (is_null($rule_users)) {
            array_push($this->openAPINullablesSetToNull, 'rule_users');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rule_users', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rule_users'] = $rule_users;

        return $this;
    }

    /**
     * Gets payment_requests
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestEntity[]|null
     */
    public function getPaymentRequests()
    {
        return $this->container['payment_requests'];
    }

    /**
     * Sets payment_requests
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestEntity[]|null $payment_requests payment_requests
     *
     * @return self
     */
    public function setPaymentRequests($payment_requests)
    {
        if (is_null($payment_requests)) {
            array_push($this->openAPINullablesSetToNull, 'payment_requests');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_requests', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_requests'] = $payment_requests;

        return $this;
    }

    /**
     * Gets beneficiary_events
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsBeneficiaryEventEntity[]|null
     */
    public function getBeneficiaryEvents()
    {
        return $this->container['beneficiary_events'];
    }

    /**
     * Sets beneficiary_events
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsBeneficiaryEventEntity[]|null $beneficiary_events beneficiary_events
     *
     * @return self
     */
    public function setBeneficiaryEvents($beneficiary_events)
    {
        if (is_null($beneficiary_events)) {
            array_push($this->openAPINullablesSetToNull, 'beneficiary_events');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('beneficiary_events', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['beneficiary_events'] = $beneficiary_events;

        return $this;
    }

    /**
     * Gets merchant_reports
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsReportEntity[]|null
     */
    public function getMerchantReports()
    {
        return $this->container['merchant_reports'];
    }

    /**
     * Sets merchant_reports
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsReportEntity[]|null $merchant_reports merchant_reports
     *
     * @return self
     */
    public function setMerchantReports($merchant_reports)
    {
        if (is_null($merchant_reports)) {
            array_push($this->openAPINullablesSetToNull, 'merchant_reports');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchant_reports', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchant_reports'] = $merchant_reports;

        return $this;
    }

    /**
     * Gets payrun_users
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunEntity[]|null
     */
    public function getPayrunUsers()
    {
        return $this->container['payrun_users'];
    }

    /**
     * Sets payrun_users
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunEntity[]|null $payrun_users payrun_users
     *
     * @return self
     */
    public function setPayrunUsers($payrun_users)
    {
        if (is_null($payrun_users)) {
            array_push($this->openAPINullablesSetToNull, 'payrun_users');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payrun_users', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payrun_users'] = $payrun_users;

        return $this;
    }

    /**
     * Gets payrun_events
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunEventEntity[]|null
     */
    public function getPayrunEvents()
    {
        return $this->container['payrun_events'];
    }

    /**
     * Sets payrun_events
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunEventEntity[]|null $payrun_events payrun_events
     *
     * @return self
     */
    public function setPayrunEvents($payrun_events)
    {
        if (is_null($payrun_events)) {
            array_push($this->openAPINullablesSetToNull, 'payrun_events');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payrun_events', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payrun_events'] = $payrun_events;

        return $this;
    }

    /**
     * Gets third_party_applications
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsThirdPartyApplicationEntity[]|null
     */
    public function getThirdPartyApplications()
    {
        return $this->container['third_party_applications'];
    }

    /**
     * Sets third_party_applications
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsThirdPartyApplicationEntity[]|null $third_party_applications third_party_applications
     *
     * @return self
     */
    public function setThirdPartyApplications($third_party_applications)
    {
        if (is_null($third_party_applications)) {
            array_push($this->openAPINullablesSetToNull, 'third_party_applications');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('third_party_applications', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['third_party_applications'] = $third_party_applications;

        return $this;
    }

    /**
     * Gets rule_events
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsRuleEventEntity[]|null
     */
    public function getRuleEvents()
    {
        return $this->container['rule_events'];
    }

    /**
     * Sets rule_events
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsRuleEventEntity[]|null $rule_events rule_events
     *
     * @return self
     */
    public function setRuleEvents($rule_events)
    {
        if (is_null($rule_events)) {
            array_push($this->openAPINullablesSetToNull, 'rule_events');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rule_events', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rule_events'] = $rule_events;

        return $this;
    }

    /**
     * Gets role_users
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsRoleUserEntity[]|null
     */
    public function getRoleUsers()
    {
        return $this->container['role_users'];
    }

    /**
     * Sets role_users
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsRoleUserEntity[]|null $role_users role_users
     *
     * @return self
     */
    public function setRoleUsers($role_users)
    {
        if (is_null($role_users)) {
            array_push($this->openAPINullablesSetToNull, 'role_users');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('role_users', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['role_users'] = $role_users;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


