<?php
/**
 * NoFrixionDataModelsXeroBankFeedConnectionEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionDataModelsXeroBankFeedConnectionEntity Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionDataModelsXeroBankFeedConnectionEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.DataModels.XeroBankFeedConnectionEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'account_id' => 'string',
        'last_txn_sequence_number' => 'int',
        'xero_feed_connection_id' => 'string',
        'last_xero_bank_feed_sync_status' => 'string',
        'last_xero_bank_feed_synced_at' => '\DateTime',
        'last_xero_bank_feed_sync_failed_at' => '\DateTime',
        'last_failure_reason' => 'string',
        'connection_status' => 'string',
        'inserted' => '\DateTime',
        'last_updated' => '\DateTime',
        'account' => '\Nofrixion\Client\Model\NoFrixionDataModelsAccountEntity'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'account_id' => 'uuid',
        'last_txn_sequence_number' => 'int32',
        'xero_feed_connection_id' => 'uuid',
        'last_xero_bank_feed_sync_status' => null,
        'last_xero_bank_feed_synced_at' => 'date-time',
        'last_xero_bank_feed_sync_failed_at' => 'date-time',
        'last_failure_reason' => null,
        'connection_status' => null,
        'inserted' => 'date-time',
        'last_updated' => 'date-time',
        'account' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'account_id' => false,
        'last_txn_sequence_number' => true,
        'xero_feed_connection_id' => true,
        'last_xero_bank_feed_sync_status' => false,
        'last_xero_bank_feed_synced_at' => true,
        'last_xero_bank_feed_sync_failed_at' => true,
        'last_failure_reason' => true,
        'connection_status' => false,
        'inserted' => false,
        'last_updated' => false,
        'account' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'account_id' => 'accountID',
        'last_txn_sequence_number' => 'lastTxnSequenceNumber',
        'xero_feed_connection_id' => 'xeroFeedConnectionID',
        'last_xero_bank_feed_sync_status' => 'lastXeroBankFeedSyncStatus',
        'last_xero_bank_feed_synced_at' => 'lastXeroBankFeedSyncedAt',
        'last_xero_bank_feed_sync_failed_at' => 'lastXeroBankFeedSyncFailedAt',
        'last_failure_reason' => 'lastFailureReason',
        'connection_status' => 'connectionStatus',
        'inserted' => 'inserted',
        'last_updated' => 'lastUpdated',
        'account' => 'account'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'account_id' => 'setAccountId',
        'last_txn_sequence_number' => 'setLastTxnSequenceNumber',
        'xero_feed_connection_id' => 'setXeroFeedConnectionId',
        'last_xero_bank_feed_sync_status' => 'setLastXeroBankFeedSyncStatus',
        'last_xero_bank_feed_synced_at' => 'setLastXeroBankFeedSyncedAt',
        'last_xero_bank_feed_sync_failed_at' => 'setLastXeroBankFeedSyncFailedAt',
        'last_failure_reason' => 'setLastFailureReason',
        'connection_status' => 'setConnectionStatus',
        'inserted' => 'setInserted',
        'last_updated' => 'setLastUpdated',
        'account' => 'setAccount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'account_id' => 'getAccountId',
        'last_txn_sequence_number' => 'getLastTxnSequenceNumber',
        'xero_feed_connection_id' => 'getXeroFeedConnectionId',
        'last_xero_bank_feed_sync_status' => 'getLastXeroBankFeedSyncStatus',
        'last_xero_bank_feed_synced_at' => 'getLastXeroBankFeedSyncedAt',
        'last_xero_bank_feed_sync_failed_at' => 'getLastXeroBankFeedSyncFailedAt',
        'last_failure_reason' => 'getLastFailureReason',
        'connection_status' => 'getConnectionStatus',
        'inserted' => 'getInserted',
        'last_updated' => 'getLastUpdated',
        'account' => 'getAccount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const LAST_XERO_BANK_FEED_SYNC_STATUS_NONE = 'None';
    public const LAST_XERO_BANK_FEED_SYNC_STATUS_IN_PROGRESS = 'InProgress';
    public const LAST_XERO_BANK_FEED_SYNC_STATUS_COMPLETED = 'Completed';
    public const LAST_XERO_BANK_FEED_SYNC_STATUS_FAILED = 'Failed';
    public const CONNECTION_STATUS_NONE = 'None';
    public const CONNECTION_STATUS_PENDING = 'Pending';
    public const CONNECTION_STATUS_ACTIVE = 'Active';
    public const CONNECTION_STATUS_INACTIVE = 'Inactive';
    public const CONNECTION_STATUS_FAILED = 'Failed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLastXeroBankFeedSyncStatusAllowableValues()
    {
        return [
            self::LAST_XERO_BANK_FEED_SYNC_STATUS_NONE,
            self::LAST_XERO_BANK_FEED_SYNC_STATUS_IN_PROGRESS,
            self::LAST_XERO_BANK_FEED_SYNC_STATUS_COMPLETED,
            self::LAST_XERO_BANK_FEED_SYNC_STATUS_FAILED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConnectionStatusAllowableValues()
    {
        return [
            self::CONNECTION_STATUS_NONE,
            self::CONNECTION_STATUS_PENDING,
            self::CONNECTION_STATUS_ACTIVE,
            self::CONNECTION_STATUS_INACTIVE,
            self::CONNECTION_STATUS_FAILED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('last_txn_sequence_number', $data ?? [], null);
        $this->setIfExists('xero_feed_connection_id', $data ?? [], null);
        $this->setIfExists('last_xero_bank_feed_sync_status', $data ?? [], null);
        $this->setIfExists('last_xero_bank_feed_synced_at', $data ?? [], null);
        $this->setIfExists('last_xero_bank_feed_sync_failed_at', $data ?? [], null);
        $this->setIfExists('last_failure_reason', $data ?? [], null);
        $this->setIfExists('connection_status', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('account', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLastXeroBankFeedSyncStatusAllowableValues();
        if (!is_null($this->container['last_xero_bank_feed_sync_status']) && !in_array($this->container['last_xero_bank_feed_sync_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'last_xero_bank_feed_sync_status', must be one of '%s'",
                $this->container['last_xero_bank_feed_sync_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getConnectionStatusAllowableValues();
        if (!is_null($this->container['connection_status']) && !in_array($this->container['connection_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'connection_status', must be one of '%s'",
                $this->container['connection_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets last_txn_sequence_number
     *
     * @return int|null
     */
    public function getLastTxnSequenceNumber()
    {
        return $this->container['last_txn_sequence_number'];
    }

    /**
     * Sets last_txn_sequence_number
     *
     * @param int|null $last_txn_sequence_number last_txn_sequence_number
     *
     * @return self
     */
    public function setLastTxnSequenceNumber($last_txn_sequence_number)
    {
        if (is_null($last_txn_sequence_number)) {
            array_push($this->openAPINullablesSetToNull, 'last_txn_sequence_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_txn_sequence_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_txn_sequence_number'] = $last_txn_sequence_number;

        return $this;
    }

    /**
     * Gets xero_feed_connection_id
     *
     * @return string|null
     */
    public function getXeroFeedConnectionId()
    {
        return $this->container['xero_feed_connection_id'];
    }

    /**
     * Sets xero_feed_connection_id
     *
     * @param string|null $xero_feed_connection_id xero_feed_connection_id
     *
     * @return self
     */
    public function setXeroFeedConnectionId($xero_feed_connection_id)
    {
        if (is_null($xero_feed_connection_id)) {
            array_push($this->openAPINullablesSetToNull, 'xero_feed_connection_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('xero_feed_connection_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['xero_feed_connection_id'] = $xero_feed_connection_id;

        return $this;
    }

    /**
     * Gets last_xero_bank_feed_sync_status
     *
     * @return string|null
     */
    public function getLastXeroBankFeedSyncStatus()
    {
        return $this->container['last_xero_bank_feed_sync_status'];
    }

    /**
     * Sets last_xero_bank_feed_sync_status
     *
     * @param string|null $last_xero_bank_feed_sync_status last_xero_bank_feed_sync_status
     *
     * @return self
     */
    public function setLastXeroBankFeedSyncStatus($last_xero_bank_feed_sync_status)
    {
        if (is_null($last_xero_bank_feed_sync_status)) {
            throw new \InvalidArgumentException('non-nullable last_xero_bank_feed_sync_status cannot be null');
        }
        $allowedValues = $this->getLastXeroBankFeedSyncStatusAllowableValues();
        if (!in_array($last_xero_bank_feed_sync_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'last_xero_bank_feed_sync_status', must be one of '%s'",
                    $last_xero_bank_feed_sync_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['last_xero_bank_feed_sync_status'] = $last_xero_bank_feed_sync_status;

        return $this;
    }

    /**
     * Gets last_xero_bank_feed_synced_at
     *
     * @return \DateTime|null
     */
    public function getLastXeroBankFeedSyncedAt()
    {
        return $this->container['last_xero_bank_feed_synced_at'];
    }

    /**
     * Sets last_xero_bank_feed_synced_at
     *
     * @param \DateTime|null $last_xero_bank_feed_synced_at last_xero_bank_feed_synced_at
     *
     * @return self
     */
    public function setLastXeroBankFeedSyncedAt($last_xero_bank_feed_synced_at)
    {
        if (is_null($last_xero_bank_feed_synced_at)) {
            array_push($this->openAPINullablesSetToNull, 'last_xero_bank_feed_synced_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_xero_bank_feed_synced_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_xero_bank_feed_synced_at'] = $last_xero_bank_feed_synced_at;

        return $this;
    }

    /**
     * Gets last_xero_bank_feed_sync_failed_at
     *
     * @return \DateTime|null
     */
    public function getLastXeroBankFeedSyncFailedAt()
    {
        return $this->container['last_xero_bank_feed_sync_failed_at'];
    }

    /**
     * Sets last_xero_bank_feed_sync_failed_at
     *
     * @param \DateTime|null $last_xero_bank_feed_sync_failed_at last_xero_bank_feed_sync_failed_at
     *
     * @return self
     */
    public function setLastXeroBankFeedSyncFailedAt($last_xero_bank_feed_sync_failed_at)
    {
        if (is_null($last_xero_bank_feed_sync_failed_at)) {
            array_push($this->openAPINullablesSetToNull, 'last_xero_bank_feed_sync_failed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_xero_bank_feed_sync_failed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_xero_bank_feed_sync_failed_at'] = $last_xero_bank_feed_sync_failed_at;

        return $this;
    }

    /**
     * Gets last_failure_reason
     *
     * @return string|null
     */
    public function getLastFailureReason()
    {
        return $this->container['last_failure_reason'];
    }

    /**
     * Sets last_failure_reason
     *
     * @param string|null $last_failure_reason last_failure_reason
     *
     * @return self
     */
    public function setLastFailureReason($last_failure_reason)
    {
        if (is_null($last_failure_reason)) {
            array_push($this->openAPINullablesSetToNull, 'last_failure_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_failure_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_failure_reason'] = $last_failure_reason;

        return $this;
    }

    /**
     * Gets connection_status
     *
     * @return string|null
     */
    public function getConnectionStatus()
    {
        return $this->container['connection_status'];
    }

    /**
     * Sets connection_status
     *
     * @param string|null $connection_status Defines all the possible statuses for a Xero bank feed connection.
     *
     * @return self
     */
    public function setConnectionStatus($connection_status)
    {
        if (is_null($connection_status)) {
            throw new \InvalidArgumentException('non-nullable connection_status cannot be null');
        }
        $allowedValues = $this->getConnectionStatusAllowableValues();
        if (!in_array($connection_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'connection_status', must be one of '%s'",
                    $connection_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['connection_status'] = $connection_status;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted inserted
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsAccountEntity|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsAccountEntity|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        if (is_null($account)) {
            throw new \InvalidArgumentException('non-nullable account cannot be null');
        }
        $this->container['account'] = $account;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


