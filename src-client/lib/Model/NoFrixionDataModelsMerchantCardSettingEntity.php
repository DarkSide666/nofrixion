<?php
/**
 * NoFrixionDataModelsMerchantCardSettingEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionDataModelsMerchantCardSettingEntity Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionDataModelsMerchantCardSettingEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.DataModels.MerchantCardSettingEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'merchant_id' => 'string',
        'processor_name' => 'string',
        'processor_merchant_id' => 'string',
        'processor_api_key' => 'string',
        'enabled' => 'bool',
        'is_default' => 'bool',
        'inserted' => '\DateTime',
        'last_updated' => '\DateTime',
        'key_name' => 'string',
        'is_using_key_vault' => 'bool',
        'google_pay_merchant_id' => 'string',
        'is_google_pay_enabled' => 'bool',
        'is_apple_pay_enabled' => 'bool',
        'merchant' => '\Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'merchant_id' => 'uuid',
        'processor_name' => null,
        'processor_merchant_id' => null,
        'processor_api_key' => null,
        'enabled' => null,
        'is_default' => null,
        'inserted' => 'date-time',
        'last_updated' => 'date-time',
        'key_name' => null,
        'is_using_key_vault' => null,
        'google_pay_merchant_id' => null,
        'is_google_pay_enabled' => null,
        'is_apple_pay_enabled' => null,
        'merchant' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'merchant_id' => false,
        'processor_name' => false,
        'processor_merchant_id' => true,
        'processor_api_key' => true,
        'enabled' => false,
        'is_default' => false,
        'inserted' => false,
        'last_updated' => false,
        'key_name' => true,
        'is_using_key_vault' => false,
        'google_pay_merchant_id' => true,
        'is_google_pay_enabled' => true,
        'is_apple_pay_enabled' => true,
        'merchant' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'merchant_id' => 'merchantID',
        'processor_name' => 'processorName',
        'processor_merchant_id' => 'processorMerchantID',
        'processor_api_key' => 'processorApiKey',
        'enabled' => 'enabled',
        'is_default' => 'isDefault',
        'inserted' => 'inserted',
        'last_updated' => 'lastUpdated',
        'key_name' => 'keyName',
        'is_using_key_vault' => 'isUsingKeyVault',
        'google_pay_merchant_id' => 'googlePayMerchantID',
        'is_google_pay_enabled' => 'isGooglePayEnabled',
        'is_apple_pay_enabled' => 'isApplePayEnabled',
        'merchant' => 'merchant'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'merchant_id' => 'setMerchantId',
        'processor_name' => 'setProcessorName',
        'processor_merchant_id' => 'setProcessorMerchantId',
        'processor_api_key' => 'setProcessorApiKey',
        'enabled' => 'setEnabled',
        'is_default' => 'setIsDefault',
        'inserted' => 'setInserted',
        'last_updated' => 'setLastUpdated',
        'key_name' => 'setKeyName',
        'is_using_key_vault' => 'setIsUsingKeyVault',
        'google_pay_merchant_id' => 'setGooglePayMerchantId',
        'is_google_pay_enabled' => 'setIsGooglePayEnabled',
        'is_apple_pay_enabled' => 'setIsApplePayEnabled',
        'merchant' => 'setMerchant'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'merchant_id' => 'getMerchantId',
        'processor_name' => 'getProcessorName',
        'processor_merchant_id' => 'getProcessorMerchantId',
        'processor_api_key' => 'getProcessorApiKey',
        'enabled' => 'getEnabled',
        'is_default' => 'getIsDefault',
        'inserted' => 'getInserted',
        'last_updated' => 'getLastUpdated',
        'key_name' => 'getKeyName',
        'is_using_key_vault' => 'getIsUsingKeyVault',
        'google_pay_merchant_id' => 'getGooglePayMerchantId',
        'is_google_pay_enabled' => 'getIsGooglePayEnabled',
        'is_apple_pay_enabled' => 'getIsApplePayEnabled',
        'merchant' => 'getMerchant'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PROCESSOR_NAME_NONE = 'None';
    public const PROCESSOR_NAME_CYBER_SOURCE = 'CyberSource';
    public const PROCESSOR_NAME_CHECKOUT = 'Checkout';
    public const PROCESSOR_NAME_STRIPE = 'Stripe';
    public const PROCESSOR_NAME_MODULR = 'Modulr';
    public const PROCESSOR_NAME_PLAID = 'Plaid';
    public const PROCESSOR_NAME_YAPILY = 'Yapily';
    public const PROCESSOR_NAME_NOFRIXION = 'Nofrixion';
    public const PROCESSOR_NAME_BITCOIN = 'Bitcoin';
    public const PROCESSOR_NAME_BITCOIN_TESTNET = 'BitcoinTestnet';
    public const PROCESSOR_NAME_BANKING_CIRCLE = 'BankingCircle';
    public const PROCESSOR_NAME_BANKING_CIRCLE_AGENCY = 'BankingCircleAgency';
    public const PROCESSOR_NAME_SIMULATOR = 'Simulator';
    public const PROCESSOR_NAME_LIGHTNING = 'Lightning';
    public const PROCESSOR_NAME_LIGHTNING_TESTNET = 'LightningTestnet';
    public const PROCESSOR_NAME_BANKING_CIRCLE_DIRECT_DEBIT = 'BankingCircleDirectDebit';
    public const PROCESSOR_NAME_TRIBE = 'Tribe';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProcessorNameAllowableValues()
    {
        return [
            self::PROCESSOR_NAME_NONE,
            self::PROCESSOR_NAME_CYBER_SOURCE,
            self::PROCESSOR_NAME_CHECKOUT,
            self::PROCESSOR_NAME_STRIPE,
            self::PROCESSOR_NAME_MODULR,
            self::PROCESSOR_NAME_PLAID,
            self::PROCESSOR_NAME_YAPILY,
            self::PROCESSOR_NAME_NOFRIXION,
            self::PROCESSOR_NAME_BITCOIN,
            self::PROCESSOR_NAME_BITCOIN_TESTNET,
            self::PROCESSOR_NAME_BANKING_CIRCLE,
            self::PROCESSOR_NAME_BANKING_CIRCLE_AGENCY,
            self::PROCESSOR_NAME_SIMULATOR,
            self::PROCESSOR_NAME_LIGHTNING,
            self::PROCESSOR_NAME_LIGHTNING_TESTNET,
            self::PROCESSOR_NAME_BANKING_CIRCLE_DIRECT_DEBIT,
            self::PROCESSOR_NAME_TRIBE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('processor_name', $data ?? [], null);
        $this->setIfExists('processor_merchant_id', $data ?? [], null);
        $this->setIfExists('processor_api_key', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('is_default', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('key_name', $data ?? [], null);
        $this->setIfExists('is_using_key_vault', $data ?? [], null);
        $this->setIfExists('google_pay_merchant_id', $data ?? [], null);
        $this->setIfExists('is_google_pay_enabled', $data ?? [], null);
        $this->setIfExists('is_apple_pay_enabled', $data ?? [], null);
        $this->setIfExists('merchant', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProcessorNameAllowableValues();
        if (!is_null($this->container['processor_name']) && !in_array($this->container['processor_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'processor_name', must be one of '%s'",
                $this->container['processor_name'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets processor_name
     *
     * @return string|null
     */
    public function getProcessorName()
    {
        return $this->container['processor_name'];
    }

    /**
     * Sets processor_name
     *
     * @param string|null $processor_name Lists the supported card and PIS processors.
     *
     * @return self
     */
    public function setProcessorName($processor_name)
    {
        if (is_null($processor_name)) {
            throw new \InvalidArgumentException('non-nullable processor_name cannot be null');
        }
        $allowedValues = $this->getProcessorNameAllowableValues();
        if (!in_array($processor_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'processor_name', must be one of '%s'",
                    $processor_name,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['processor_name'] = $processor_name;

        return $this;
    }

    /**
     * Gets processor_merchant_id
     *
     * @return string|null
     */
    public function getProcessorMerchantId()
    {
        return $this->container['processor_merchant_id'];
    }

    /**
     * Sets processor_merchant_id
     *
     * @param string|null $processor_merchant_id processor_merchant_id
     *
     * @return self
     */
    public function setProcessorMerchantId($processor_merchant_id)
    {
        if (is_null($processor_merchant_id)) {
            array_push($this->openAPINullablesSetToNull, 'processor_merchant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('processor_merchant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['processor_merchant_id'] = $processor_merchant_id;

        return $this;
    }

    /**
     * Gets processor_api_key
     *
     * @return string|null
     */
    public function getProcessorApiKey()
    {
        return $this->container['processor_api_key'];
    }

    /**
     * Sets processor_api_key
     *
     * @param string|null $processor_api_key processor_api_key
     *
     * @return self
     */
    public function setProcessorApiKey($processor_api_key)
    {
        if (is_null($processor_api_key)) {
            array_push($this->openAPINullablesSetToNull, 'processor_api_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('processor_api_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['processor_api_key'] = $processor_api_key;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool|null
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool|null $is_default is_default
     *
     * @return self
     */
    public function setIsDefault($is_default)
    {
        if (is_null($is_default)) {
            throw new \InvalidArgumentException('non-nullable is_default cannot be null');
        }
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted inserted
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets key_name
     *
     * @return string|null
     */
    public function getKeyName()
    {
        return $this->container['key_name'];
    }

    /**
     * Sets key_name
     *
     * @param string|null $key_name key_name
     *
     * @return self
     */
    public function setKeyName($key_name)
    {
        if (is_null($key_name)) {
            array_push($this->openAPINullablesSetToNull, 'key_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('key_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['key_name'] = $key_name;

        return $this;
    }

    /**
     * Gets is_using_key_vault
     *
     * @return bool|null
     */
    public function getIsUsingKeyVault()
    {
        return $this->container['is_using_key_vault'];
    }

    /**
     * Sets is_using_key_vault
     *
     * @param bool|null $is_using_key_vault is_using_key_vault
     *
     * @return self
     */
    public function setIsUsingKeyVault($is_using_key_vault)
    {
        if (is_null($is_using_key_vault)) {
            throw new \InvalidArgumentException('non-nullable is_using_key_vault cannot be null');
        }
        $this->container['is_using_key_vault'] = $is_using_key_vault;

        return $this;
    }

    /**
     * Gets google_pay_merchant_id
     *
     * @return string|null
     */
    public function getGooglePayMerchantId()
    {
        return $this->container['google_pay_merchant_id'];
    }

    /**
     * Sets google_pay_merchant_id
     *
     * @param string|null $google_pay_merchant_id google_pay_merchant_id
     *
     * @return self
     */
    public function setGooglePayMerchantId($google_pay_merchant_id)
    {
        if (is_null($google_pay_merchant_id)) {
            array_push($this->openAPINullablesSetToNull, 'google_pay_merchant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('google_pay_merchant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['google_pay_merchant_id'] = $google_pay_merchant_id;

        return $this;
    }

    /**
     * Gets is_google_pay_enabled
     *
     * @return bool|null
     */
    public function getIsGooglePayEnabled()
    {
        return $this->container['is_google_pay_enabled'];
    }

    /**
     * Sets is_google_pay_enabled
     *
     * @param bool|null $is_google_pay_enabled is_google_pay_enabled
     *
     * @return self
     */
    public function setIsGooglePayEnabled($is_google_pay_enabled)
    {
        if (is_null($is_google_pay_enabled)) {
            array_push($this->openAPINullablesSetToNull, 'is_google_pay_enabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_google_pay_enabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_google_pay_enabled'] = $is_google_pay_enabled;

        return $this;
    }

    /**
     * Gets is_apple_pay_enabled
     *
     * @return bool|null
     */
    public function getIsApplePayEnabled()
    {
        return $this->container['is_apple_pay_enabled'];
    }

    /**
     * Sets is_apple_pay_enabled
     *
     * @param bool|null $is_apple_pay_enabled is_apple_pay_enabled
     *
     * @return self
     */
    public function setIsApplePayEnabled($is_apple_pay_enabled)
    {
        if (is_null($is_apple_pay_enabled)) {
            array_push($this->openAPINullablesSetToNull, 'is_apple_pay_enabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_apple_pay_enabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_apple_pay_enabled'] = $is_apple_pay_enabled;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity|null
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity|null $merchant merchant
     *
     * @return self
     */
    public function setMerchant($merchant)
    {
        if (is_null($merchant)) {
            throw new \InvalidArgumentException('non-nullable merchant cannot be null');
        }
        $this->container['merchant'] = $merchant;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


