<?php
/**
 * NoFrixionMoneyMoovModelsSweepAction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionMoneyMoovModelsSweepAction Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionMoneyMoovModelsSweepAction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.MoneyMoov.Models.SweepAction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'destinations' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsSweepDestination[]',
        'amount_to_leave' => 'float',
        'minimum_amount_to_run_at' => 'float',
        'payout_your_reference' => 'string',
        'payout_their_reference' => 'string',
        'payout_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'destinations' => null,
        'amount_to_leave' => 'double',
        'minimum_amount_to_run_at' => 'double',
        'payout_your_reference' => null,
        'payout_their_reference' => null,
        'payout_description' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'destinations' => true,
        'amount_to_leave' => false,
        'minimum_amount_to_run_at' => false,
        'payout_your_reference' => true,
        'payout_their_reference' => true,
        'payout_description' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'destinations' => 'destinations',
        'amount_to_leave' => 'amountToLeave',
        'minimum_amount_to_run_at' => 'minimumAmountToRunAt',
        'payout_your_reference' => 'payoutYourReference',
        'payout_their_reference' => 'payoutTheirReference',
        'payout_description' => 'payoutDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'destinations' => 'setDestinations',
        'amount_to_leave' => 'setAmountToLeave',
        'minimum_amount_to_run_at' => 'setMinimumAmountToRunAt',
        'payout_your_reference' => 'setPayoutYourReference',
        'payout_their_reference' => 'setPayoutTheirReference',
        'payout_description' => 'setPayoutDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'destinations' => 'getDestinations',
        'amount_to_leave' => 'getAmountToLeave',
        'minimum_amount_to_run_at' => 'getMinimumAmountToRunAt',
        'payout_your_reference' => 'getPayoutYourReference',
        'payout_their_reference' => 'getPayoutTheirReference',
        'payout_description' => 'getPayoutDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('destinations', $data ?? [], null);
        $this->setIfExists('amount_to_leave', $data ?? [], null);
        $this->setIfExists('minimum_amount_to_run_at', $data ?? [], null);
        $this->setIfExists('payout_your_reference', $data ?? [], null);
        $this->setIfExists('payout_their_reference', $data ?? [], null);
        $this->setIfExists('payout_description', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets destinations
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsSweepDestination[]|null
     */
    public function getDestinations()
    {
        return $this->container['destinations'];
    }

    /**
     * Sets destinations
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsSweepDestination[]|null $destinations destinations
     *
     * @return self
     */
    public function setDestinations($destinations)
    {
        if (is_null($destinations)) {
            array_push($this->openAPINullablesSetToNull, 'destinations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('destinations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['destinations'] = $destinations;

        return $this;
    }

    /**
     * Gets amount_to_leave
     *
     * @return float|null
     */
    public function getAmountToLeave()
    {
        return $this->container['amount_to_leave'];
    }

    /**
     * Sets amount_to_leave
     *
     * @param float|null $amount_to_leave The amount to leave in the account once the sweep has been processed.  A value of zero means sweep all funds.
     *
     * @return self
     */
    public function setAmountToLeave($amount_to_leave)
    {
        if (is_null($amount_to_leave)) {
            throw new \InvalidArgumentException('non-nullable amount_to_leave cannot be null');
        }
        $this->container['amount_to_leave'] = $amount_to_leave;

        return $this;
    }

    /**
     * Gets minimum_amount_to_run_at
     *
     * @return float|null
     */
    public function getMinimumAmountToRunAt()
    {
        return $this->container['minimum_amount_to_run_at'];
    }

    /**
     * Sets minimum_amount_to_run_at
     *
     * @param float|null $minimum_amount_to_run_at The minimum amount that must be available in order for the sweep to be run.  For example, setting to 1000 means the rule will not execute if the funds  available are less than 1000.
     *
     * @return self
     */
    public function setMinimumAmountToRunAt($minimum_amount_to_run_at)
    {
        if (is_null($minimum_amount_to_run_at)) {
            throw new \InvalidArgumentException('non-nullable minimum_amount_to_run_at cannot be null');
        }
        $this->container['minimum_amount_to_run_at'] = $minimum_amount_to_run_at;

        return $this;
    }

    /**
     * Gets payout_your_reference
     *
     * @return string|null
     */
    public function getPayoutYourReference()
    {
        return $this->container['payout_your_reference'];
    }

    /**
     * Sets payout_your_reference
     *
     * @param string|null $payout_your_reference The pattern to use for the Your Reference value when creating payouts based on the rule.
     *
     * @return self
     */
    public function setPayoutYourReference($payout_your_reference)
    {
        if (is_null($payout_your_reference)) {
            array_push($this->openAPINullablesSetToNull, 'payout_your_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payout_your_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payout_your_reference'] = $payout_your_reference;

        return $this;
    }

    /**
     * Gets payout_their_reference
     *
     * @return string|null
     */
    public function getPayoutTheirReference()
    {
        return $this->container['payout_their_reference'];
    }

    /**
     * Sets payout_their_reference
     *
     * @param string|null $payout_their_reference The pattern to use for the Their Reference value when creating payouts based on the rule.
     *
     * @return self
     */
    public function setPayoutTheirReference($payout_their_reference)
    {
        if (is_null($payout_their_reference)) {
            array_push($this->openAPINullablesSetToNull, 'payout_their_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payout_their_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payout_their_reference'] = $payout_their_reference;

        return $this;
    }

    /**
     * Gets payout_description
     *
     * @return string|null
     */
    public function getPayoutDescription()
    {
        return $this->container['payout_description'];
    }

    /**
     * Sets payout_description
     *
     * @param string|null $payout_description The pattern to use for the Description value when creating payouts based on the rule.
     *
     * @return self
     */
    public function setPayoutDescription($payout_description)
    {
        if (is_null($payout_description)) {
            array_push($this->openAPINullablesSetToNull, 'payout_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payout_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payout_description'] = $payout_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


