<?php
/**
 * NoFrixionMoneyMoovModelsMandatesMandateCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionMoneyMoovModelsMandatesMandateCreate Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionMoneyMoovModelsMandatesMandateCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.MoneyMoov.Models.Mandates.MandateCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchant_id' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'postal_code' => 'string',
        'city' => 'string',
        'country_code' => 'string',
        'iban' => 'string',
        'account_number' => 'string',
        'sort_code' => 'string',
        'email_address' => 'string',
        'reference' => 'string',
        'is_recurring' => 'bool',
        'currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'merchant_id' => 'uuid',
        'first_name' => null,
        'last_name' => null,
        'address_line1' => null,
        'address_line2' => null,
        'postal_code' => null,
        'city' => null,
        'country_code' => null,
        'iban' => null,
        'account_number' => null,
        'sort_code' => null,
        'email_address' => 'email',
        'reference' => null,
        'is_recurring' => null,
        'currency' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'merchant_id' => false,
        'first_name' => false,
        'last_name' => false,
        'address_line1' => false,
        'address_line2' => true,
        'postal_code' => false,
        'city' => false,
        'country_code' => false,
        'iban' => true,
        'account_number' => true,
        'sort_code' => true,
        'email_address' => false,
        'reference' => true,
        'is_recurring' => true,
        'currency' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_id' => 'merchantID',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'postal_code' => 'postalCode',
        'city' => 'city',
        'country_code' => 'countryCode',
        'iban' => 'iban',
        'account_number' => 'accountNumber',
        'sort_code' => 'sortCode',
        'email_address' => 'emailAddress',
        'reference' => 'reference',
        'is_recurring' => 'isRecurring',
        'currency' => 'currency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_id' => 'setMerchantId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'postal_code' => 'setPostalCode',
        'city' => 'setCity',
        'country_code' => 'setCountryCode',
        'iban' => 'setIban',
        'account_number' => 'setAccountNumber',
        'sort_code' => 'setSortCode',
        'email_address' => 'setEmailAddress',
        'reference' => 'setReference',
        'is_recurring' => 'setIsRecurring',
        'currency' => 'setCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_id' => 'getMerchantId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'postal_code' => 'getPostalCode',
        'city' => 'getCity',
        'country_code' => 'getCountryCode',
        'iban' => 'getIban',
        'account_number' => 'getAccountNumber',
        'sort_code' => 'getSortCode',
        'email_address' => 'getEmailAddress',
        'reference' => 'getReference',
        'is_recurring' => 'getIsRecurring',
        'currency' => 'getCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CURRENCY_NONE = 'NONE';
    public const CURRENCY_GBP = 'GBP';
    public const CURRENCY_EUR = 'EUR';
    public const CURRENCY_BTC = 'BTC';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_NONE,
            self::CURRENCY_GBP,
            self::CURRENCY_EUR,
            self::CURRENCY_BTC,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('address_line1', $data ?? [], null);
        $this->setIfExists('address_line2', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('country_code', $data ?? [], null);
        $this->setIfExists('iban', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('sort_code', $data ?? [], null);
        $this->setIfExists('email_address', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('is_recurring', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((mb_strlen($this->container['first_name']) > 256)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 256.";
        }

        if ((mb_strlen($this->container['first_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[a-zA-Z0-9\\-,'. ]+$/", $this->container['first_name'])) {
            $invalidProperties[] = "invalid value for 'first_name', must be conform to the pattern /^[a-zA-Z0-9\\-,'. ]+$/.";
        }

        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ((mb_strlen($this->container['last_name']) > 256)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 256.";
        }

        if ((mb_strlen($this->container['last_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[a-zA-Z0-9\\-,'. ]+$/", $this->container['last_name'])) {
            $invalidProperties[] = "invalid value for 'last_name', must be conform to the pattern /^[a-zA-Z0-9\\-,'. ]+$/.";
        }

        if ($this->container['address_line1'] === null) {
            $invalidProperties[] = "'address_line1' can't be null";
        }
        if ((mb_strlen($this->container['address_line1']) > 100)) {
            $invalidProperties[] = "invalid value for 'address_line1', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['address_line1']) < 1)) {
            $invalidProperties[] = "invalid value for 'address_line1', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[a-zA-Z0-9\\-,'.\/ ]+$/", $this->container['address_line1'])) {
            $invalidProperties[] = "invalid value for 'address_line1', must be conform to the pattern /^[a-zA-Z0-9\\-,'.\/ ]+$/.";
        }

        if (!is_null($this->container['address_line2']) && (mb_strlen($this->container['address_line2']) > 100)) {
            $invalidProperties[] = "invalid value for 'address_line2', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['address_line2']) && !preg_match("/^[a-zA-Z0-9\\-,'.\/ ]+$/", $this->container['address_line2'])) {
            $invalidProperties[] = "invalid value for 'address_line2', must be conform to the pattern /^[a-zA-Z0-9\\-,'.\/ ]+$/.";
        }

        if ($this->container['postal_code'] === null) {
            $invalidProperties[] = "'postal_code' can't be null";
        }
        if ((mb_strlen($this->container['postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['postal_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[a-zA-Z0-9\\-,. \/]+$/", $this->container['postal_code'])) {
            $invalidProperties[] = "invalid value for 'postal_code', must be conform to the pattern /^[a-zA-Z0-9\\-,. \/]+$/.";
        }

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ((mb_strlen($this->container['city']) > 128)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 128.";
        }

        if ((mb_strlen($this->container['city']) < 1)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[a-zA-Z0-9\\-,'. ]+$/", $this->container['city'])) {
            $invalidProperties[] = "invalid value for 'city', must be conform to the pattern /^[a-zA-Z0-9\\-,'. ]+$/.";
        }

        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        if ((mb_strlen($this->container['country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['country_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['iban']) && (mb_strlen($this->container['iban']) > 34)) {
            $invalidProperties[] = "invalid value for 'iban', the character length must be smaller than or equal to 34.";
        }

        if (!is_null($this->container['account_number']) && (mb_strlen($this->container['account_number']) > 8)) {
            $invalidProperties[] = "invalid value for 'account_number', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['account_number']) && !preg_match("/^[0-9]*$/", $this->container['account_number'])) {
            $invalidProperties[] = "invalid value for 'account_number', must be conform to the pattern /^[0-9]*$/.";
        }

        if (!is_null($this->container['sort_code']) && (mb_strlen($this->container['sort_code']) > 6)) {
            $invalidProperties[] = "invalid value for 'sort_code', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['sort_code']) && !preg_match("/^[0-9\\-]*$/", $this->container['sort_code'])) {
            $invalidProperties[] = "invalid value for 'sort_code', must be conform to the pattern /^[0-9\\-]*$/.";
        }

        if ($this->container['email_address'] === null) {
            $invalidProperties[] = "'email_address' can't be null";
        }
        if ((mb_strlen($this->container['email_address']) < 1)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) > 128)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 128.";
        }

        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id Merchant ID that this mandate is associated with.
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name Customer's first name.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        if ((mb_strlen($first_name) > 256)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($first_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9\\-,'. ]+$/", ObjectSerializer::toString($first_name)))) {
            throw new \InvalidArgumentException("invalid value for \$first_name when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must conform to the pattern /^[a-zA-Z0-9\\-,'. ]+$/.");
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Customer's last name.
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        if ((mb_strlen($last_name) > 256)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($last_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9\\-,'. ]+$/", ObjectSerializer::toString($last_name)))) {
            throw new \InvalidArgumentException("invalid value for \$last_name when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must conform to the pattern /^[a-zA-Z0-9\\-,'. ]+$/.");
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string $address_line1 First line of the customer's address.
     *
     * @return self
     */
    public function setAddressLine1($address_line1)
    {
        if (is_null($address_line1)) {
            throw new \InvalidArgumentException('non-nullable address_line1 cannot be null');
        }
        if ((mb_strlen($address_line1) > 100)) {
            throw new \InvalidArgumentException('invalid length for $address_line1 when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($address_line1) < 1)) {
            throw new \InvalidArgumentException('invalid length for $address_line1 when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9\\-,'.\/ ]+$/", ObjectSerializer::toString($address_line1)))) {
            throw new \InvalidArgumentException("invalid value for \$address_line1 when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must conform to the pattern /^[a-zA-Z0-9\\-,'.\/ ]+$/.");
        }

        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string|null $address_line2 Second line of the customer's address. Optional.
     *
     * @return self
     */
    public function setAddressLine2($address_line2)
    {
        if (is_null($address_line2)) {
            array_push($this->openAPINullablesSetToNull, 'address_line2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_line2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($address_line2) && (mb_strlen($address_line2) > 100)) {
            throw new \InvalidArgumentException('invalid length for $address_line2 when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must be smaller than or equal to 100.');
        }
        if (!is_null($address_line2) && (!preg_match("/^[a-zA-Z0-9\\-,'.\/ ]+$/", ObjectSerializer::toString($address_line2)))) {
            throw new \InvalidArgumentException("invalid value for \$address_line2 when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must conform to the pattern /^[a-zA-Z0-9\\-,'.\/ ]+$/.");
        }

        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code Customer's postal code.
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            throw new \InvalidArgumentException('non-nullable postal_code cannot be null');
        }
        if ((mb_strlen($postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($postal_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9\\-,. \/]+$/", ObjectSerializer::toString($postal_code)))) {
            throw new \InvalidArgumentException("invalid value for \$postal_code when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must conform to the pattern /^[a-zA-Z0-9\\-,. \/]+$/.");
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city Customer's city.
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        if ((mb_strlen($city) > 128)) {
            throw new \InvalidArgumentException('invalid length for $city when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must be smaller than or equal to 128.');
        }
        if ((mb_strlen($city) < 1)) {
            throw new \InvalidArgumentException('invalid length for $city when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9\\-,'. ]+$/", ObjectSerializer::toString($city)))) {
            throw new \InvalidArgumentException("invalid value for \$city when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must conform to the pattern /^[a-zA-Z0-9\\-,'. ]+$/.");
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code 2-character country code of the customer's bank account.
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (is_null($country_code)) {
            throw new \InvalidArgumentException('non-nullable country_code cannot be null');
        }
        if ((mb_strlen($country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($country_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must be bigger than or equal to 1.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string|null
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string|null $iban IBAN of the customer's bank account in case of EUR account.
     *
     * @return self
     */
    public function setIban($iban)
    {
        if (is_null($iban)) {
            array_push($this->openAPINullablesSetToNull, 'iban');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('iban', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($iban) && (mb_strlen($iban) > 34)) {
            throw new \InvalidArgumentException('invalid length for $iban when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must be smaller than or equal to 34.');
        }

        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number Account number of the customer's bank account in case of GBP account.
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            array_push($this->openAPINullablesSetToNull, 'account_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($account_number) && (mb_strlen($account_number) > 8)) {
            throw new \InvalidArgumentException('invalid length for $account_number when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must be smaller than or equal to 8.');
        }
        if (!is_null($account_number) && (!preg_match("/^[0-9]*$/", ObjectSerializer::toString($account_number)))) {
            throw new \InvalidArgumentException("invalid value for \$account_number when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must conform to the pattern /^[0-9]*$/.");
        }

        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets sort_code
     *
     * @return string|null
     */
    public function getSortCode()
    {
        return $this->container['sort_code'];
    }

    /**
     * Sets sort_code
     *
     * @param string|null $sort_code Sort code of the customer's bank account in case of GBP account.
     *
     * @return self
     */
    public function setSortCode($sort_code)
    {
        if (is_null($sort_code)) {
            array_push($this->openAPINullablesSetToNull, 'sort_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sort_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sort_code) && (mb_strlen($sort_code) > 6)) {
            throw new \InvalidArgumentException('invalid length for $sort_code when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must be smaller than or equal to 6.');
        }
        if (!is_null($sort_code) && (!preg_match("/^[0-9\\-]*$/", ObjectSerializer::toString($sort_code)))) {
            throw new \InvalidArgumentException("invalid value for \$sort_code when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must conform to the pattern /^[0-9\\-]*$/.");
        }

        $this->container['sort_code'] = $sort_code;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address Customer's email address.
     *
     * @return self
     */
    public function setEmailAddress($email_address)
    {
        if (is_null($email_address)) {
            throw new \InvalidArgumentException('non-nullable email_address cannot be null');
        }

        if ((mb_strlen($email_address) < 1)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must be bigger than or equal to 1.');
        }

        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Field that you can use as reference.
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            array_push($this->openAPINullablesSetToNull, 'reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference) && (mb_strlen($reference) > 128)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling NoFrixionMoneyMoovModelsMandatesMandateCreate., must be smaller than or equal to 128.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets is_recurring
     *
     * @return bool|null
     */
    public function getIsRecurring()
    {
        return $this->container['is_recurring'];
    }

    /**
     * Sets is_recurring
     *
     * @param bool|null $is_recurring Indicates whether this mandate is single-use or recurring.
     *
     * @return self
     */
    public function setIsRecurring($is_recurring)
    {
        if (is_null($is_recurring)) {
            array_push($this->openAPINullablesSetToNull, 'is_recurring');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_recurring', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_recurring'] = $is_recurring;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency of the mandate.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


