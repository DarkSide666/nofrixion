<?php
/**
 * NoFrixionDataAccessDataModelsPayrunEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionDataAccessDataModelsPayrunEntity Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionDataAccessDataModelsPayrunEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.DataAccess.DataModels.PayrunEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user_id' => 'string',
        'id' => 'string',
        'batch_payout_id' => 'string',
        'merchant_id' => 'string',
        'name' => 'string',
        'scheduled_date' => '\DateTime',
        'status' => 'string',
        'inserted' => '\DateTime',
        'last_updated' => '\DateTime',
        'current_state' => 'string',
        'correlation_id' => 'string',
        'scheduled_id' => 'string',
        'payouts_to_create' => 'string[]',
        'created_payouts' => 'string[]',
        'timestamp' => 'string',
        'user' => '\Nofrixion\Client\Model\NoFrixionDataModelsUserEntity',
        'is_archived' => 'bool',
        'can_edit' => 'bool',
        'can_delete' => 'bool',
        'merchant' => '\Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity',
        'invoices' => '\Nofrixion\Client\Model\NoFrixionDataAccessDataModelsInvoiceEntity[]',
        'payrun_source_accounts' => '\Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunSourceAccountEntity[]',
        'payouts' => '\Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity[]',
        'events' => '\Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunEventEntity[]',
        'payment_requests' => '\Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestEntity[]',
        'topup_payouts' => '\Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user_id' => 'uuid',
        'id' => 'uuid',
        'batch_payout_id' => 'uuid',
        'merchant_id' => 'uuid',
        'name' => null,
        'scheduled_date' => 'date-time',
        'status' => null,
        'inserted' => 'date-time',
        'last_updated' => 'date-time',
        'current_state' => null,
        'correlation_id' => 'uuid',
        'scheduled_id' => 'uuid',
        'payouts_to_create' => 'uuid',
        'created_payouts' => 'uuid',
        'timestamp' => 'byte',
        'user' => null,
        'is_archived' => null,
        'can_edit' => null,
        'can_delete' => null,
        'merchant' => null,
        'invoices' => null,
        'payrun_source_accounts' => null,
        'payouts' => null,
        'events' => null,
        'payment_requests' => null,
        'topup_payouts' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'user_id' => true,
        'id' => false,
        'batch_payout_id' => true,
        'merchant_id' => false,
        'name' => true,
        'scheduled_date' => true,
        'status' => false,
        'inserted' => false,
        'last_updated' => false,
        'current_state' => true,
        'correlation_id' => false,
        'scheduled_id' => true,
        'payouts_to_create' => true,
        'created_payouts' => true,
        'timestamp' => true,
        'user' => false,
        'is_archived' => false,
        'can_edit' => false,
        'can_delete' => false,
        'merchant' => false,
        'invoices' => true,
        'payrun_source_accounts' => true,
        'payouts' => true,
        'events' => true,
        'payment_requests' => true,
        'topup_payouts' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_id' => 'userID',
        'id' => 'id',
        'batch_payout_id' => 'batchPayoutID',
        'merchant_id' => 'merchantID',
        'name' => 'name',
        'scheduled_date' => 'scheduledDate',
        'status' => 'status',
        'inserted' => 'inserted',
        'last_updated' => 'lastUpdated',
        'current_state' => 'currentState',
        'correlation_id' => 'correlationId',
        'scheduled_id' => 'scheduledId',
        'payouts_to_create' => 'payoutsToCreate',
        'created_payouts' => 'createdPayouts',
        'timestamp' => 'timestamp',
        'user' => 'user',
        'is_archived' => 'isArchived',
        'can_edit' => 'canEdit',
        'can_delete' => 'canDelete',
        'merchant' => 'merchant',
        'invoices' => 'invoices',
        'payrun_source_accounts' => 'payrunSourceAccounts',
        'payouts' => 'payouts',
        'events' => 'events',
        'payment_requests' => 'paymentRequests',
        'topup_payouts' => 'topupPayouts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_id' => 'setUserId',
        'id' => 'setId',
        'batch_payout_id' => 'setBatchPayoutId',
        'merchant_id' => 'setMerchantId',
        'name' => 'setName',
        'scheduled_date' => 'setScheduledDate',
        'status' => 'setStatus',
        'inserted' => 'setInserted',
        'last_updated' => 'setLastUpdated',
        'current_state' => 'setCurrentState',
        'correlation_id' => 'setCorrelationId',
        'scheduled_id' => 'setScheduledId',
        'payouts_to_create' => 'setPayoutsToCreate',
        'created_payouts' => 'setCreatedPayouts',
        'timestamp' => 'setTimestamp',
        'user' => 'setUser',
        'is_archived' => 'setIsArchived',
        'can_edit' => 'setCanEdit',
        'can_delete' => 'setCanDelete',
        'merchant' => 'setMerchant',
        'invoices' => 'setInvoices',
        'payrun_source_accounts' => 'setPayrunSourceAccounts',
        'payouts' => 'setPayouts',
        'events' => 'setEvents',
        'payment_requests' => 'setPaymentRequests',
        'topup_payouts' => 'setTopupPayouts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_id' => 'getUserId',
        'id' => 'getId',
        'batch_payout_id' => 'getBatchPayoutId',
        'merchant_id' => 'getMerchantId',
        'name' => 'getName',
        'scheduled_date' => 'getScheduledDate',
        'status' => 'getStatus',
        'inserted' => 'getInserted',
        'last_updated' => 'getLastUpdated',
        'current_state' => 'getCurrentState',
        'correlation_id' => 'getCorrelationId',
        'scheduled_id' => 'getScheduledId',
        'payouts_to_create' => 'getPayoutsToCreate',
        'created_payouts' => 'getCreatedPayouts',
        'timestamp' => 'getTimestamp',
        'user' => 'getUser',
        'is_archived' => 'getIsArchived',
        'can_edit' => 'getCanEdit',
        'can_delete' => 'getCanDelete',
        'merchant' => 'getMerchant',
        'invoices' => 'getInvoices',
        'payrun_source_accounts' => 'getPayrunSourceAccounts',
        'payouts' => 'getPayouts',
        'events' => 'getEvents',
        'payment_requests' => 'getPaymentRequests',
        'topup_payouts' => 'getTopupPayouts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_NONE = 'None';
    public const STATUS_DRAFT = 'Draft';
    public const STATUS_SUBMITTED = 'Submitted';
    public const STATUS_COMPLETED = 'Completed';
    public const STATUS_REJECTED = 'Rejected';
    public const STATUS_AUTHORISATION_PENDING = 'AuthorisationPending';
    public const STATUS_PAYOUTS_CREATED = 'PayoutsCreated';
    public const STATUS_QUEUED = 'Queued';
    public const STATUS_APPROVING = 'Approving';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_NONE,
            self::STATUS_DRAFT,
            self::STATUS_SUBMITTED,
            self::STATUS_COMPLETED,
            self::STATUS_REJECTED,
            self::STATUS_AUTHORISATION_PENDING,
            self::STATUS_PAYOUTS_CREATED,
            self::STATUS_QUEUED,
            self::STATUS_APPROVING,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('batch_payout_id', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('scheduled_date', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('current_state', $data ?? [], null);
        $this->setIfExists('correlation_id', $data ?? [], null);
        $this->setIfExists('scheduled_id', $data ?? [], null);
        $this->setIfExists('payouts_to_create', $data ?? [], null);
        $this->setIfExists('created_payouts', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('is_archived', $data ?? [], null);
        $this->setIfExists('can_edit', $data ?? [], null);
        $this->setIfExists('can_delete', $data ?? [], null);
        $this->setIfExists('merchant', $data ?? [], null);
        $this->setIfExists('invoices', $data ?? [], null);
        $this->setIfExists('payrun_source_accounts', $data ?? [], null);
        $this->setIfExists('payouts', $data ?? [], null);
        $this->setIfExists('events', $data ?? [], null);
        $this->setIfExists('payment_requests', $data ?? [], null);
        $this->setIfExists('topup_payouts', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets batch_payout_id
     *
     * @return string|null
     */
    public function getBatchPayoutId()
    {
        return $this->container['batch_payout_id'];
    }

    /**
     * Sets batch_payout_id
     *
     * @param string|null $batch_payout_id batch_payout_id
     *
     * @return self
     */
    public function setBatchPayoutId($batch_payout_id)
    {
        if (is_null($batch_payout_id)) {
            array_push($this->openAPINullablesSetToNull, 'batch_payout_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('batch_payout_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['batch_payout_id'] = $batch_payout_id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets scheduled_date
     *
     * @return \DateTime|null
     */
    public function getScheduledDate()
    {
        return $this->container['scheduled_date'];
    }

    /**
     * Sets scheduled_date
     *
     * @param \DateTime|null $scheduled_date scheduled_date
     *
     * @return self
     */
    public function setScheduledDate($scheduled_date)
    {
        if (is_null($scheduled_date)) {
            array_push($this->openAPINullablesSetToNull, 'scheduled_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scheduled_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scheduled_date'] = $scheduled_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted inserted
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets current_state
     *
     * @return string|null
     */
    public function getCurrentState()
    {
        return $this->container['current_state'];
    }

    /**
     * Sets current_state
     *
     * @param string|null $current_state current_state
     *
     * @return self
     */
    public function setCurrentState($current_state)
    {
        if (is_null($current_state)) {
            array_push($this->openAPINullablesSetToNull, 'current_state');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('current_state', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['current_state'] = $current_state;

        return $this;
    }

    /**
     * Gets correlation_id
     *
     * @return string|null
     */
    public function getCorrelationId()
    {
        return $this->container['correlation_id'];
    }

    /**
     * Sets correlation_id
     *
     * @param string|null $correlation_id correlation_id
     *
     * @return self
     */
    public function setCorrelationId($correlation_id)
    {
        if (is_null($correlation_id)) {
            throw new \InvalidArgumentException('non-nullable correlation_id cannot be null');
        }
        $this->container['correlation_id'] = $correlation_id;

        return $this;
    }

    /**
     * Gets scheduled_id
     *
     * @return string|null
     */
    public function getScheduledId()
    {
        return $this->container['scheduled_id'];
    }

    /**
     * Sets scheduled_id
     *
     * @param string|null $scheduled_id scheduled_id
     *
     * @return self
     */
    public function setScheduledId($scheduled_id)
    {
        if (is_null($scheduled_id)) {
            array_push($this->openAPINullablesSetToNull, 'scheduled_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scheduled_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scheduled_id'] = $scheduled_id;

        return $this;
    }

    /**
     * Gets payouts_to_create
     *
     * @return string[]|null
     */
    public function getPayoutsToCreate()
    {
        return $this->container['payouts_to_create'];
    }

    /**
     * Sets payouts_to_create
     *
     * @param string[]|null $payouts_to_create payouts_to_create
     *
     * @return self
     */
    public function setPayoutsToCreate($payouts_to_create)
    {
        if (is_null($payouts_to_create)) {
            array_push($this->openAPINullablesSetToNull, 'payouts_to_create');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payouts_to_create', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payouts_to_create'] = $payouts_to_create;

        return $this;
    }

    /**
     * Gets created_payouts
     *
     * @return string[]|null
     */
    public function getCreatedPayouts()
    {
        return $this->container['created_payouts'];
    }

    /**
     * Sets created_payouts
     *
     * @param string[]|null $created_payouts created_payouts
     *
     * @return self
     */
    public function setCreatedPayouts($created_payouts)
    {
        if (is_null($created_payouts)) {
            array_push($this->openAPINullablesSetToNull, 'created_payouts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_payouts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_payouts'] = $created_payouts;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsUserEntity|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsUserEntity|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets is_archived
     *
     * @return bool|null
     */
    public function getIsArchived()
    {
        return $this->container['is_archived'];
    }

    /**
     * Sets is_archived
     *
     * @param bool|null $is_archived is_archived
     *
     * @return self
     */
    public function setIsArchived($is_archived)
    {
        if (is_null($is_archived)) {
            throw new \InvalidArgumentException('non-nullable is_archived cannot be null');
        }
        $this->container['is_archived'] = $is_archived;

        return $this;
    }

    /**
     * Gets can_edit
     *
     * @return bool|null
     */
    public function getCanEdit()
    {
        return $this->container['can_edit'];
    }

    /**
     * Sets can_edit
     *
     * @param bool|null $can_edit can_edit
     *
     * @return self
     */
    public function setCanEdit($can_edit)
    {
        if (is_null($can_edit)) {
            throw new \InvalidArgumentException('non-nullable can_edit cannot be null');
        }
        $this->container['can_edit'] = $can_edit;

        return $this;
    }

    /**
     * Gets can_delete
     *
     * @return bool|null
     */
    public function getCanDelete()
    {
        return $this->container['can_delete'];
    }

    /**
     * Sets can_delete
     *
     * @param bool|null $can_delete can_delete
     *
     * @return self
     */
    public function setCanDelete($can_delete)
    {
        if (is_null($can_delete)) {
            throw new \InvalidArgumentException('non-nullable can_delete cannot be null');
        }
        $this->container['can_delete'] = $can_delete;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity|null
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity|null $merchant merchant
     *
     * @return self
     */
    public function setMerchant($merchant)
    {
        if (is_null($merchant)) {
            throw new \InvalidArgumentException('non-nullable merchant cannot be null');
        }
        $this->container['merchant'] = $merchant;

        return $this;
    }

    /**
     * Gets invoices
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsInvoiceEntity[]|null
     */
    public function getInvoices()
    {
        return $this->container['invoices'];
    }

    /**
     * Sets invoices
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsInvoiceEntity[]|null $invoices invoices
     *
     * @return self
     */
    public function setInvoices($invoices)
    {
        if (is_null($invoices)) {
            array_push($this->openAPINullablesSetToNull, 'invoices');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoices', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoices'] = $invoices;

        return $this;
    }

    /**
     * Gets payrun_source_accounts
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunSourceAccountEntity[]|null
     */
    public function getPayrunSourceAccounts()
    {
        return $this->container['payrun_source_accounts'];
    }

    /**
     * Sets payrun_source_accounts
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunSourceAccountEntity[]|null $payrun_source_accounts payrun_source_accounts
     *
     * @return self
     */
    public function setPayrunSourceAccounts($payrun_source_accounts)
    {
        if (is_null($payrun_source_accounts)) {
            array_push($this->openAPINullablesSetToNull, 'payrun_source_accounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payrun_source_accounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payrun_source_accounts'] = $payrun_source_accounts;

        return $this;
    }

    /**
     * Gets payouts
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity[]|null
     */
    public function getPayouts()
    {
        return $this->container['payouts'];
    }

    /**
     * Sets payouts
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity[]|null $payouts payouts
     *
     * @return self
     */
    public function setPayouts($payouts)
    {
        if (is_null($payouts)) {
            array_push($this->openAPINullablesSetToNull, 'payouts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payouts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payouts'] = $payouts;

        return $this;
    }

    /**
     * Gets events
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunEventEntity[]|null
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunEventEntity[]|null $events events
     *
     * @return self
     */
    public function setEvents($events)
    {
        if (is_null($events)) {
            array_push($this->openAPINullablesSetToNull, 'events');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('events', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets payment_requests
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestEntity[]|null
     */
    public function getPaymentRequests()
    {
        return $this->container['payment_requests'];
    }

    /**
     * Sets payment_requests
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestEntity[]|null $payment_requests payment_requests
     *
     * @return self
     */
    public function setPaymentRequests($payment_requests)
    {
        if (is_null($payment_requests)) {
            array_push($this->openAPINullablesSetToNull, 'payment_requests');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_requests', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_requests'] = $payment_requests;

        return $this;
    }

    /**
     * Gets topup_payouts
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity[]|null
     */
    public function getTopupPayouts()
    {
        return $this->container['topup_payouts'];
    }

    /**
     * Sets topup_payouts
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity[]|null $topup_payouts topup_payouts
     *
     * @return self
     */
    public function setTopupPayouts($topup_payouts)
    {
        if (is_null($topup_payouts)) {
            array_push($this->openAPINullablesSetToNull, 'topup_payouts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('topup_payouts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['topup_payouts'] = $topup_payouts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


