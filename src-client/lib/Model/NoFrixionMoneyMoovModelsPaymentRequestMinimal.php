<?php
/**
 * NoFrixionMoneyMoovModelsPaymentRequestMinimal
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionMoneyMoovModelsPaymentRequestMinimal Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionMoneyMoovModelsPaymentRequestMinimal implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.MoneyMoov.Models.PaymentRequestMinimal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'merchant_id' => 'string',
        'merchant_name' => 'string',
        'merchant_short_name' => 'string',
        'amount' => 'float',
        'currency' => 'string',
        'title' => 'string',
        'description' => 'string',
        'payment_processor' => 'string',
        'payment_processor_key' => 'string',
        'callback_url' => 'string',
        'card_stripe_payment_intent_secret' => 'string',
        'jwk' => 'string',
        'payment_methods_list' => 'string[]',
        'pisp_error' => 'string',
        'priority_bank_id' => 'string',
        'google_pay_merchant_id' => 'string',
        'payment_attempts' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentRequestPaymentAttempt[]',
        'status' => 'string',
        'partial_payment_method' => 'string',
        'stripe_account_id' => 'string',
        'lightning_invoice' => 'string',
        'lightning_invoice_expires_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'merchant_id' => 'uuid',
        'merchant_name' => null,
        'merchant_short_name' => null,
        'amount' => 'double',
        'currency' => null,
        'title' => null,
        'description' => null,
        'payment_processor' => null,
        'payment_processor_key' => null,
        'callback_url' => null,
        'card_stripe_payment_intent_secret' => null,
        'jwk' => null,
        'payment_methods_list' => null,
        'pisp_error' => null,
        'priority_bank_id' => 'uuid',
        'google_pay_merchant_id' => null,
        'payment_attempts' => null,
        'status' => null,
        'partial_payment_method' => null,
        'stripe_account_id' => null,
        'lightning_invoice' => null,
        'lightning_invoice_expires_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'merchant_id' => false,
        'merchant_name' => true,
        'merchant_short_name' => true,
        'amount' => false,
        'currency' => false,
        'title' => true,
        'description' => true,
        'payment_processor' => false,
        'payment_processor_key' => true,
        'callback_url' => true,
        'card_stripe_payment_intent_secret' => true,
        'jwk' => true,
        'payment_methods_list' => true,
        'pisp_error' => true,
        'priority_bank_id' => true,
        'google_pay_merchant_id' => true,
        'payment_attempts' => true,
        'status' => false,
        'partial_payment_method' => false,
        'stripe_account_id' => true,
        'lightning_invoice' => true,
        'lightning_invoice_expires_at' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'merchant_id' => 'merchantID',
        'merchant_name' => 'merchantName',
        'merchant_short_name' => 'merchantShortName',
        'amount' => 'amount',
        'currency' => 'currency',
        'title' => 'title',
        'description' => 'description',
        'payment_processor' => 'paymentProcessor',
        'payment_processor_key' => 'paymentProcessorKey',
        'callback_url' => 'callbackUrl',
        'card_stripe_payment_intent_secret' => 'cardStripePaymentIntentSecret',
        'jwk' => 'jwk',
        'payment_methods_list' => 'paymentMethodsList',
        'pisp_error' => 'pispError',
        'priority_bank_id' => 'priorityBankID',
        'google_pay_merchant_id' => 'googlePayMerchantID',
        'payment_attempts' => 'paymentAttempts',
        'status' => 'status',
        'partial_payment_method' => 'partialPaymentMethod',
        'stripe_account_id' => 'stripeAccountID',
        'lightning_invoice' => 'lightningInvoice',
        'lightning_invoice_expires_at' => 'lightningInvoiceExpiresAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'merchant_id' => 'setMerchantId',
        'merchant_name' => 'setMerchantName',
        'merchant_short_name' => 'setMerchantShortName',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'payment_processor' => 'setPaymentProcessor',
        'payment_processor_key' => 'setPaymentProcessorKey',
        'callback_url' => 'setCallbackUrl',
        'card_stripe_payment_intent_secret' => 'setCardStripePaymentIntentSecret',
        'jwk' => 'setJwk',
        'payment_methods_list' => 'setPaymentMethodsList',
        'pisp_error' => 'setPispError',
        'priority_bank_id' => 'setPriorityBankId',
        'google_pay_merchant_id' => 'setGooglePayMerchantId',
        'payment_attempts' => 'setPaymentAttempts',
        'status' => 'setStatus',
        'partial_payment_method' => 'setPartialPaymentMethod',
        'stripe_account_id' => 'setStripeAccountId',
        'lightning_invoice' => 'setLightningInvoice',
        'lightning_invoice_expires_at' => 'setLightningInvoiceExpiresAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'merchant_id' => 'getMerchantId',
        'merchant_name' => 'getMerchantName',
        'merchant_short_name' => 'getMerchantShortName',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'payment_processor' => 'getPaymentProcessor',
        'payment_processor_key' => 'getPaymentProcessorKey',
        'callback_url' => 'getCallbackUrl',
        'card_stripe_payment_intent_secret' => 'getCardStripePaymentIntentSecret',
        'jwk' => 'getJwk',
        'payment_methods_list' => 'getPaymentMethodsList',
        'pisp_error' => 'getPispError',
        'priority_bank_id' => 'getPriorityBankId',
        'google_pay_merchant_id' => 'getGooglePayMerchantId',
        'payment_attempts' => 'getPaymentAttempts',
        'status' => 'getStatus',
        'partial_payment_method' => 'getPartialPaymentMethod',
        'stripe_account_id' => 'getStripeAccountId',
        'lightning_invoice' => 'getLightningInvoice',
        'lightning_invoice_expires_at' => 'getLightningInvoiceExpiresAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CURRENCY_NONE = 'NONE';
    public const CURRENCY_GBP = 'GBP';
    public const CURRENCY_EUR = 'EUR';
    public const CURRENCY_BTC = 'BTC';
    public const PAYMENT_PROCESSOR_NONE = 'None';
    public const PAYMENT_PROCESSOR_CYBER_SOURCE = 'CyberSource';
    public const PAYMENT_PROCESSOR_CHECKOUT = 'Checkout';
    public const PAYMENT_PROCESSOR_STRIPE = 'Stripe';
    public const PAYMENT_PROCESSOR_MODULR = 'Modulr';
    public const PAYMENT_PROCESSOR_PLAID = 'Plaid';
    public const PAYMENT_PROCESSOR_YAPILY = 'Yapily';
    public const PAYMENT_PROCESSOR_NOFRIXION = 'Nofrixion';
    public const PAYMENT_PROCESSOR_BITCOIN = 'Bitcoin';
    public const PAYMENT_PROCESSOR_BITCOIN_TESTNET = 'BitcoinTestnet';
    public const PAYMENT_PROCESSOR_BANKING_CIRCLE = 'BankingCircle';
    public const PAYMENT_PROCESSOR_BANKING_CIRCLE_AGENCY = 'BankingCircleAgency';
    public const PAYMENT_PROCESSOR_SIMULATOR = 'Simulator';
    public const PAYMENT_PROCESSOR_LIGHTNING = 'Lightning';
    public const PAYMENT_PROCESSOR_LIGHTNING_TESTNET = 'LightningTestnet';
    public const PAYMENT_PROCESSOR_BANKING_CIRCLE_DIRECT_DEBIT = 'BankingCircleDirectDebit';
    public const PAYMENT_PROCESSOR_TRIBE = 'Tribe';
    public const PAYMENT_METHODS_LIST_NONE = 'None';
    public const PAYMENT_METHODS_LIST_CARD = 'card';
    public const PAYMENT_METHODS_LIST_PISP = 'pisp';
    public const PAYMENT_METHODS_LIST_LIGHTNING = 'lightning';
    public const PAYMENT_METHODS_LIST_CARDTOKEN = 'cardtoken';
    public const PAYMENT_METHODS_LIST_APPLE_PAY = 'applePay';
    public const PAYMENT_METHODS_LIST_GOOGLE_PAY = 'googlePay';
    public const PAYMENT_METHODS_LIST_DIRECT_DEBIT = 'directDebit';
    public const STATUS_NONE = 'None';
    public const STATUS_FULLY_PAID = 'FullyPaid';
    public const STATUS_PARTIALLY_PAID = 'PartiallyPaid';
    public const STATUS_OVER_PAID = 'OverPaid';
    public const STATUS_VOIDED = 'Voided';
    public const STATUS_AUTHORIZED = 'Authorized';
    public const PARTIAL_PAYMENT_METHOD_NONE = 'None';
    public const PARTIAL_PAYMENT_METHOD_PARTIAL = 'Partial';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_NONE,
            self::CURRENCY_GBP,
            self::CURRENCY_EUR,
            self::CURRENCY_BTC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentProcessorAllowableValues()
    {
        return [
            self::PAYMENT_PROCESSOR_NONE,
            self::PAYMENT_PROCESSOR_CYBER_SOURCE,
            self::PAYMENT_PROCESSOR_CHECKOUT,
            self::PAYMENT_PROCESSOR_STRIPE,
            self::PAYMENT_PROCESSOR_MODULR,
            self::PAYMENT_PROCESSOR_PLAID,
            self::PAYMENT_PROCESSOR_YAPILY,
            self::PAYMENT_PROCESSOR_NOFRIXION,
            self::PAYMENT_PROCESSOR_BITCOIN,
            self::PAYMENT_PROCESSOR_BITCOIN_TESTNET,
            self::PAYMENT_PROCESSOR_BANKING_CIRCLE,
            self::PAYMENT_PROCESSOR_BANKING_CIRCLE_AGENCY,
            self::PAYMENT_PROCESSOR_SIMULATOR,
            self::PAYMENT_PROCESSOR_LIGHTNING,
            self::PAYMENT_PROCESSOR_LIGHTNING_TESTNET,
            self::PAYMENT_PROCESSOR_BANKING_CIRCLE_DIRECT_DEBIT,
            self::PAYMENT_PROCESSOR_TRIBE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodsListAllowableValues()
    {
        return [
            self::PAYMENT_METHODS_LIST_NONE,
            self::PAYMENT_METHODS_LIST_CARD,
            self::PAYMENT_METHODS_LIST_PISP,
            self::PAYMENT_METHODS_LIST_LIGHTNING,
            self::PAYMENT_METHODS_LIST_CARDTOKEN,
            self::PAYMENT_METHODS_LIST_APPLE_PAY,
            self::PAYMENT_METHODS_LIST_GOOGLE_PAY,
            self::PAYMENT_METHODS_LIST_DIRECT_DEBIT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_NONE,
            self::STATUS_FULLY_PAID,
            self::STATUS_PARTIALLY_PAID,
            self::STATUS_OVER_PAID,
            self::STATUS_VOIDED,
            self::STATUS_AUTHORIZED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPartialPaymentMethodAllowableValues()
    {
        return [
            self::PARTIAL_PAYMENT_METHOD_NONE,
            self::PARTIAL_PAYMENT_METHOD_PARTIAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('merchant_name', $data ?? [], null);
        $this->setIfExists('merchant_short_name', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('payment_processor', $data ?? [], null);
        $this->setIfExists('payment_processor_key', $data ?? [], null);
        $this->setIfExists('callback_url', $data ?? [], null);
        $this->setIfExists('card_stripe_payment_intent_secret', $data ?? [], null);
        $this->setIfExists('jwk', $data ?? [], null);
        $this->setIfExists('payment_methods_list', $data ?? [], null);
        $this->setIfExists('pisp_error', $data ?? [], null);
        $this->setIfExists('priority_bank_id', $data ?? [], null);
        $this->setIfExists('google_pay_merchant_id', $data ?? [], null);
        $this->setIfExists('payment_attempts', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('partial_payment_method', $data ?? [], null);
        $this->setIfExists('stripe_account_id', $data ?? [], null);
        $this->setIfExists('lightning_invoice', $data ?? [], null);
        $this->setIfExists('lightning_invoice_expires_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentProcessorAllowableValues();
        if (!is_null($this->container['payment_processor']) && !in_array($this->container['payment_processor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_processor', must be one of '%s'",
                $this->container['payment_processor'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPartialPaymentMethodAllowableValues();
        if (!is_null($this->container['partial_payment_method']) && !in_array($this->container['partial_payment_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'partial_payment_method', must be one of '%s'",
                $this->container['partial_payment_method'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets merchant_name
     *
     * @return string|null
     */
    public function getMerchantName()
    {
        return $this->container['merchant_name'];
    }

    /**
     * Sets merchant_name
     *
     * @param string|null $merchant_name merchant_name
     *
     * @return self
     */
    public function setMerchantName($merchant_name)
    {
        if (is_null($merchant_name)) {
            array_push($this->openAPINullablesSetToNull, 'merchant_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchant_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchant_name'] = $merchant_name;

        return $this;
    }

    /**
     * Gets merchant_short_name
     *
     * @return string|null
     */
    public function getMerchantShortName()
    {
        return $this->container['merchant_short_name'];
    }

    /**
     * Sets merchant_short_name
     *
     * @param string|null $merchant_short_name merchant_short_name
     *
     * @return self
     */
    public function setMerchantShortName($merchant_short_name)
    {
        if (is_null($merchant_short_name)) {
            array_push($this->openAPINullablesSetToNull, 'merchant_short_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchant_short_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchant_short_name'] = $merchant_short_name;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount The amount of money to request.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency The currency of the request.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title of the payment request.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description An optional description for the payment request. If set this field will appear  on the transaction record for some card processors.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets payment_processor
     *
     * @return string|null
     */
    public function getPaymentProcessor()
    {
        return $this->container['payment_processor'];
    }

    /**
     * Sets payment_processor
     *
     * @param string|null $payment_processor The card processor
     *
     * @return self
     */
    public function setPaymentProcessor($payment_processor)
    {
        if (is_null($payment_processor)) {
            throw new \InvalidArgumentException('non-nullable payment_processor cannot be null');
        }
        $allowedValues = $this->getPaymentProcessorAllowableValues();
        if (!in_array($payment_processor, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_processor', must be one of '%s'",
                    $payment_processor,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_processor'] = $payment_processor;

        return $this;
    }

    /**
     * Gets payment_processor_key
     *
     * @return string|null
     */
    public function getPaymentProcessorKey()
    {
        return $this->container['payment_processor_key'];
    }

    /**
     * Sets payment_processor_key
     *
     * @param string|null $payment_processor_key The card processors public key
     *
     * @return self
     */
    public function setPaymentProcessorKey($payment_processor_key)
    {
        if (is_null($payment_processor_key)) {
            array_push($this->openAPINullablesSetToNull, 'payment_processor_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_processor_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_processor_key'] = $payment_processor_key;

        return $this;
    }

    /**
     * Gets callback_url
     *
     * @return string|null
     */
    public function getCallbackUrl()
    {
        return $this->container['callback_url'];
    }

    /**
     * Sets callback_url
     *
     * @param string|null $callback_url callback_url
     *
     * @return self
     */
    public function setCallbackUrl($callback_url)
    {
        if (is_null($callback_url)) {
            array_push($this->openAPINullablesSetToNull, 'callback_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('callback_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['callback_url'] = $callback_url;

        return $this;
    }

    /**
     * Gets card_stripe_payment_intent_secret
     *
     * @return string|null
     */
    public function getCardStripePaymentIntentSecret()
    {
        return $this->container['card_stripe_payment_intent_secret'];
    }

    /**
     * Sets card_stripe_payment_intent_secret
     *
     * @param string|null $card_stripe_payment_intent_secret card_stripe_payment_intent_secret
     *
     * @return self
     */
    public function setCardStripePaymentIntentSecret($card_stripe_payment_intent_secret)
    {
        if (is_null($card_stripe_payment_intent_secret)) {
            array_push($this->openAPINullablesSetToNull, 'card_stripe_payment_intent_secret');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_stripe_payment_intent_secret', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_stripe_payment_intent_secret'] = $card_stripe_payment_intent_secret;

        return $this;
    }

    /**
     * Gets jwk
     *
     * @return string|null
     */
    public function getJwk()
    {
        return $this->container['jwk'];
    }

    /**
     * Sets jwk
     *
     * @param string|null $jwk The jwk containing the public key
     *
     * @return self
     */
    public function setJwk($jwk)
    {
        if (is_null($jwk)) {
            array_push($this->openAPINullablesSetToNull, 'jwk');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('jwk', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['jwk'] = $jwk;

        return $this;
    }

    /**
     * Gets payment_methods_list
     *
     * @return string[]|null
     */
    public function getPaymentMethodsList()
    {
        return $this->container['payment_methods_list'];
    }

    /**
     * Sets payment_methods_list
     *
     * @param string[]|null $payment_methods_list The payment methods that the payment request supports.
     *
     * @return self
     */
    public function setPaymentMethodsList($payment_methods_list)
    {
        if (is_null($payment_methods_list)) {
            array_push($this->openAPINullablesSetToNull, 'payment_methods_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_methods_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getPaymentMethodsListAllowableValues();
        if (!is_null($payment_methods_list) && array_diff($payment_methods_list, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_methods_list', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_methods_list'] = $payment_methods_list;

        return $this;
    }

    /**
     * Gets pisp_error
     *
     * @return string|null
     */
    public function getPispError()
    {
        return $this->container['pisp_error'];
    }

    /**
     * Sets pisp_error
     *
     * @param string|null $pisp_error This is the error returned from the bank which is recorded in payment request events.
     *
     * @return self
     */
    public function setPispError($pisp_error)
    {
        if (is_null($pisp_error)) {
            array_push($this->openAPINullablesSetToNull, 'pisp_error');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pisp_error', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pisp_error'] = $pisp_error;

        return $this;
    }

    /**
     * Gets priority_bank_id
     *
     * @return string|null
     */
    public function getPriorityBankId()
    {
        return $this->container['priority_bank_id'];
    }

    /**
     * Sets priority_bank_id
     *
     * @param string|null $priority_bank_id priority_bank_id
     *
     * @return self
     */
    public function setPriorityBankId($priority_bank_id)
    {
        if (is_null($priority_bank_id)) {
            array_push($this->openAPINullablesSetToNull, 'priority_bank_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('priority_bank_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['priority_bank_id'] = $priority_bank_id;

        return $this;
    }

    /**
     * Gets google_pay_merchant_id
     *
     * @return string|null
     */
    public function getGooglePayMerchantId()
    {
        return $this->container['google_pay_merchant_id'];
    }

    /**
     * Sets google_pay_merchant_id
     *
     * @param string|null $google_pay_merchant_id Merchant ID from Google Pay
     *
     * @return self
     */
    public function setGooglePayMerchantId($google_pay_merchant_id)
    {
        if (is_null($google_pay_merchant_id)) {
            array_push($this->openAPINullablesSetToNull, 'google_pay_merchant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('google_pay_merchant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['google_pay_merchant_id'] = $google_pay_merchant_id;

        return $this;
    }

    /**
     * Gets payment_attempts
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentRequestPaymentAttempt[]|null
     */
    public function getPaymentAttempts()
    {
        return $this->container['payment_attempts'];
    }

    /**
     * Sets payment_attempts
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsPaymentRequestPaymentAttempt[]|null $payment_attempts The payment attempts for this payment request.
     *
     * @return self
     */
    public function setPaymentAttempts($payment_attempts)
    {
        if (is_null($payment_attempts)) {
            array_push($this->openAPINullablesSetToNull, 'payment_attempts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_attempts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_attempts'] = $payment_attempts;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of the payment request.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets partial_payment_method
     *
     * @return string|null
     */
    public function getPartialPaymentMethod()
    {
        return $this->container['partial_payment_method'];
    }

    /**
     * Sets partial_payment_method
     *
     * @param string|null $partial_payment_method partial_payment_method
     *
     * @return self
     */
    public function setPartialPaymentMethod($partial_payment_method)
    {
        if (is_null($partial_payment_method)) {
            throw new \InvalidArgumentException('non-nullable partial_payment_method cannot be null');
        }
        $allowedValues = $this->getPartialPaymentMethodAllowableValues();
        if (!in_array($partial_payment_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'partial_payment_method', must be one of '%s'",
                    $partial_payment_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['partial_payment_method'] = $partial_payment_method;

        return $this;
    }

    /**
     * Gets stripe_account_id
     *
     * @return string|null
     */
    public function getStripeAccountId()
    {
        return $this->container['stripe_account_id'];
    }

    /**
     * Sets stripe_account_id
     *
     * @param string|null $stripe_account_id Account ID of connected customers in Stripe
     *
     * @return self
     */
    public function setStripeAccountId($stripe_account_id)
    {
        if (is_null($stripe_account_id)) {
            array_push($this->openAPINullablesSetToNull, 'stripe_account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stripe_account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stripe_account_id'] = $stripe_account_id;

        return $this;
    }

    /**
     * Gets lightning_invoice
     *
     * @return string|null
     */
    public function getLightningInvoice()
    {
        return $this->container['lightning_invoice'];
    }

    /**
     * Sets lightning_invoice
     *
     * @param string|null $lightning_invoice Lightning invoice ID, if any.
     *
     * @return self
     */
    public function setLightningInvoice($lightning_invoice)
    {
        if (is_null($lightning_invoice)) {
            array_push($this->openAPINullablesSetToNull, 'lightning_invoice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lightning_invoice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lightning_invoice'] = $lightning_invoice;

        return $this;
    }

    /**
     * Gets lightning_invoice_expires_at
     *
     * @return \DateTime|null
     */
    public function getLightningInvoiceExpiresAt()
    {
        return $this->container['lightning_invoice_expires_at'];
    }

    /**
     * Sets lightning_invoice_expires_at
     *
     * @param \DateTime|null $lightning_invoice_expires_at Date and time of expiration of the lightning invoice.
     *
     * @return self
     */
    public function setLightningInvoiceExpiresAt($lightning_invoice_expires_at)
    {
        if (is_null($lightning_invoice_expires_at)) {
            array_push($this->openAPINullablesSetToNull, 'lightning_invoice_expires_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lightning_invoice_expires_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lightning_invoice_expires_at'] = $lightning_invoice_expires_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


