<?php
/**
 * NoFrixionMoneyMoovModelsUserInviteCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionMoneyMoovModelsUserInviteCreate Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionMoneyMoovModelsUserInviteCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.MoneyMoov.Models.UserInviteCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchant_id' => 'string',
        'invitee_email_address' => 'string',
        'invitee_first_name' => 'string',
        'invitee_last_name' => 'string',
        'registration_url' => 'string',
        'send_invite_email' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'merchant_id' => 'uuid',
        'invitee_email_address' => 'email',
        'invitee_first_name' => null,
        'invitee_last_name' => null,
        'registration_url' => null,
        'send_invite_email' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'merchant_id' => false,
        'invitee_email_address' => false,
        'invitee_first_name' => true,
        'invitee_last_name' => true,
        'registration_url' => true,
        'send_invite_email' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_id' => 'merchantID',
        'invitee_email_address' => 'inviteeEmailAddress',
        'invitee_first_name' => 'inviteeFirstName',
        'invitee_last_name' => 'inviteeLastName',
        'registration_url' => 'registrationUrl',
        'send_invite_email' => 'sendInviteEmail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_id' => 'setMerchantId',
        'invitee_email_address' => 'setInviteeEmailAddress',
        'invitee_first_name' => 'setInviteeFirstName',
        'invitee_last_name' => 'setInviteeLastName',
        'registration_url' => 'setRegistrationUrl',
        'send_invite_email' => 'setSendInviteEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_id' => 'getMerchantId',
        'invitee_email_address' => 'getInviteeEmailAddress',
        'invitee_first_name' => 'getInviteeFirstName',
        'invitee_last_name' => 'getInviteeLastName',
        'registration_url' => 'getRegistrationUrl',
        'send_invite_email' => 'getSendInviteEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('invitee_email_address', $data ?? [], null);
        $this->setIfExists('invitee_first_name', $data ?? [], null);
        $this->setIfExists('invitee_last_name', $data ?? [], null);
        $this->setIfExists('registration_url', $data ?? [], null);
        $this->setIfExists('send_invite_email', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['invitee_email_address'] === null) {
            $invalidProperties[] = "'invitee_email_address' can't be null";
        }
        if ((mb_strlen($this->container['invitee_email_address']) < 1)) {
            $invalidProperties[] = "invalid value for 'invitee_email_address', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id ID of the merchant the user is being invited to. Can be empty if  provided by the URL.
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets invitee_email_address
     *
     * @return string
     */
    public function getInviteeEmailAddress()
    {
        return $this->container['invitee_email_address'];
    }

    /**
     * Sets invitee_email_address
     *
     * @param string $invitee_email_address Email address of the user being invited.
     *
     * @return self
     */
    public function setInviteeEmailAddress($invitee_email_address)
    {
        if (is_null($invitee_email_address)) {
            throw new \InvalidArgumentException('non-nullable invitee_email_address cannot be null');
        }

        if ((mb_strlen($invitee_email_address) < 1)) {
            throw new \InvalidArgumentException('invalid length for $invitee_email_address when calling NoFrixionMoneyMoovModelsUserInviteCreate., must be bigger than or equal to 1.');
        }

        $this->container['invitee_email_address'] = $invitee_email_address;

        return $this;
    }

    /**
     * Gets invitee_first_name
     *
     * @return string|null
     */
    public function getInviteeFirstName()
    {
        return $this->container['invitee_first_name'];
    }

    /**
     * Sets invitee_first_name
     *
     * @param string|null $invitee_first_name First Name of the user being invited.
     *
     * @return self
     */
    public function setInviteeFirstName($invitee_first_name)
    {
        if (is_null($invitee_first_name)) {
            array_push($this->openAPINullablesSetToNull, 'invitee_first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invitee_first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invitee_first_name'] = $invitee_first_name;

        return $this;
    }

    /**
     * Gets invitee_last_name
     *
     * @return string|null
     */
    public function getInviteeLastName()
    {
        return $this->container['invitee_last_name'];
    }

    /**
     * Sets invitee_last_name
     *
     * @param string|null $invitee_last_name Last Name of the user being invited.
     *
     * @return self
     */
    public function setInviteeLastName($invitee_last_name)
    {
        if (is_null($invitee_last_name)) {
            array_push($this->openAPINullablesSetToNull, 'invitee_last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invitee_last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invitee_last_name'] = $invitee_last_name;

        return $this;
    }

    /**
     * Gets registration_url
     *
     * @return string|null
     */
    public function getRegistrationUrl()
    {
        return $this->container['registration_url'];
    }

    /**
     * Sets registration_url
     *
     * @param string|null $registration_url Optional URL to provide to the invited user to inform them where to  visit to accept the invite.
     *
     * @return self
     */
    public function setRegistrationUrl($registration_url)
    {
        if (is_null($registration_url)) {
            array_push($this->openAPINullablesSetToNull, 'registration_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_url'] = $registration_url;

        return $this;
    }

    /**
     * Gets send_invite_email
     *
     * @return bool|null
     */
    public function getSendInviteEmail()
    {
        return $this->container['send_invite_email'];
    }

    /**
     * Sets send_invite_email
     *
     * @param bool|null $send_invite_email If set to true an email will be sent to the invitee with instructions on  how to accept the invite.
     *
     * @return self
     */
    public function setSendInviteEmail($send_invite_email)
    {
        if (is_null($send_invite_email)) {
            throw new \InvalidArgumentException('non-nullable send_invite_email cannot be null');
        }
        $this->container['send_invite_email'] = $send_invite_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


