<?php
/**
 * NoFrixionMoneyMoovModelsPaymentRequestCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionMoneyMoovModelsPaymentRequestCreate Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionMoneyMoovModelsPaymentRequestCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.MoneyMoov.Models.PaymentRequestCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchant_id' => 'string',
        'amount' => 'float',
        'currency' => 'string',
        'customer_id' => 'string',
        'order_id' => 'string',
        'payment_methods' => 'string[]',
        'description' => 'string',
        'pisp_account_id' => 'string',
        'shipping_first_name' => 'string',
        'shipping_last_name' => 'string',
        'shipping_address_line1' => 'string',
        'shipping_address_line2' => 'string',
        'shipping_address_city' => 'string',
        'shipping_address_county' => 'string',
        'shipping_address_post_code' => 'string',
        'shipping_address_country_code' => 'string',
        'shipping_phone' => 'string',
        'shipping_email' => 'string',
        'base_origin_url' => 'string',
        'callback_url' => 'string',
        'failure_callback_url' => 'string',
        'success_web_hook_url' => 'string',
        'card_authorize_only' => 'bool',
        'card_create_token' => 'bool',
        'card_create_token_mode' => 'string',
        'card_transmit_raw_details' => 'bool',
        'card_processor_merchant_id' => 'string',
        'ignore_address_verification' => 'bool',
        'card_ignore_cvn' => 'bool',
        'use_hosted_payment_page' => 'bool',
        'card_no_payer_authentication' => 'bool',
        'partial_payment_method' => 'string',
        'customer_email_address' => 'string',
        'payment_processor' => 'string',
        'lightning_invoice' => 'string',
        'lightning_invoice_expires_at' => '\DateTime',
        'notification_email_addresses' => 'string',
        'priority_bank_id' => 'string',
        'title' => 'string',
        'partial_payment_steps' => 'string',
        'payrun_id' => 'string',
        'tag_ids' => 'string[]',
        'tags' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'merchant_id' => 'uuid',
        'amount' => 'double',
        'currency' => null,
        'customer_id' => null,
        'order_id' => null,
        'payment_methods' => null,
        'description' => null,
        'pisp_account_id' => 'uuid',
        'shipping_first_name' => null,
        'shipping_last_name' => null,
        'shipping_address_line1' => null,
        'shipping_address_line2' => null,
        'shipping_address_city' => null,
        'shipping_address_county' => null,
        'shipping_address_post_code' => null,
        'shipping_address_country_code' => null,
        'shipping_phone' => null,
        'shipping_email' => null,
        'base_origin_url' => null,
        'callback_url' => null,
        'failure_callback_url' => null,
        'success_web_hook_url' => null,
        'card_authorize_only' => null,
        'card_create_token' => null,
        'card_create_token_mode' => null,
        'card_transmit_raw_details' => null,
        'card_processor_merchant_id' => null,
        'ignore_address_verification' => null,
        'card_ignore_cvn' => null,
        'use_hosted_payment_page' => null,
        'card_no_payer_authentication' => null,
        'partial_payment_method' => null,
        'customer_email_address' => null,
        'payment_processor' => null,
        'lightning_invoice' => null,
        'lightning_invoice_expires_at' => 'date-time',
        'notification_email_addresses' => 'email',
        'priority_bank_id' => 'uuid',
        'title' => null,
        'partial_payment_steps' => null,
        'payrun_id' => 'uuid',
        'tag_ids' => 'uuid',
        'tags' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'merchant_id' => false,
        'amount' => false,
        'currency' => false,
        'customer_id' => true,
        'order_id' => true,
        'payment_methods' => true,
        'description' => true,
        'pisp_account_id' => true,
        'shipping_first_name' => true,
        'shipping_last_name' => true,
        'shipping_address_line1' => true,
        'shipping_address_line2' => true,
        'shipping_address_city' => true,
        'shipping_address_county' => true,
        'shipping_address_post_code' => true,
        'shipping_address_country_code' => true,
        'shipping_phone' => true,
        'shipping_email' => true,
        'base_origin_url' => true,
        'callback_url' => true,
        'failure_callback_url' => true,
        'success_web_hook_url' => true,
        'card_authorize_only' => false,
        'card_create_token' => false,
        'card_create_token_mode' => false,
        'card_transmit_raw_details' => false,
        'card_processor_merchant_id' => true,
        'ignore_address_verification' => false,
        'card_ignore_cvn' => false,
        'use_hosted_payment_page' => false,
        'card_no_payer_authentication' => false,
        'partial_payment_method' => false,
        'customer_email_address' => true,
        'payment_processor' => false,
        'lightning_invoice' => true,
        'lightning_invoice_expires_at' => true,
        'notification_email_addresses' => true,
        'priority_bank_id' => true,
        'title' => true,
        'partial_payment_steps' => true,
        'payrun_id' => true,
        'tag_ids' => true,
        'tags' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_id' => 'merchantID',
        'amount' => 'amount',
        'currency' => 'currency',
        'customer_id' => 'customerID',
        'order_id' => 'orderID',
        'payment_methods' => 'paymentMethods',
        'description' => 'description',
        'pisp_account_id' => 'pispAccountID',
        'shipping_first_name' => 'shippingFirstName',
        'shipping_last_name' => 'shippingLastName',
        'shipping_address_line1' => 'shippingAddressLine1',
        'shipping_address_line2' => 'shippingAddressLine2',
        'shipping_address_city' => 'shippingAddressCity',
        'shipping_address_county' => 'shippingAddressCounty',
        'shipping_address_post_code' => 'shippingAddressPostCode',
        'shipping_address_country_code' => 'shippingAddressCountryCode',
        'shipping_phone' => 'shippingPhone',
        'shipping_email' => 'shippingEmail',
        'base_origin_url' => 'baseOriginUrl',
        'callback_url' => 'callbackUrl',
        'failure_callback_url' => 'failureCallbackUrl',
        'success_web_hook_url' => 'successWebHookUrl',
        'card_authorize_only' => 'cardAuthorizeOnly',
        'card_create_token' => 'cardCreateToken',
        'card_create_token_mode' => 'cardCreateTokenMode',
        'card_transmit_raw_details' => 'cardTransmitRawDetails',
        'card_processor_merchant_id' => 'cardProcessorMerchantID',
        'ignore_address_verification' => 'ignoreAddressVerification',
        'card_ignore_cvn' => 'cardIgnoreCVN',
        'use_hosted_payment_page' => 'useHostedPaymentPage',
        'card_no_payer_authentication' => 'cardNoPayerAuthentication',
        'partial_payment_method' => 'partialPaymentMethod',
        'customer_email_address' => 'customerEmailAddress',
        'payment_processor' => 'paymentProcessor',
        'lightning_invoice' => 'lightningInvoice',
        'lightning_invoice_expires_at' => 'lightningInvoiceExpiresAt',
        'notification_email_addresses' => 'notificationEmailAddresses',
        'priority_bank_id' => 'priorityBankID',
        'title' => 'title',
        'partial_payment_steps' => 'partialPaymentSteps',
        'payrun_id' => 'payrunID',
        'tag_ids' => 'tagIds',
        'tags' => 'tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_id' => 'setMerchantId',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'customer_id' => 'setCustomerId',
        'order_id' => 'setOrderId',
        'payment_methods' => 'setPaymentMethods',
        'description' => 'setDescription',
        'pisp_account_id' => 'setPispAccountId',
        'shipping_first_name' => 'setShippingFirstName',
        'shipping_last_name' => 'setShippingLastName',
        'shipping_address_line1' => 'setShippingAddressLine1',
        'shipping_address_line2' => 'setShippingAddressLine2',
        'shipping_address_city' => 'setShippingAddressCity',
        'shipping_address_county' => 'setShippingAddressCounty',
        'shipping_address_post_code' => 'setShippingAddressPostCode',
        'shipping_address_country_code' => 'setShippingAddressCountryCode',
        'shipping_phone' => 'setShippingPhone',
        'shipping_email' => 'setShippingEmail',
        'base_origin_url' => 'setBaseOriginUrl',
        'callback_url' => 'setCallbackUrl',
        'failure_callback_url' => 'setFailureCallbackUrl',
        'success_web_hook_url' => 'setSuccessWebHookUrl',
        'card_authorize_only' => 'setCardAuthorizeOnly',
        'card_create_token' => 'setCardCreateToken',
        'card_create_token_mode' => 'setCardCreateTokenMode',
        'card_transmit_raw_details' => 'setCardTransmitRawDetails',
        'card_processor_merchant_id' => 'setCardProcessorMerchantId',
        'ignore_address_verification' => 'setIgnoreAddressVerification',
        'card_ignore_cvn' => 'setCardIgnoreCvn',
        'use_hosted_payment_page' => 'setUseHostedPaymentPage',
        'card_no_payer_authentication' => 'setCardNoPayerAuthentication',
        'partial_payment_method' => 'setPartialPaymentMethod',
        'customer_email_address' => 'setCustomerEmailAddress',
        'payment_processor' => 'setPaymentProcessor',
        'lightning_invoice' => 'setLightningInvoice',
        'lightning_invoice_expires_at' => 'setLightningInvoiceExpiresAt',
        'notification_email_addresses' => 'setNotificationEmailAddresses',
        'priority_bank_id' => 'setPriorityBankId',
        'title' => 'setTitle',
        'partial_payment_steps' => 'setPartialPaymentSteps',
        'payrun_id' => 'setPayrunId',
        'tag_ids' => 'setTagIds',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_id' => 'getMerchantId',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'customer_id' => 'getCustomerId',
        'order_id' => 'getOrderId',
        'payment_methods' => 'getPaymentMethods',
        'description' => 'getDescription',
        'pisp_account_id' => 'getPispAccountId',
        'shipping_first_name' => 'getShippingFirstName',
        'shipping_last_name' => 'getShippingLastName',
        'shipping_address_line1' => 'getShippingAddressLine1',
        'shipping_address_line2' => 'getShippingAddressLine2',
        'shipping_address_city' => 'getShippingAddressCity',
        'shipping_address_county' => 'getShippingAddressCounty',
        'shipping_address_post_code' => 'getShippingAddressPostCode',
        'shipping_address_country_code' => 'getShippingAddressCountryCode',
        'shipping_phone' => 'getShippingPhone',
        'shipping_email' => 'getShippingEmail',
        'base_origin_url' => 'getBaseOriginUrl',
        'callback_url' => 'getCallbackUrl',
        'failure_callback_url' => 'getFailureCallbackUrl',
        'success_web_hook_url' => 'getSuccessWebHookUrl',
        'card_authorize_only' => 'getCardAuthorizeOnly',
        'card_create_token' => 'getCardCreateToken',
        'card_create_token_mode' => 'getCardCreateTokenMode',
        'card_transmit_raw_details' => 'getCardTransmitRawDetails',
        'card_processor_merchant_id' => 'getCardProcessorMerchantId',
        'ignore_address_verification' => 'getIgnoreAddressVerification',
        'card_ignore_cvn' => 'getCardIgnoreCvn',
        'use_hosted_payment_page' => 'getUseHostedPaymentPage',
        'card_no_payer_authentication' => 'getCardNoPayerAuthentication',
        'partial_payment_method' => 'getPartialPaymentMethod',
        'customer_email_address' => 'getCustomerEmailAddress',
        'payment_processor' => 'getPaymentProcessor',
        'lightning_invoice' => 'getLightningInvoice',
        'lightning_invoice_expires_at' => 'getLightningInvoiceExpiresAt',
        'notification_email_addresses' => 'getNotificationEmailAddresses',
        'priority_bank_id' => 'getPriorityBankId',
        'title' => 'getTitle',
        'partial_payment_steps' => 'getPartialPaymentSteps',
        'payrun_id' => 'getPayrunId',
        'tag_ids' => 'getTagIds',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CURRENCY_NONE = 'NONE';
    public const CURRENCY_GBP = 'GBP';
    public const CURRENCY_EUR = 'EUR';
    public const CURRENCY_BTC = 'BTC';
    public const PAYMENT_METHODS_NONE = 'None';
    public const PAYMENT_METHODS_CARD = 'card';
    public const PAYMENT_METHODS_PISP = 'pisp';
    public const PAYMENT_METHODS_LIGHTNING = 'lightning';
    public const PAYMENT_METHODS_CARDTOKEN = 'cardtoken';
    public const PAYMENT_METHODS_APPLE_PAY = 'applePay';
    public const PAYMENT_METHODS_GOOGLE_PAY = 'googlePay';
    public const PAYMENT_METHODS_DIRECT_DEBIT = 'directDebit';
    public const CARD_CREATE_TOKEN_MODE_NONE = 'None';
    public const CARD_CREATE_TOKEN_MODE_CONSENT_NOT_REQUIRED = 'ConsentNotRequired';
    public const CARD_CREATE_TOKEN_MODE_USER_CONSENT_REQUIRED = 'UserConsentRequired';
    public const PARTIAL_PAYMENT_METHOD_NONE = 'None';
    public const PARTIAL_PAYMENT_METHOD_PARTIAL = 'Partial';
    public const PAYMENT_PROCESSOR_NONE = 'None';
    public const PAYMENT_PROCESSOR_CYBER_SOURCE = 'CyberSource';
    public const PAYMENT_PROCESSOR_CHECKOUT = 'Checkout';
    public const PAYMENT_PROCESSOR_STRIPE = 'Stripe';
    public const PAYMENT_PROCESSOR_MODULR = 'Modulr';
    public const PAYMENT_PROCESSOR_PLAID = 'Plaid';
    public const PAYMENT_PROCESSOR_YAPILY = 'Yapily';
    public const PAYMENT_PROCESSOR_NOFRIXION = 'Nofrixion';
    public const PAYMENT_PROCESSOR_BITCOIN = 'Bitcoin';
    public const PAYMENT_PROCESSOR_BITCOIN_TESTNET = 'BitcoinTestnet';
    public const PAYMENT_PROCESSOR_BANKING_CIRCLE = 'BankingCircle';
    public const PAYMENT_PROCESSOR_BANKING_CIRCLE_AGENCY = 'BankingCircleAgency';
    public const PAYMENT_PROCESSOR_SIMULATOR = 'Simulator';
    public const PAYMENT_PROCESSOR_LIGHTNING = 'Lightning';
    public const PAYMENT_PROCESSOR_LIGHTNING_TESTNET = 'LightningTestnet';
    public const PAYMENT_PROCESSOR_BANKING_CIRCLE_DIRECT_DEBIT = 'BankingCircleDirectDebit';
    public const PAYMENT_PROCESSOR_TRIBE = 'Tribe';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_NONE,
            self::CURRENCY_GBP,
            self::CURRENCY_EUR,
            self::CURRENCY_BTC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodsAllowableValues()
    {
        return [
            self::PAYMENT_METHODS_NONE,
            self::PAYMENT_METHODS_CARD,
            self::PAYMENT_METHODS_PISP,
            self::PAYMENT_METHODS_LIGHTNING,
            self::PAYMENT_METHODS_CARDTOKEN,
            self::PAYMENT_METHODS_APPLE_PAY,
            self::PAYMENT_METHODS_GOOGLE_PAY,
            self::PAYMENT_METHODS_DIRECT_DEBIT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardCreateTokenModeAllowableValues()
    {
        return [
            self::CARD_CREATE_TOKEN_MODE_NONE,
            self::CARD_CREATE_TOKEN_MODE_CONSENT_NOT_REQUIRED,
            self::CARD_CREATE_TOKEN_MODE_USER_CONSENT_REQUIRED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPartialPaymentMethodAllowableValues()
    {
        return [
            self::PARTIAL_PAYMENT_METHOD_NONE,
            self::PARTIAL_PAYMENT_METHOD_PARTIAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentProcessorAllowableValues()
    {
        return [
            self::PAYMENT_PROCESSOR_NONE,
            self::PAYMENT_PROCESSOR_CYBER_SOURCE,
            self::PAYMENT_PROCESSOR_CHECKOUT,
            self::PAYMENT_PROCESSOR_STRIPE,
            self::PAYMENT_PROCESSOR_MODULR,
            self::PAYMENT_PROCESSOR_PLAID,
            self::PAYMENT_PROCESSOR_YAPILY,
            self::PAYMENT_PROCESSOR_NOFRIXION,
            self::PAYMENT_PROCESSOR_BITCOIN,
            self::PAYMENT_PROCESSOR_BITCOIN_TESTNET,
            self::PAYMENT_PROCESSOR_BANKING_CIRCLE,
            self::PAYMENT_PROCESSOR_BANKING_CIRCLE_AGENCY,
            self::PAYMENT_PROCESSOR_SIMULATOR,
            self::PAYMENT_PROCESSOR_LIGHTNING,
            self::PAYMENT_PROCESSOR_LIGHTNING_TESTNET,
            self::PAYMENT_PROCESSOR_BANKING_CIRCLE_DIRECT_DEBIT,
            self::PAYMENT_PROCESSOR_TRIBE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('payment_methods', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('pisp_account_id', $data ?? [], null);
        $this->setIfExists('shipping_first_name', $data ?? [], null);
        $this->setIfExists('shipping_last_name', $data ?? [], null);
        $this->setIfExists('shipping_address_line1', $data ?? [], null);
        $this->setIfExists('shipping_address_line2', $data ?? [], null);
        $this->setIfExists('shipping_address_city', $data ?? [], null);
        $this->setIfExists('shipping_address_county', $data ?? [], null);
        $this->setIfExists('shipping_address_post_code', $data ?? [], null);
        $this->setIfExists('shipping_address_country_code', $data ?? [], null);
        $this->setIfExists('shipping_phone', $data ?? [], null);
        $this->setIfExists('shipping_email', $data ?? [], null);
        $this->setIfExists('base_origin_url', $data ?? [], null);
        $this->setIfExists('callback_url', $data ?? [], null);
        $this->setIfExists('failure_callback_url', $data ?? [], null);
        $this->setIfExists('success_web_hook_url', $data ?? [], null);
        $this->setIfExists('card_authorize_only', $data ?? [], null);
        $this->setIfExists('card_create_token', $data ?? [], null);
        $this->setIfExists('card_create_token_mode', $data ?? [], null);
        $this->setIfExists('card_transmit_raw_details', $data ?? [], null);
        $this->setIfExists('card_processor_merchant_id', $data ?? [], null);
        $this->setIfExists('ignore_address_verification', $data ?? [], null);
        $this->setIfExists('card_ignore_cvn', $data ?? [], null);
        $this->setIfExists('use_hosted_payment_page', $data ?? [], null);
        $this->setIfExists('card_no_payer_authentication', $data ?? [], null);
        $this->setIfExists('partial_payment_method', $data ?? [], null);
        $this->setIfExists('customer_email_address', $data ?? [], null);
        $this->setIfExists('payment_processor', $data ?? [], null);
        $this->setIfExists('lightning_invoice', $data ?? [], null);
        $this->setIfExists('lightning_invoice_expires_at', $data ?? [], null);
        $this->setIfExists('notification_email_addresses', $data ?? [], null);
        $this->setIfExists('priority_bank_id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('partial_payment_steps', $data ?? [], null);
        $this->setIfExists('payrun_id', $data ?? [], null);
        $this->setIfExists('tag_ids', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['customer_id']) && !preg_match("/[a-zA-Z0-9\\-]+/", $this->container['customer_id'])) {
            $invalidProperties[] = "invalid value for 'customer_id', must be conform to the pattern /[a-zA-Z0-9\\-]+/.";
        }

        if (!is_null($this->container['order_id']) && !preg_match("/[a-zA-Z0-9\\-_\\.@&\\*%\\$#!:; ]+/", $this->container['order_id'])) {
            $invalidProperties[] = "invalid value for 'order_id', must be conform to the pattern /[a-zA-Z0-9\\-_\\.@&\\*%\\$#!:; ]+/.";
        }

        if (!is_null($this->container['shipping_first_name']) && !preg_match("/[^\\<\\>]+/", $this->container['shipping_first_name'])) {
            $invalidProperties[] = "invalid value for 'shipping_first_name', must be conform to the pattern /[^\\<\\>]+/.";
        }

        if (!is_null($this->container['shipping_last_name']) && !preg_match("/[^\\<\\>]+/", $this->container['shipping_last_name'])) {
            $invalidProperties[] = "invalid value for 'shipping_last_name', must be conform to the pattern /[^\\<\\>]+/.";
        }

        if (!is_null($this->container['shipping_address_line1']) && !preg_match("/[^\\<\\>]+/", $this->container['shipping_address_line1'])) {
            $invalidProperties[] = "invalid value for 'shipping_address_line1', must be conform to the pattern /[^\\<\\>]+/.";
        }

        if (!is_null($this->container['shipping_address_line2']) && !preg_match("/[^\\<\\>]+/", $this->container['shipping_address_line2'])) {
            $invalidProperties[] = "invalid value for 'shipping_address_line2', must be conform to the pattern /[^\\<\\>]+/.";
        }

        if (!is_null($this->container['shipping_address_city']) && !preg_match("/[^\\<\\>]+/", $this->container['shipping_address_city'])) {
            $invalidProperties[] = "invalid value for 'shipping_address_city', must be conform to the pattern /[^\\<\\>]+/.";
        }

        if (!is_null($this->container['shipping_address_county']) && !preg_match("/[^\\<\\>]+/", $this->container['shipping_address_county'])) {
            $invalidProperties[] = "invalid value for 'shipping_address_county', must be conform to the pattern /[^\\<\\>]+/.";
        }

        if (!is_null($this->container['shipping_address_post_code']) && !preg_match("/[^\\<\\>]+/", $this->container['shipping_address_post_code'])) {
            $invalidProperties[] = "invalid value for 'shipping_address_post_code', must be conform to the pattern /[^\\<\\>]+/.";
        }

        if (!is_null($this->container['shipping_address_country_code']) && !preg_match("/[^\\<\\>]+/", $this->container['shipping_address_country_code'])) {
            $invalidProperties[] = "invalid value for 'shipping_address_country_code', must be conform to the pattern /[^\\<\\>]+/.";
        }

        if (!is_null($this->container['shipping_phone']) && !preg_match("/[0-9\\+\\- ]+/", $this->container['shipping_phone'])) {
            $invalidProperties[] = "invalid value for 'shipping_phone', must be conform to the pattern /[0-9\\+\\- ]+/.";
        }

        $allowedValues = $this->getCardCreateTokenModeAllowableValues();
        if (!is_null($this->container['card_create_token_mode']) && !in_array($this->container['card_create_token_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'card_create_token_mode', must be one of '%s'",
                $this->container['card_create_token_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['card_processor_merchant_id']) && !preg_match("/[a-zA-Z0-9]+/", $this->container['card_processor_merchant_id'])) {
            $invalidProperties[] = "invalid value for 'card_processor_merchant_id', must be conform to the pattern /[a-zA-Z0-9]+/.";
        }

        $allowedValues = $this->getPartialPaymentMethodAllowableValues();
        if (!is_null($this->container['partial_payment_method']) && !in_array($this->container['partial_payment_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'partial_payment_method', must be one of '%s'",
                $this->container['partial_payment_method'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentProcessorAllowableValues();
        if (!is_null($this->container['payment_processor']) && !in_array($this->container['payment_processor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_processor', must be one of '%s'",
                $this->container['payment_processor'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id The ID of the merchant to create the payment request for.
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount The amount of money to request.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency The currency of the payment request.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id An optional customer identifier for the payment request. This field is sent to the   payer's bank when using payment initiation. The restriction in the available characters  is due to some banks rejecting requests when ones outside the set are used.
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            array_push($this->openAPINullablesSetToNull, 'customer_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($customer_id) && (!preg_match("/[a-zA-Z0-9\\-]+/", ObjectSerializer::toString($customer_id)))) {
            throw new \InvalidArgumentException("invalid value for \$customer_id when calling NoFrixionMoneyMoovModelsPaymentRequestCreate., must conform to the pattern /[a-zA-Z0-9\\-]+/.");
        }

        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id An optional order ID for the payment request. If the request is for an invoice this  is the most appropriate field for the invoice ID.
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            array_push($this->openAPINullablesSetToNull, 'order_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($order_id) && (!preg_match("/[a-zA-Z0-9\\-_\\.@&\\*%\\$#!:; ]+/", ObjectSerializer::toString($order_id)))) {
            throw new \InvalidArgumentException("invalid value for \$order_id when calling NoFrixionMoneyMoovModelsPaymentRequestCreate., must conform to the pattern /[a-zA-Z0-9\\-_\\.@&\\*%\\$#!:; ]+/.");
        }

        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets payment_methods
     *
     * @return string[]|null
     */
    public function getPaymentMethods()
    {
        return $this->container['payment_methods'];
    }

    /**
     * Sets payment_methods
     *
     * @param string[]|null $payment_methods The payment methods that the payment request supports.
     *
     * @return self
     */
    public function setPaymentMethods($payment_methods)
    {
        if (is_null($payment_methods)) {
            array_push($this->openAPINullablesSetToNull, 'payment_methods');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_methods', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getPaymentMethodsAllowableValues();
        if (!is_null($payment_methods) && array_diff($payment_methods, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_methods', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_methods'] = $payment_methods;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description An optional description for the payment request. If set this field will appear  on the transaction record for some card processors.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets pisp_account_id
     *
     * @return string|null
     */
    public function getPispAccountId()
    {
        return $this->container['pisp_account_id'];
    }

    /**
     * Sets pisp_account_id
     *
     * @param string|null $pisp_account_id The payment account ID to use to receive payment initiation payments. This must match one of your  NoFrixion payment account IDs. This can be left blank to use your default payment account.
     *
     * @return self
     */
    public function setPispAccountId($pisp_account_id)
    {
        if (is_null($pisp_account_id)) {
            array_push($this->openAPINullablesSetToNull, 'pisp_account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pisp_account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pisp_account_id'] = $pisp_account_id;

        return $this;
    }

    /**
     * Gets shipping_first_name
     *
     * @return string|null
     */
    public function getShippingFirstName()
    {
        return $this->container['shipping_first_name'];
    }

    /**
     * Sets shipping_first_name
     *
     * @param string|null $shipping_first_name Optionally the first name of the customer's shipping address.
     *
     * @return self
     */
    public function setShippingFirstName($shipping_first_name)
    {
        if (is_null($shipping_first_name)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($shipping_first_name) && (!preg_match("/[^\\<\\>]+/", ObjectSerializer::toString($shipping_first_name)))) {
            throw new \InvalidArgumentException("invalid value for \$shipping_first_name when calling NoFrixionMoneyMoovModelsPaymentRequestCreate., must conform to the pattern /[^\\<\\>]+/.");
        }

        $this->container['shipping_first_name'] = $shipping_first_name;

        return $this;
    }

    /**
     * Gets shipping_last_name
     *
     * @return string|null
     */
    public function getShippingLastName()
    {
        return $this->container['shipping_last_name'];
    }

    /**
     * Sets shipping_last_name
     *
     * @param string|null $shipping_last_name Optionally the last name of the customer's shipping address.
     *
     * @return self
     */
    public function setShippingLastName($shipping_last_name)
    {
        if (is_null($shipping_last_name)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($shipping_last_name) && (!preg_match("/[^\\<\\>]+/", ObjectSerializer::toString($shipping_last_name)))) {
            throw new \InvalidArgumentException("invalid value for \$shipping_last_name when calling NoFrixionMoneyMoovModelsPaymentRequestCreate., must conform to the pattern /[^\\<\\>]+/.");
        }

        $this->container['shipping_last_name'] = $shipping_last_name;

        return $this;
    }

    /**
     * Gets shipping_address_line1
     *
     * @return string|null
     */
    public function getShippingAddressLine1()
    {
        return $this->container['shipping_address_line1'];
    }

    /**
     * Sets shipping_address_line1
     *
     * @param string|null $shipping_address_line1 Optionally the first line of the customer's shipping address.
     *
     * @return self
     */
    public function setShippingAddressLine1($shipping_address_line1)
    {
        if (is_null($shipping_address_line1)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_address_line1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_address_line1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($shipping_address_line1) && (!preg_match("/[^\\<\\>]+/", ObjectSerializer::toString($shipping_address_line1)))) {
            throw new \InvalidArgumentException("invalid value for \$shipping_address_line1 when calling NoFrixionMoneyMoovModelsPaymentRequestCreate., must conform to the pattern /[^\\<\\>]+/.");
        }

        $this->container['shipping_address_line1'] = $shipping_address_line1;

        return $this;
    }

    /**
     * Gets shipping_address_line2
     *
     * @return string|null
     */
    public function getShippingAddressLine2()
    {
        return $this->container['shipping_address_line2'];
    }

    /**
     * Sets shipping_address_line2
     *
     * @param string|null $shipping_address_line2 Optionally the second line of the customer's shipping address.
     *
     * @return self
     */
    public function setShippingAddressLine2($shipping_address_line2)
    {
        if (is_null($shipping_address_line2)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_address_line2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_address_line2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($shipping_address_line2) && (!preg_match("/[^\\<\\>]+/", ObjectSerializer::toString($shipping_address_line2)))) {
            throw new \InvalidArgumentException("invalid value for \$shipping_address_line2 when calling NoFrixionMoneyMoovModelsPaymentRequestCreate., must conform to the pattern /[^\\<\\>]+/.");
        }

        $this->container['shipping_address_line2'] = $shipping_address_line2;

        return $this;
    }

    /**
     * Gets shipping_address_city
     *
     * @return string|null
     */
    public function getShippingAddressCity()
    {
        return $this->container['shipping_address_city'];
    }

    /**
     * Sets shipping_address_city
     *
     * @param string|null $shipping_address_city Optionally the city of the customer's shipping address.
     *
     * @return self
     */
    public function setShippingAddressCity($shipping_address_city)
    {
        if (is_null($shipping_address_city)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_address_city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_address_city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($shipping_address_city) && (!preg_match("/[^\\<\\>]+/", ObjectSerializer::toString($shipping_address_city)))) {
            throw new \InvalidArgumentException("invalid value for \$shipping_address_city when calling NoFrixionMoneyMoovModelsPaymentRequestCreate., must conform to the pattern /[^\\<\\>]+/.");
        }

        $this->container['shipping_address_city'] = $shipping_address_city;

        return $this;
    }

    /**
     * Gets shipping_address_county
     *
     * @return string|null
     */
    public function getShippingAddressCounty()
    {
        return $this->container['shipping_address_county'];
    }

    /**
     * Sets shipping_address_county
     *
     * @param string|null $shipping_address_county Optionally the state or county of the customer's shipping address.
     *
     * @return self
     */
    public function setShippingAddressCounty($shipping_address_county)
    {
        if (is_null($shipping_address_county)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_address_county');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_address_county', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($shipping_address_county) && (!preg_match("/[^\\<\\>]+/", ObjectSerializer::toString($shipping_address_county)))) {
            throw new \InvalidArgumentException("invalid value for \$shipping_address_county when calling NoFrixionMoneyMoovModelsPaymentRequestCreate., must conform to the pattern /[^\\<\\>]+/.");
        }

        $this->container['shipping_address_county'] = $shipping_address_county;

        return $this;
    }

    /**
     * Gets shipping_address_post_code
     *
     * @return string|null
     */
    public function getShippingAddressPostCode()
    {
        return $this->container['shipping_address_post_code'];
    }

    /**
     * Sets shipping_address_post_code
     *
     * @param string|null $shipping_address_post_code Optionally the post code of the customer's shipping address.
     *
     * @return self
     */
    public function setShippingAddressPostCode($shipping_address_post_code)
    {
        if (is_null($shipping_address_post_code)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_address_post_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_address_post_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($shipping_address_post_code) && (!preg_match("/[^\\<\\>]+/", ObjectSerializer::toString($shipping_address_post_code)))) {
            throw new \InvalidArgumentException("invalid value for \$shipping_address_post_code when calling NoFrixionMoneyMoovModelsPaymentRequestCreate., must conform to the pattern /[^\\<\\>]+/.");
        }

        $this->container['shipping_address_post_code'] = $shipping_address_post_code;

        return $this;
    }

    /**
     * Gets shipping_address_country_code
     *
     * @return string|null
     */
    public function getShippingAddressCountryCode()
    {
        return $this->container['shipping_address_country_code'];
    }

    /**
     * Sets shipping_address_country_code
     *
     * @param string|null $shipping_address_country_code Optionally the country code of the customer's shipping address.
     *
     * @return self
     */
    public function setShippingAddressCountryCode($shipping_address_country_code)
    {
        if (is_null($shipping_address_country_code)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_address_country_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_address_country_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($shipping_address_country_code) && (!preg_match("/[^\\<\\>]+/", ObjectSerializer::toString($shipping_address_country_code)))) {
            throw new \InvalidArgumentException("invalid value for \$shipping_address_country_code when calling NoFrixionMoneyMoovModelsPaymentRequestCreate., must conform to the pattern /[^\\<\\>]+/.");
        }

        $this->container['shipping_address_country_code'] = $shipping_address_country_code;

        return $this;
    }

    /**
     * Gets shipping_phone
     *
     * @return string|null
     */
    public function getShippingPhone()
    {
        return $this->container['shipping_phone'];
    }

    /**
     * Sets shipping_phone
     *
     * @param string|null $shipping_phone Optionally the shipping phone number for the customer.
     *
     * @return self
     */
    public function setShippingPhone($shipping_phone)
    {
        if (is_null($shipping_phone)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($shipping_phone) && (!preg_match("/[0-9\\+\\- ]+/", ObjectSerializer::toString($shipping_phone)))) {
            throw new \InvalidArgumentException("invalid value for \$shipping_phone when calling NoFrixionMoneyMoovModelsPaymentRequestCreate., must conform to the pattern /[0-9\\+\\- ]+/.");
        }

        $this->container['shipping_phone'] = $shipping_phone;

        return $this;
    }

    /**
     * Gets shipping_email
     *
     * @return string|null
     */
    public function getShippingEmail()
    {
        return $this->container['shipping_email'];
    }

    /**
     * Sets shipping_email
     *
     * @param string|null $shipping_email Optionally the shipping email address for the customer.
     *
     * @return self
     */
    public function setShippingEmail($shipping_email)
    {
        if (is_null($shipping_email)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_email'] = $shipping_email;

        return $this;
    }

    /**
     * Gets base_origin_url
     *
     * @return string|null
     */
    public function getBaseOriginUrl()
    {
        return $this->container['base_origin_url'];
    }

    /**
     * Sets base_origin_url
     *
     * @param string|null $base_origin_url For card payments the origin of the payment page needs to be set in advance.  A public key context is generated to encrypt sensitive card details and is bound  to a single origin URL.
     *
     * @return self
     */
    public function setBaseOriginUrl($base_origin_url)
    {
        if (is_null($base_origin_url)) {
            array_push($this->openAPINullablesSetToNull, 'base_origin_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('base_origin_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['base_origin_url'] = $base_origin_url;

        return $this;
    }

    /**
     * Gets callback_url
     *
     * @return string|null
     */
    public function getCallbackUrl()
    {
        return $this->container['callback_url'];
    }

    /**
     * Sets callback_url
     *
     * @param string|null $callback_url Once a payment is processed, or a notification of an inbound payment is received,  a callback request will be made to this URL. Typically it will be the page on  a merchant's web site that displays the results of the payment attempt.
     *
     * @return self
     */
    public function setCallbackUrl($callback_url)
    {
        if (is_null($callback_url)) {
            array_push($this->openAPINullablesSetToNull, 'callback_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('callback_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['callback_url'] = $callback_url;

        return $this;
    }

    /**
     * Gets failure_callback_url
     *
     * @return string|null
     */
    public function getFailureCallbackUrl()
    {
        return $this->container['failure_callback_url'];
    }

    /**
     * Sets failure_callback_url
     *
     * @param string|null $failure_callback_url Optional callback URL for payment failures that can occur when the payer is   redirected away from the payment page. Typically the payer is only sent away  from the payment page for pay by bank attempts. If this URL is not set the   payer will be redirected back to the original URL the payment attempt was initiated  from.
     *
     * @return self
     */
    public function setFailureCallbackUrl($failure_callback_url)
    {
        if (is_null($failure_callback_url)) {
            array_push($this->openAPINullablesSetToNull, 'failure_callback_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('failure_callback_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['failure_callback_url'] = $failure_callback_url;

        return $this;
    }

    /**
     * Gets success_web_hook_url
     *
     * @return string|null
     */
    public function getSuccessWebHookUrl()
    {
        return $this->container['success_web_hook_url'];
    }

    /**
     * Sets success_web_hook_url
     *
     * @param string|null $success_web_hook_url If a payment event results in the payment request being classified as fully paid this  success webhook URL will be invoked. The URL will be invoked as a GET request, i.e.  there will be no request body. Two query parameters will be added to the URL. The   first one will be \"id\" and will hold the payment request ID. The second one will be  \"orderid\" and will hold the payment request OrderID, note the OrderID could be empty  if it was not set when the payment request was created.  The recommended approach when receiving a success web hook is to use the \"id\" parameter  to call the moneymoov get payment request endpoint to retrieve the full details of the  payment request and check the status. Web hooks can be easily spoofed and should not be  relied upon.
     *
     * @return self
     */
    public function setSuccessWebHookUrl($success_web_hook_url)
    {
        if (is_null($success_web_hook_url)) {
            array_push($this->openAPINullablesSetToNull, 'success_web_hook_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('success_web_hook_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['success_web_hook_url'] = $success_web_hook_url;

        return $this;
    }

    /**
     * Gets card_authorize_only
     *
     * @return bool|null
     */
    public function getCardAuthorizeOnly()
    {
        return $this->container['card_authorize_only'];
    }

    /**
     * Sets card_authorize_only
     *
     * @param bool|null $card_authorize_only For card payments the default behaviour is to authorise and capture the payment at the same  time. If a merchant needs to authorise and then capture at a later point this property needs  to be set to true.
     *
     * @return self
     */
    public function setCardAuthorizeOnly($card_authorize_only)
    {
        if (is_null($card_authorize_only)) {
            throw new \InvalidArgumentException('non-nullable card_authorize_only cannot be null');
        }
        $this->container['card_authorize_only'] = $card_authorize_only;

        return $this;
    }

    /**
     * Gets card_create_token
     *
     * @return bool|null
     */
    public function getCardCreateToken()
    {
        return $this->container['card_create_token'];
    }

    /**
     * Sets card_create_token
     *
     * @param bool|null $card_create_token For card payments a payment attempt can be used to create a reusable token for subsequent  payments. Setting this field to true will create a reusable customer token.
     *
     * @return self
     */
    public function setCardCreateToken($card_create_token)
    {
        if (is_null($card_create_token)) {
            throw new \InvalidArgumentException('non-nullable card_create_token cannot be null');
        }
        $this->container['card_create_token'] = $card_create_token;

        return $this;
    }

    /**
     * Gets card_create_token_mode
     *
     * @return string|null
     */
    public function getCardCreateTokenMode()
    {
        return $this->container['card_create_token_mode'];
    }

    /**
     * Sets card_create_token_mode
     *
     * @param string|null $card_create_token_mode This specifies whether user consent will be taken before tokenising card or not.  This cannot be 'None' if CardCreateToken is set to true. If this is set to 'UserConsentRequired'  then, the user consent will overwrite CardCreateToken flag on submit card payment.
     *
     * @return self
     */
    public function setCardCreateTokenMode($card_create_token_mode)
    {
        if (is_null($card_create_token_mode)) {
            throw new \InvalidArgumentException('non-nullable card_create_token_mode cannot be null');
        }
        $allowedValues = $this->getCardCreateTokenModeAllowableValues();
        if (!in_array($card_create_token_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'card_create_token_mode', must be one of '%s'",
                    $card_create_token_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_create_token_mode'] = $card_create_token_mode;

        return $this;
    }

    /**
     * Gets card_transmit_raw_details
     *
     * @return bool|null
     */
    public function getCardTransmitRawDetails()
    {
        return $this->container['card_transmit_raw_details'];
    }

    /**
     * Sets card_transmit_raw_details
     *
     * @param bool|null $card_transmit_raw_details If set to true for card payments the sensitive card number and card verification number   will be transmitted directly rather than being tokenised. This makes the payment quicker  but more exposed to client side flaws such as cross site scripting.
     *
     * @return self
     */
    public function setCardTransmitRawDetails($card_transmit_raw_details)
    {
        if (is_null($card_transmit_raw_details)) {
            throw new \InvalidArgumentException('non-nullable card_transmit_raw_details cannot be null');
        }
        $this->container['card_transmit_raw_details'] = $card_transmit_raw_details;

        return $this;
    }

    /**
     * Gets card_processor_merchant_id
     *
     * @return string|null
     */
    public function getCardProcessorMerchantId()
    {
        return $this->container['card_processor_merchant_id'];
    }

    /**
     * Sets card_processor_merchant_id
     *
     * @param string|null $card_processor_merchant_id Optional field that if specified indicates the processor merchant ID that should be used  to process any card payments. Mainly useful where a merchant has multiple processor  merchant ID's. If left empty the default merchant card settings will be used.
     *
     * @return self
     */
    public function setCardProcessorMerchantId($card_processor_merchant_id)
    {
        if (is_null($card_processor_merchant_id)) {
            array_push($this->openAPINullablesSetToNull, 'card_processor_merchant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_processor_merchant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($card_processor_merchant_id) && (!preg_match("/[a-zA-Z0-9]+/", ObjectSerializer::toString($card_processor_merchant_id)))) {
            throw new \InvalidArgumentException("invalid value for \$card_processor_merchant_id when calling NoFrixionMoneyMoovModelsPaymentRequestCreate., must conform to the pattern /[a-zA-Z0-9]+/.");
        }

        $this->container['card_processor_merchant_id'] = $card_processor_merchant_id;

        return $this;
    }

    /**
     * Gets ignore_address_verification
     *
     * @return bool|null
     */
    public function getIgnoreAddressVerification()
    {
        return $this->container['ignore_address_verification'];
    }

    /**
     * Sets ignore_address_verification
     *
     * @param bool|null $ignore_address_verification If set to true the card payment gateway will be directed to proceed with a payment even if the  address verification checks fails.
     *
     * @return self
     */
    public function setIgnoreAddressVerification($ignore_address_verification)
    {
        if (is_null($ignore_address_verification)) {
            throw new \InvalidArgumentException('non-nullable ignore_address_verification cannot be null');
        }
        $this->container['ignore_address_verification'] = $ignore_address_verification;

        return $this;
    }

    /**
     * Gets card_ignore_cvn
     *
     * @return bool|null
     */
    public function getCardIgnoreCvn()
    {
        return $this->container['card_ignore_cvn'];
    }

    /**
     * Sets card_ignore_cvn
     *
     * @param bool|null $card_ignore_cvn If set to true the card payment gateway will be directed to proceed with a payment even if the  card verification number check fails.
     *
     * @return self
     */
    public function setCardIgnoreCvn($card_ignore_cvn)
    {
        if (is_null($card_ignore_cvn)) {
            throw new \InvalidArgumentException('non-nullable card_ignore_cvn cannot be null');
        }
        $this->container['card_ignore_cvn'] = $card_ignore_cvn;

        return $this;
    }

    /**
     * Gets use_hosted_payment_page
     *
     * @return bool|null
     */
    public function getUseHostedPaymentPage()
    {
        return $this->container['use_hosted_payment_page'];
    }

    /**
     * Sets use_hosted_payment_page
     *
     * @param bool|null $use_hosted_payment_page If set to true, and the merchant is configured for hosted payment pages, the base and callback URLs  will be set to use the hosted payment page.
     *
     * @return self
     */
    public function setUseHostedPaymentPage($use_hosted_payment_page)
    {
        if (is_null($use_hosted_payment_page)) {
            throw new \InvalidArgumentException('non-nullable use_hosted_payment_page cannot be null');
        }
        $this->container['use_hosted_payment_page'] = $use_hosted_payment_page;

        return $this;
    }

    /**
     * Gets card_no_payer_authentication
     *
     * @return bool|null
     */
    public function getCardNoPayerAuthentication()
    {
        return $this->container['card_no_payer_authentication'];
    }

    /**
     * Sets card_no_payer_authentication
     *
     * @param bool|null $card_no_payer_authentication If set to true for card payments no attempt will be made to use payer authentication (3-D Secure and equivalent).  Skipping payer authentication can help avoid failed payment attempts when a payer is not enrolled or when they  can't be bothered completing their issuing bank's authentication steps. A disadvantage is it exposes the merchant   to liability for charge backs.
     *
     * @return self
     */
    public function setCardNoPayerAuthentication($card_no_payer_authentication)
    {
        if (is_null($card_no_payer_authentication)) {
            throw new \InvalidArgumentException('non-nullable card_no_payer_authentication cannot be null');
        }
        $this->container['card_no_payer_authentication'] = $card_no_payer_authentication;

        return $this;
    }

    /**
     * Gets partial_payment_method
     *
     * @return string|null
     */
    public function getPartialPaymentMethod()
    {
        return $this->container['partial_payment_method'];
    }

    /**
     * Sets partial_payment_method
     *
     * @param string|null $partial_payment_method The approach to use, or not, for accepting partial payments.
     *
     * @return self
     */
    public function setPartialPaymentMethod($partial_payment_method)
    {
        if (is_null($partial_payment_method)) {
            throw new \InvalidArgumentException('non-nullable partial_payment_method cannot be null');
        }
        $allowedValues = $this->getPartialPaymentMethodAllowableValues();
        if (!in_array($partial_payment_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'partial_payment_method', must be one of '%s'",
                    $partial_payment_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['partial_payment_method'] = $partial_payment_method;

        return $this;
    }

    /**
     * Gets customer_email_address
     *
     * @return string|null
     */
    public function getCustomerEmailAddress()
    {
        return $this->container['customer_email_address'];
    }

    /**
     * Sets customer_email_address
     *
     * @param string|null $customer_email_address Optional email address for the customer. If the tokenise card option is set then the customer email address  is mandatory.
     *
     * @return self
     */
    public function setCustomerEmailAddress($customer_email_address)
    {
        if (is_null($customer_email_address)) {
            array_push($this->openAPINullablesSetToNull, 'customer_email_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_email_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_email_address'] = $customer_email_address;

        return $this;
    }

    /**
     * Gets payment_processor
     *
     * @return string|null
     */
    public function getPaymentProcessor()
    {
        return $this->container['payment_processor'];
    }

    /**
     * Sets payment_processor
     *
     * @param string|null $payment_processor Lists the supported card and PIS processors.
     *
     * @return self
     */
    public function setPaymentProcessor($payment_processor)
    {
        if (is_null($payment_processor)) {
            throw new \InvalidArgumentException('non-nullable payment_processor cannot be null');
        }
        $allowedValues = $this->getPaymentProcessorAllowableValues();
        if (!in_array($payment_processor, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_processor', must be one of '%s'",
                    $payment_processor,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_processor'] = $payment_processor;

        return $this;
    }

    /**
     * Gets lightning_invoice
     *
     * @return string|null
     */
    public function getLightningInvoice()
    {
        return $this->container['lightning_invoice'];
    }

    /**
     * Sets lightning_invoice
     *
     * @param string|null $lightning_invoice lightning_invoice
     *
     * @return self
     */
    public function setLightningInvoice($lightning_invoice)
    {
        if (is_null($lightning_invoice)) {
            array_push($this->openAPINullablesSetToNull, 'lightning_invoice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lightning_invoice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lightning_invoice'] = $lightning_invoice;

        return $this;
    }

    /**
     * Gets lightning_invoice_expires_at
     *
     * @return \DateTime|null
     */
    public function getLightningInvoiceExpiresAt()
    {
        return $this->container['lightning_invoice_expires_at'];
    }

    /**
     * Sets lightning_invoice_expires_at
     *
     * @param \DateTime|null $lightning_invoice_expires_at lightning_invoice_expires_at
     *
     * @return self
     */
    public function setLightningInvoiceExpiresAt($lightning_invoice_expires_at)
    {
        if (is_null($lightning_invoice_expires_at)) {
            array_push($this->openAPINullablesSetToNull, 'lightning_invoice_expires_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lightning_invoice_expires_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lightning_invoice_expires_at'] = $lightning_invoice_expires_at;

        return $this;
    }

    /**
     * Gets notification_email_addresses
     *
     * @return string|null
     */
    public function getNotificationEmailAddresses()
    {
        return $this->container['notification_email_addresses'];
    }

    /**
     * Sets notification_email_addresses
     *
     * @param string|null $notification_email_addresses notification_email_addresses
     *
     * @return self
     */
    public function setNotificationEmailAddresses($notification_email_addresses)
    {
        if (is_null($notification_email_addresses)) {
            array_push($this->openAPINullablesSetToNull, 'notification_email_addresses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notification_email_addresses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notification_email_addresses'] = $notification_email_addresses;

        return $this;
    }

    /**
     * Gets priority_bank_id
     *
     * @return string|null
     */
    public function getPriorityBankId()
    {
        return $this->container['priority_bank_id'];
    }

    /**
     * Sets priority_bank_id
     *
     * @param string|null $priority_bank_id The ID of the bank that is set as the priority bank for display on pay element.
     *
     * @return self
     */
    public function setPriorityBankId($priority_bank_id)
    {
        if (is_null($priority_bank_id)) {
            array_push($this->openAPINullablesSetToNull, 'priority_bank_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('priority_bank_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['priority_bank_id'] = $priority_bank_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title A generic field to contain any additional data that the merchant wishes to store against the payment request.  E.g. product or service information.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets partial_payment_steps
     *
     * @return string|null
     */
    public function getPartialPaymentSteps()
    {
        return $this->container['partial_payment_steps'];
    }

    /**
     * Sets partial_payment_steps
     *
     * @param string|null $partial_payment_steps An optional comma separated list of partial payment amounts. The amounts represent guidance, or suggestions, as to  how the payer will be requested to make partial payments.
     *
     * @return self
     */
    public function setPartialPaymentSteps($partial_payment_steps)
    {
        if (is_null($partial_payment_steps)) {
            array_push($this->openAPINullablesSetToNull, 'partial_payment_steps');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('partial_payment_steps', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['partial_payment_steps'] = $partial_payment_steps;

        return $this;
    }

    /**
     * Gets payrun_id
     *
     * @return string|null
     */
    public function getPayrunId()
    {
        return $this->container['payrun_id'];
    }

    /**
     * Sets payrun_id
     *
     * @param string|null $payrun_id Optional, if set it indicates that this payment request will be used to top up a payment account for a pay run.
     *
     * @return self
     */
    public function setPayrunId($payrun_id)
    {
        if (is_null($payrun_id)) {
            array_push($this->openAPINullablesSetToNull, 'payrun_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payrun_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payrun_id'] = $payrun_id;

        return $this;
    }

    /**
     * Gets tag_ids
     *
     * @return string[]|null
     */
    public function getTagIds()
    {
        return $this->container['tag_ids'];
    }

    /**
     * Sets tag_ids
     *
     * @param string[]|null $tag_ids An optional list of tag ids to add to the payment request
     *
     * @return self
     */
    public function setTagIds($tag_ids)
    {
        if (is_null($tag_ids)) {
            array_push($this->openAPINullablesSetToNull, 'tag_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tag_ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tag_ids'] = $tag_ids;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags An optional list of tag values to set on the payment request. If no matching  tag exists it will be created.
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            array_push($this->openAPINullablesSetToNull, 'tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


