<?php
/**
 * NoFrixionDataModelsBankingCirclePhysicalAccountEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionDataModelsBankingCirclePhysicalAccountEntity Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionDataModelsBankingCirclePhysicalAccountEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.DataModels.BankingCirclePhysicalAccountEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'description' => 'string',
        'currency' => 'string',
        'physical_account_id' => 'string',
        'physical_account_iban' => 'string',
        'supplier_name' => 'string',
        'agency_bic' => 'string',
        'last_balance' => 'float',
        'is_default' => 'bool',
        'inserted' => '\DateTime',
        'last_updated' => '\DateTime',
        'is_safeguard' => 'bool',
        'is_operating' => 'bool',
        'is_fee' => 'bool',
        'is_fiduciary' => 'bool',
        'linked_fiduciary_account_id' => 'string',
        'company_number' => 'string',
        'default_payment_rail' => 'string',
        'accounts' => '\Nofrixion\Client\Model\NoFrixionDataModelsAccountEntity[]',
        'merchants' => '\Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity[]',
        'linked_fiduciary_account' => '\Nofrixion\Client\Model\NoFrixionDataModelsBankingCirclePhysicalAccountEntity',
        'inverse_linked_fiduciary_account' => '\Nofrixion\Client\Model\NoFrixionDataModelsBankingCirclePhysicalAccountEntity[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'description' => null,
        'currency' => null,
        'physical_account_id' => 'uuid',
        'physical_account_iban' => null,
        'supplier_name' => null,
        'agency_bic' => null,
        'last_balance' => 'double',
        'is_default' => null,
        'inserted' => 'date-time',
        'last_updated' => 'date-time',
        'is_safeguard' => null,
        'is_operating' => null,
        'is_fee' => null,
        'is_fiduciary' => null,
        'linked_fiduciary_account_id' => 'uuid',
        'company_number' => null,
        'default_payment_rail' => null,
        'accounts' => null,
        'merchants' => null,
        'linked_fiduciary_account' => null,
        'inverse_linked_fiduciary_account' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'description' => true,
        'currency' => false,
        'physical_account_id' => false,
        'physical_account_iban' => true,
        'supplier_name' => false,
        'agency_bic' => true,
        'last_balance' => false,
        'is_default' => false,
        'inserted' => false,
        'last_updated' => false,
        'is_safeguard' => false,
        'is_operating' => false,
        'is_fee' => false,
        'is_fiduciary' => false,
        'linked_fiduciary_account_id' => true,
        'company_number' => true,
        'default_payment_rail' => false,
        'accounts' => true,
        'merchants' => true,
        'linked_fiduciary_account' => false,
        'inverse_linked_fiduciary_account' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'description' => 'description',
        'currency' => 'currency',
        'physical_account_id' => 'physicalAccountID',
        'physical_account_iban' => 'physicalAccountIBAN',
        'supplier_name' => 'supplierName',
        'agency_bic' => 'agencyBIC',
        'last_balance' => 'lastBalance',
        'is_default' => 'isDefault',
        'inserted' => 'inserted',
        'last_updated' => 'lastUpdated',
        'is_safeguard' => 'isSafeguard',
        'is_operating' => 'isOperating',
        'is_fee' => 'isFee',
        'is_fiduciary' => 'isFiduciary',
        'linked_fiduciary_account_id' => 'linkedFiduciaryAccountID',
        'company_number' => 'companyNumber',
        'default_payment_rail' => 'defaultPaymentRail',
        'accounts' => 'accounts',
        'merchants' => 'merchants',
        'linked_fiduciary_account' => 'linkedFiduciaryAccount',
        'inverse_linked_fiduciary_account' => 'inverseLinkedFiduciaryAccount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'description' => 'setDescription',
        'currency' => 'setCurrency',
        'physical_account_id' => 'setPhysicalAccountId',
        'physical_account_iban' => 'setPhysicalAccountIban',
        'supplier_name' => 'setSupplierName',
        'agency_bic' => 'setAgencyBic',
        'last_balance' => 'setLastBalance',
        'is_default' => 'setIsDefault',
        'inserted' => 'setInserted',
        'last_updated' => 'setLastUpdated',
        'is_safeguard' => 'setIsSafeguard',
        'is_operating' => 'setIsOperating',
        'is_fee' => 'setIsFee',
        'is_fiduciary' => 'setIsFiduciary',
        'linked_fiduciary_account_id' => 'setLinkedFiduciaryAccountId',
        'company_number' => 'setCompanyNumber',
        'default_payment_rail' => 'setDefaultPaymentRail',
        'accounts' => 'setAccounts',
        'merchants' => 'setMerchants',
        'linked_fiduciary_account' => 'setLinkedFiduciaryAccount',
        'inverse_linked_fiduciary_account' => 'setInverseLinkedFiduciaryAccount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'description' => 'getDescription',
        'currency' => 'getCurrency',
        'physical_account_id' => 'getPhysicalAccountId',
        'physical_account_iban' => 'getPhysicalAccountIban',
        'supplier_name' => 'getSupplierName',
        'agency_bic' => 'getAgencyBic',
        'last_balance' => 'getLastBalance',
        'is_default' => 'getIsDefault',
        'inserted' => 'getInserted',
        'last_updated' => 'getLastUpdated',
        'is_safeguard' => 'getIsSafeguard',
        'is_operating' => 'getIsOperating',
        'is_fee' => 'getIsFee',
        'is_fiduciary' => 'getIsFiduciary',
        'linked_fiduciary_account_id' => 'getLinkedFiduciaryAccountId',
        'company_number' => 'getCompanyNumber',
        'default_payment_rail' => 'getDefaultPaymentRail',
        'accounts' => 'getAccounts',
        'merchants' => 'getMerchants',
        'linked_fiduciary_account' => 'getLinkedFiduciaryAccount',
        'inverse_linked_fiduciary_account' => 'getInverseLinkedFiduciaryAccount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CURRENCY_NONE = 'NONE';
    public const CURRENCY_GBP = 'GBP';
    public const CURRENCY_EUR = 'EUR';
    public const CURRENCY_BTC = 'BTC';
    public const SUPPLIER_NAME_NONE = 'None';
    public const SUPPLIER_NAME_CYBER_SOURCE = 'CyberSource';
    public const SUPPLIER_NAME_CHECKOUT = 'Checkout';
    public const SUPPLIER_NAME_STRIPE = 'Stripe';
    public const SUPPLIER_NAME_MODULR = 'Modulr';
    public const SUPPLIER_NAME_PLAID = 'Plaid';
    public const SUPPLIER_NAME_YAPILY = 'Yapily';
    public const SUPPLIER_NAME_NOFRIXION = 'Nofrixion';
    public const SUPPLIER_NAME_BITCOIN = 'Bitcoin';
    public const SUPPLIER_NAME_BITCOIN_TESTNET = 'BitcoinTestnet';
    public const SUPPLIER_NAME_BANKING_CIRCLE = 'BankingCircle';
    public const SUPPLIER_NAME_BANKING_CIRCLE_AGENCY = 'BankingCircleAgency';
    public const SUPPLIER_NAME_SIMULATOR = 'Simulator';
    public const SUPPLIER_NAME_LIGHTNING = 'Lightning';
    public const SUPPLIER_NAME_LIGHTNING_TESTNET = 'LightningTestnet';
    public const SUPPLIER_NAME_BANKING_CIRCLE_DIRECT_DEBIT = 'BankingCircleDirectDebit';
    public const SUPPLIER_NAME_TRIBE = 'Tribe';
    public const DEFAULT_PAYMENT_RAIL__DEFAULT = 'Default';
    public const DEFAULT_PAYMENT_RAIL_SEPA_CT = 'SEPA_CT';
    public const DEFAULT_PAYMENT_RAIL_SEPA_INST = 'SEPA_INST';
    public const DEFAULT_PAYMENT_RAIL_TARGET2 = 'TARGET2';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_NONE,
            self::CURRENCY_GBP,
            self::CURRENCY_EUR,
            self::CURRENCY_BTC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupplierNameAllowableValues()
    {
        return [
            self::SUPPLIER_NAME_NONE,
            self::SUPPLIER_NAME_CYBER_SOURCE,
            self::SUPPLIER_NAME_CHECKOUT,
            self::SUPPLIER_NAME_STRIPE,
            self::SUPPLIER_NAME_MODULR,
            self::SUPPLIER_NAME_PLAID,
            self::SUPPLIER_NAME_YAPILY,
            self::SUPPLIER_NAME_NOFRIXION,
            self::SUPPLIER_NAME_BITCOIN,
            self::SUPPLIER_NAME_BITCOIN_TESTNET,
            self::SUPPLIER_NAME_BANKING_CIRCLE,
            self::SUPPLIER_NAME_BANKING_CIRCLE_AGENCY,
            self::SUPPLIER_NAME_SIMULATOR,
            self::SUPPLIER_NAME_LIGHTNING,
            self::SUPPLIER_NAME_LIGHTNING_TESTNET,
            self::SUPPLIER_NAME_BANKING_CIRCLE_DIRECT_DEBIT,
            self::SUPPLIER_NAME_TRIBE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultPaymentRailAllowableValues()
    {
        return [
            self::DEFAULT_PAYMENT_RAIL__DEFAULT,
            self::DEFAULT_PAYMENT_RAIL_SEPA_CT,
            self::DEFAULT_PAYMENT_RAIL_SEPA_INST,
            self::DEFAULT_PAYMENT_RAIL_TARGET2,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('physical_account_id', $data ?? [], null);
        $this->setIfExists('physical_account_iban', $data ?? [], null);
        $this->setIfExists('supplier_name', $data ?? [], null);
        $this->setIfExists('agency_bic', $data ?? [], null);
        $this->setIfExists('last_balance', $data ?? [], null);
        $this->setIfExists('is_default', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('is_safeguard', $data ?? [], null);
        $this->setIfExists('is_operating', $data ?? [], null);
        $this->setIfExists('is_fee', $data ?? [], null);
        $this->setIfExists('is_fiduciary', $data ?? [], null);
        $this->setIfExists('linked_fiduciary_account_id', $data ?? [], null);
        $this->setIfExists('company_number', $data ?? [], null);
        $this->setIfExists('default_payment_rail', $data ?? [], null);
        $this->setIfExists('accounts', $data ?? [], null);
        $this->setIfExists('merchants', $data ?? [], null);
        $this->setIfExists('linked_fiduciary_account', $data ?? [], null);
        $this->setIfExists('inverse_linked_fiduciary_account', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSupplierNameAllowableValues();
        if (!is_null($this->container['supplier_name']) && !in_array($this->container['supplier_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'supplier_name', must be one of '%s'",
                $this->container['supplier_name'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDefaultPaymentRailAllowableValues();
        if (!is_null($this->container['default_payment_rail']) && !in_array($this->container['default_payment_rail'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_payment_rail', must be one of '%s'",
                $this->container['default_payment_rail'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets physical_account_id
     *
     * @return string|null
     */
    public function getPhysicalAccountId()
    {
        return $this->container['physical_account_id'];
    }

    /**
     * Sets physical_account_id
     *
     * @param string|null $physical_account_id physical_account_id
     *
     * @return self
     */
    public function setPhysicalAccountId($physical_account_id)
    {
        if (is_null($physical_account_id)) {
            throw new \InvalidArgumentException('non-nullable physical_account_id cannot be null');
        }
        $this->container['physical_account_id'] = $physical_account_id;

        return $this;
    }

    /**
     * Gets physical_account_iban
     *
     * @return string|null
     */
    public function getPhysicalAccountIban()
    {
        return $this->container['physical_account_iban'];
    }

    /**
     * Sets physical_account_iban
     *
     * @param string|null $physical_account_iban physical_account_iban
     *
     * @return self
     */
    public function setPhysicalAccountIban($physical_account_iban)
    {
        if (is_null($physical_account_iban)) {
            array_push($this->openAPINullablesSetToNull, 'physical_account_iban');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('physical_account_iban', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['physical_account_iban'] = $physical_account_iban;

        return $this;
    }

    /**
     * Gets supplier_name
     *
     * @return string|null
     */
    public function getSupplierName()
    {
        return $this->container['supplier_name'];
    }

    /**
     * Sets supplier_name
     *
     * @param string|null $supplier_name Lists the supported card and PIS processors.
     *
     * @return self
     */
    public function setSupplierName($supplier_name)
    {
        if (is_null($supplier_name)) {
            throw new \InvalidArgumentException('non-nullable supplier_name cannot be null');
        }
        $allowedValues = $this->getSupplierNameAllowableValues();
        if (!in_array($supplier_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'supplier_name', must be one of '%s'",
                    $supplier_name,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['supplier_name'] = $supplier_name;

        return $this;
    }

    /**
     * Gets agency_bic
     *
     * @return string|null
     */
    public function getAgencyBic()
    {
        return $this->container['agency_bic'];
    }

    /**
     * Sets agency_bic
     *
     * @param string|null $agency_bic agency_bic
     *
     * @return self
     */
    public function setAgencyBic($agency_bic)
    {
        if (is_null($agency_bic)) {
            array_push($this->openAPINullablesSetToNull, 'agency_bic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('agency_bic', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['agency_bic'] = $agency_bic;

        return $this;
    }

    /**
     * Gets last_balance
     *
     * @return float|null
     */
    public function getLastBalance()
    {
        return $this->container['last_balance'];
    }

    /**
     * Sets last_balance
     *
     * @param float|null $last_balance last_balance
     *
     * @return self
     */
    public function setLastBalance($last_balance)
    {
        if (is_null($last_balance)) {
            throw new \InvalidArgumentException('non-nullable last_balance cannot be null');
        }
        $this->container['last_balance'] = $last_balance;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool|null
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool|null $is_default is_default
     *
     * @return self
     */
    public function setIsDefault($is_default)
    {
        if (is_null($is_default)) {
            throw new \InvalidArgumentException('non-nullable is_default cannot be null');
        }
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted inserted
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets is_safeguard
     *
     * @return bool|null
     */
    public function getIsSafeguard()
    {
        return $this->container['is_safeguard'];
    }

    /**
     * Sets is_safeguard
     *
     * @param bool|null $is_safeguard is_safeguard
     *
     * @return self
     */
    public function setIsSafeguard($is_safeguard)
    {
        if (is_null($is_safeguard)) {
            throw new \InvalidArgumentException('non-nullable is_safeguard cannot be null');
        }
        $this->container['is_safeguard'] = $is_safeguard;

        return $this;
    }

    /**
     * Gets is_operating
     *
     * @return bool|null
     */
    public function getIsOperating()
    {
        return $this->container['is_operating'];
    }

    /**
     * Sets is_operating
     *
     * @param bool|null $is_operating is_operating
     *
     * @return self
     */
    public function setIsOperating($is_operating)
    {
        if (is_null($is_operating)) {
            throw new \InvalidArgumentException('non-nullable is_operating cannot be null');
        }
        $this->container['is_operating'] = $is_operating;

        return $this;
    }

    /**
     * Gets is_fee
     *
     * @return bool|null
     */
    public function getIsFee()
    {
        return $this->container['is_fee'];
    }

    /**
     * Sets is_fee
     *
     * @param bool|null $is_fee is_fee
     *
     * @return self
     */
    public function setIsFee($is_fee)
    {
        if (is_null($is_fee)) {
            throw new \InvalidArgumentException('non-nullable is_fee cannot be null');
        }
        $this->container['is_fee'] = $is_fee;

        return $this;
    }

    /**
     * Gets is_fiduciary
     *
     * @return bool|null
     */
    public function getIsFiduciary()
    {
        return $this->container['is_fiduciary'];
    }

    /**
     * Sets is_fiduciary
     *
     * @param bool|null $is_fiduciary is_fiduciary
     *
     * @return self
     */
    public function setIsFiduciary($is_fiduciary)
    {
        if (is_null($is_fiduciary)) {
            throw new \InvalidArgumentException('non-nullable is_fiduciary cannot be null');
        }
        $this->container['is_fiduciary'] = $is_fiduciary;

        return $this;
    }

    /**
     * Gets linked_fiduciary_account_id
     *
     * @return string|null
     */
    public function getLinkedFiduciaryAccountId()
    {
        return $this->container['linked_fiduciary_account_id'];
    }

    /**
     * Sets linked_fiduciary_account_id
     *
     * @param string|null $linked_fiduciary_account_id linked_fiduciary_account_id
     *
     * @return self
     */
    public function setLinkedFiduciaryAccountId($linked_fiduciary_account_id)
    {
        if (is_null($linked_fiduciary_account_id)) {
            array_push($this->openAPINullablesSetToNull, 'linked_fiduciary_account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('linked_fiduciary_account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['linked_fiduciary_account_id'] = $linked_fiduciary_account_id;

        return $this;
    }

    /**
     * Gets company_number
     *
     * @return string|null
     */
    public function getCompanyNumber()
    {
        return $this->container['company_number'];
    }

    /**
     * Sets company_number
     *
     * @param string|null $company_number company_number
     *
     * @return self
     */
    public function setCompanyNumber($company_number)
    {
        if (is_null($company_number)) {
            array_push($this->openAPINullablesSetToNull, 'company_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['company_number'] = $company_number;

        return $this;
    }

    /**
     * Gets default_payment_rail
     *
     * @return string|null
     */
    public function getDefaultPaymentRail()
    {
        return $this->container['default_payment_rail'];
    }

    /**
     * Sets default_payment_rail
     *
     * @param string|null $default_payment_rail default_payment_rail
     *
     * @return self
     */
    public function setDefaultPaymentRail($default_payment_rail)
    {
        if (is_null($default_payment_rail)) {
            throw new \InvalidArgumentException('non-nullable default_payment_rail cannot be null');
        }
        $allowedValues = $this->getDefaultPaymentRailAllowableValues();
        if (!in_array($default_payment_rail, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_payment_rail', must be one of '%s'",
                    $default_payment_rail,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_payment_rail'] = $default_payment_rail;

        return $this;
    }

    /**
     * Gets accounts
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsAccountEntity[]|null
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsAccountEntity[]|null $accounts accounts
     *
     * @return self
     */
    public function setAccounts($accounts)
    {
        if (is_null($accounts)) {
            array_push($this->openAPINullablesSetToNull, 'accounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets merchants
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity[]|null
     */
    public function getMerchants()
    {
        return $this->container['merchants'];
    }

    /**
     * Sets merchants
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity[]|null $merchants merchants
     *
     * @return self
     */
    public function setMerchants($merchants)
    {
        if (is_null($merchants)) {
            array_push($this->openAPINullablesSetToNull, 'merchants');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchants', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchants'] = $merchants;

        return $this;
    }

    /**
     * Gets linked_fiduciary_account
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsBankingCirclePhysicalAccountEntity|null
     */
    public function getLinkedFiduciaryAccount()
    {
        return $this->container['linked_fiduciary_account'];
    }

    /**
     * Sets linked_fiduciary_account
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsBankingCirclePhysicalAccountEntity|null $linked_fiduciary_account linked_fiduciary_account
     *
     * @return self
     */
    public function setLinkedFiduciaryAccount($linked_fiduciary_account)
    {
        if (is_null($linked_fiduciary_account)) {
            throw new \InvalidArgumentException('non-nullable linked_fiduciary_account cannot be null');
        }
        $this->container['linked_fiduciary_account'] = $linked_fiduciary_account;

        return $this;
    }

    /**
     * Gets inverse_linked_fiduciary_account
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsBankingCirclePhysicalAccountEntity[]|null
     */
    public function getInverseLinkedFiduciaryAccount()
    {
        return $this->container['inverse_linked_fiduciary_account'];
    }

    /**
     * Sets inverse_linked_fiduciary_account
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsBankingCirclePhysicalAccountEntity[]|null $inverse_linked_fiduciary_account inverse_linked_fiduciary_account
     *
     * @return self
     */
    public function setInverseLinkedFiduciaryAccount($inverse_linked_fiduciary_account)
    {
        if (is_null($inverse_linked_fiduciary_account)) {
            array_push($this->openAPINullablesSetToNull, 'inverse_linked_fiduciary_account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inverse_linked_fiduciary_account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['inverse_linked_fiduciary_account'] = $inverse_linked_fiduciary_account;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


