<?php
/**
 * NoFrixionDataModelsAccountEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionDataModelsAccountEntity Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionDataModelsAccountEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.DataModels.AccountEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'merchant_id' => 'string',
        'iban' => 'string',
        'sort_code' => 'int',
        'account_number' => 'int',
        'bic' => 'string',
        'account_name' => 'string',
        'currency' => 'string',
        'balance' => 'float',
        'connected_account_balance' => 'float',
        'inserted' => '\DateTime',
        'last_updated' => '\DateTime',
        'supplier_last_settled' => '\DateTime',
        'supplier_settlement_status' => 'string',
        'supplier_account_id' => 'string',
        'supplier_name' => 'string',
        'is_default' => 'bool',
        'supplier_next_transaction_id' => 'string',
        'bitcoin_key_path_index' => 'int',
        'bitcoin_created_at_block_height' => 'int',
        'bitcoin_address' => 'string',
        'bitcoin_account_ext_pub_key' => 'string',
        'submitted_payouts_balance' => 'float',
        'is_connected_account' => 'bool',
        'is_archived' => 'bool',
        'bank_name' => 'string',
        'consent_id' => 'string',
        'banking_circle_physical_account_id' => 'string',
        'user_id' => 'string',
        'account_type' => 'string',
        'on_hold_payins_balance' => 'float',
        'tribe_account_id' => 'string',
        'default_payment_rail' => 'string',
        'user' => '\Nofrixion\Client\Model\NoFrixionDataModelsUserEntity',
        'merchant' => '\Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity',
        'open_banking_consent' => '\Nofrixion\Client\Model\NoFrixionDataModelsOpenBankingConsentEntity',
        'account_business_settings' => '\Nofrixion\Client\Model\NoFrixionDataModelsAccountBusinessSettingEntity[]',
        'payment_send_accounts' => '\Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity[]',
        'payment_send_destination_accounts' => '\Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity[]',
        'transactions' => '\Nofrixion\Client\Model\NoFrixionDataModelsTransactionEntity[]',
        'ais_transactions' => '\Nofrixion\Client\Model\NoFrixionDataModelsAISTransactionEntity[]',
        'rules' => '\Nofrixion\Client\Model\NoFrixionDataModelsRuleEntity[]',
        'rule_destinations' => '\Nofrixion\Client\Model\NoFrixionDataModelsRuleDestinationEntity[]',
        'report_accounts' => '\Nofrixion\Client\Model\NoFrixionDataModelsReportAccountEntity[]',
        'beneficiary_source_accounts' => '\Nofrixion\Client\Model\NoFrixionDataModelsBeneficiarySourceAccountEntity[]',
        'payrun_source_accounts' => '\Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunSourceAccountEntity[]',
        'banking_circle_physical_account' => '\Nofrixion\Client\Model\NoFrixionDataModelsBankingCirclePhysicalAccountEntity',
        'xero_bank_feed_connection' => '\Nofrixion\Client\Model\NoFrixionDataModelsXeroBankFeedConnectionEntity',
        'role_user_accounts' => '\Nofrixion\Client\Model\NoFrixionDataModelsRoleUserAccountEntity[]',
        'available_balance' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'merchant_id' => 'uuid',
        'iban' => null,
        'sort_code' => 'int32',
        'account_number' => 'int32',
        'bic' => null,
        'account_name' => null,
        'currency' => null,
        'balance' => 'double',
        'connected_account_balance' => 'double',
        'inserted' => 'date-time',
        'last_updated' => 'date-time',
        'supplier_last_settled' => 'date-time',
        'supplier_settlement_status' => null,
        'supplier_account_id' => null,
        'supplier_name' => null,
        'is_default' => null,
        'supplier_next_transaction_id' => null,
        'bitcoin_key_path_index' => 'int32',
        'bitcoin_created_at_block_height' => 'int64',
        'bitcoin_address' => null,
        'bitcoin_account_ext_pub_key' => null,
        'submitted_payouts_balance' => 'double',
        'is_connected_account' => null,
        'is_archived' => null,
        'bank_name' => null,
        'consent_id' => 'uuid',
        'banking_circle_physical_account_id' => 'uuid',
        'user_id' => 'uuid',
        'account_type' => null,
        'on_hold_payins_balance' => 'double',
        'tribe_account_id' => null,
        'default_payment_rail' => null,
        'user' => null,
        'merchant' => null,
        'open_banking_consent' => null,
        'account_business_settings' => null,
        'payment_send_accounts' => null,
        'payment_send_destination_accounts' => null,
        'transactions' => null,
        'ais_transactions' => null,
        'rules' => null,
        'rule_destinations' => null,
        'report_accounts' => null,
        'beneficiary_source_accounts' => null,
        'payrun_source_accounts' => null,
        'banking_circle_physical_account' => null,
        'xero_bank_feed_connection' => null,
        'role_user_accounts' => null,
        'available_balance' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'merchant_id' => false,
        'iban' => true,
        'sort_code' => true,
        'account_number' => true,
        'bic' => true,
        'account_name' => true,
        'currency' => false,
        'balance' => false,
        'connected_account_balance' => false,
        'inserted' => false,
        'last_updated' => false,
        'supplier_last_settled' => true,
        'supplier_settlement_status' => false,
        'supplier_account_id' => true,
        'supplier_name' => false,
        'is_default' => false,
        'supplier_next_transaction_id' => true,
        'bitcoin_key_path_index' => false,
        'bitcoin_created_at_block_height' => false,
        'bitcoin_address' => true,
        'bitcoin_account_ext_pub_key' => true,
        'submitted_payouts_balance' => false,
        'is_connected_account' => false,
        'is_archived' => false,
        'bank_name' => true,
        'consent_id' => true,
        'banking_circle_physical_account_id' => true,
        'user_id' => true,
        'account_type' => false,
        'on_hold_payins_balance' => false,
        'tribe_account_id' => true,
        'default_payment_rail' => false,
        'user' => false,
        'merchant' => false,
        'open_banking_consent' => false,
        'account_business_settings' => true,
        'payment_send_accounts' => true,
        'payment_send_destination_accounts' => true,
        'transactions' => true,
        'ais_transactions' => true,
        'rules' => true,
        'rule_destinations' => true,
        'report_accounts' => true,
        'beneficiary_source_accounts' => true,
        'payrun_source_accounts' => true,
        'banking_circle_physical_account' => false,
        'xero_bank_feed_connection' => false,
        'role_user_accounts' => true,
        'available_balance' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'merchant_id' => 'merchantID',
        'iban' => 'iban',
        'sort_code' => 'sortCode',
        'account_number' => 'accountNumber',
        'bic' => 'bic',
        'account_name' => 'accountName',
        'currency' => 'currency',
        'balance' => 'balance',
        'connected_account_balance' => 'connectedAccountBalance',
        'inserted' => 'inserted',
        'last_updated' => 'lastUpdated',
        'supplier_last_settled' => 'supplierLastSettled',
        'supplier_settlement_status' => 'supplierSettlementStatus',
        'supplier_account_id' => 'supplierAccountID',
        'supplier_name' => 'supplierName',
        'is_default' => 'isDefault',
        'supplier_next_transaction_id' => 'supplierNextTransactionID',
        'bitcoin_key_path_index' => 'bitcoinKeyPathIndex',
        'bitcoin_created_at_block_height' => 'bitcoinCreatedAtBlockHeight',
        'bitcoin_address' => 'bitcoinAddress',
        'bitcoin_account_ext_pub_key' => 'bitcoinAccountExtPubKey',
        'submitted_payouts_balance' => 'submittedPayoutsBalance',
        'is_connected_account' => 'isConnectedAccount',
        'is_archived' => 'isArchived',
        'bank_name' => 'bankName',
        'consent_id' => 'consentID',
        'banking_circle_physical_account_id' => 'bankingCirclePhysicalAccountID',
        'user_id' => 'userID',
        'account_type' => 'accountType',
        'on_hold_payins_balance' => 'onHoldPayinsBalance',
        'tribe_account_id' => 'tribeAccountId',
        'default_payment_rail' => 'defaultPaymentRail',
        'user' => 'user',
        'merchant' => 'merchant',
        'open_banking_consent' => 'openBankingConsent',
        'account_business_settings' => 'accountBusinessSettings',
        'payment_send_accounts' => 'paymentSendAccounts',
        'payment_send_destination_accounts' => 'paymentSendDestinationAccounts',
        'transactions' => 'transactions',
        'ais_transactions' => 'aisTransactions',
        'rules' => 'rules',
        'rule_destinations' => 'ruleDestinations',
        'report_accounts' => 'reportAccounts',
        'beneficiary_source_accounts' => 'beneficiarySourceAccounts',
        'payrun_source_accounts' => 'payrunSourceAccounts',
        'banking_circle_physical_account' => 'bankingCirclePhysicalAccount',
        'xero_bank_feed_connection' => 'xeroBankFeedConnection',
        'role_user_accounts' => 'roleUserAccounts',
        'available_balance' => 'availableBalance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'merchant_id' => 'setMerchantId',
        'iban' => 'setIban',
        'sort_code' => 'setSortCode',
        'account_number' => 'setAccountNumber',
        'bic' => 'setBic',
        'account_name' => 'setAccountName',
        'currency' => 'setCurrency',
        'balance' => 'setBalance',
        'connected_account_balance' => 'setConnectedAccountBalance',
        'inserted' => 'setInserted',
        'last_updated' => 'setLastUpdated',
        'supplier_last_settled' => 'setSupplierLastSettled',
        'supplier_settlement_status' => 'setSupplierSettlementStatus',
        'supplier_account_id' => 'setSupplierAccountId',
        'supplier_name' => 'setSupplierName',
        'is_default' => 'setIsDefault',
        'supplier_next_transaction_id' => 'setSupplierNextTransactionId',
        'bitcoin_key_path_index' => 'setBitcoinKeyPathIndex',
        'bitcoin_created_at_block_height' => 'setBitcoinCreatedAtBlockHeight',
        'bitcoin_address' => 'setBitcoinAddress',
        'bitcoin_account_ext_pub_key' => 'setBitcoinAccountExtPubKey',
        'submitted_payouts_balance' => 'setSubmittedPayoutsBalance',
        'is_connected_account' => 'setIsConnectedAccount',
        'is_archived' => 'setIsArchived',
        'bank_name' => 'setBankName',
        'consent_id' => 'setConsentId',
        'banking_circle_physical_account_id' => 'setBankingCirclePhysicalAccountId',
        'user_id' => 'setUserId',
        'account_type' => 'setAccountType',
        'on_hold_payins_balance' => 'setOnHoldPayinsBalance',
        'tribe_account_id' => 'setTribeAccountId',
        'default_payment_rail' => 'setDefaultPaymentRail',
        'user' => 'setUser',
        'merchant' => 'setMerchant',
        'open_banking_consent' => 'setOpenBankingConsent',
        'account_business_settings' => 'setAccountBusinessSettings',
        'payment_send_accounts' => 'setPaymentSendAccounts',
        'payment_send_destination_accounts' => 'setPaymentSendDestinationAccounts',
        'transactions' => 'setTransactions',
        'ais_transactions' => 'setAisTransactions',
        'rules' => 'setRules',
        'rule_destinations' => 'setRuleDestinations',
        'report_accounts' => 'setReportAccounts',
        'beneficiary_source_accounts' => 'setBeneficiarySourceAccounts',
        'payrun_source_accounts' => 'setPayrunSourceAccounts',
        'banking_circle_physical_account' => 'setBankingCirclePhysicalAccount',
        'xero_bank_feed_connection' => 'setXeroBankFeedConnection',
        'role_user_accounts' => 'setRoleUserAccounts',
        'available_balance' => 'setAvailableBalance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'merchant_id' => 'getMerchantId',
        'iban' => 'getIban',
        'sort_code' => 'getSortCode',
        'account_number' => 'getAccountNumber',
        'bic' => 'getBic',
        'account_name' => 'getAccountName',
        'currency' => 'getCurrency',
        'balance' => 'getBalance',
        'connected_account_balance' => 'getConnectedAccountBalance',
        'inserted' => 'getInserted',
        'last_updated' => 'getLastUpdated',
        'supplier_last_settled' => 'getSupplierLastSettled',
        'supplier_settlement_status' => 'getSupplierSettlementStatus',
        'supplier_account_id' => 'getSupplierAccountId',
        'supplier_name' => 'getSupplierName',
        'is_default' => 'getIsDefault',
        'supplier_next_transaction_id' => 'getSupplierNextTransactionId',
        'bitcoin_key_path_index' => 'getBitcoinKeyPathIndex',
        'bitcoin_created_at_block_height' => 'getBitcoinCreatedAtBlockHeight',
        'bitcoin_address' => 'getBitcoinAddress',
        'bitcoin_account_ext_pub_key' => 'getBitcoinAccountExtPubKey',
        'submitted_payouts_balance' => 'getSubmittedPayoutsBalance',
        'is_connected_account' => 'getIsConnectedAccount',
        'is_archived' => 'getIsArchived',
        'bank_name' => 'getBankName',
        'consent_id' => 'getConsentId',
        'banking_circle_physical_account_id' => 'getBankingCirclePhysicalAccountId',
        'user_id' => 'getUserId',
        'account_type' => 'getAccountType',
        'on_hold_payins_balance' => 'getOnHoldPayinsBalance',
        'tribe_account_id' => 'getTribeAccountId',
        'default_payment_rail' => 'getDefaultPaymentRail',
        'user' => 'getUser',
        'merchant' => 'getMerchant',
        'open_banking_consent' => 'getOpenBankingConsent',
        'account_business_settings' => 'getAccountBusinessSettings',
        'payment_send_accounts' => 'getPaymentSendAccounts',
        'payment_send_destination_accounts' => 'getPaymentSendDestinationAccounts',
        'transactions' => 'getTransactions',
        'ais_transactions' => 'getAisTransactions',
        'rules' => 'getRules',
        'rule_destinations' => 'getRuleDestinations',
        'report_accounts' => 'getReportAccounts',
        'beneficiary_source_accounts' => 'getBeneficiarySourceAccounts',
        'payrun_source_accounts' => 'getPayrunSourceAccounts',
        'banking_circle_physical_account' => 'getBankingCirclePhysicalAccount',
        'xero_bank_feed_connection' => 'getXeroBankFeedConnection',
        'role_user_accounts' => 'getRoleUserAccounts',
        'available_balance' => 'getAvailableBalance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CURRENCY_NONE = 'NONE';
    public const CURRENCY_GBP = 'GBP';
    public const CURRENCY_EUR = 'EUR';
    public const CURRENCY_BTC = 'BTC';
    public const SUPPLIER_SETTLEMENT_STATUS_NONE = 'None';
    public const SUPPLIER_SETTLEMENT_STATUS_IN_PROGRESS = 'InProgress';
    public const SUPPLIER_SETTLEMENT_STATUS_COMPLETED = 'Completed';
    public const SUPPLIER_SETTLEMENT_STATUS_ERROR = 'Error';
    public const SUPPLIER_NAME_NONE = 'None';
    public const SUPPLIER_NAME_CYBER_SOURCE = 'CyberSource';
    public const SUPPLIER_NAME_CHECKOUT = 'Checkout';
    public const SUPPLIER_NAME_STRIPE = 'Stripe';
    public const SUPPLIER_NAME_MODULR = 'Modulr';
    public const SUPPLIER_NAME_PLAID = 'Plaid';
    public const SUPPLIER_NAME_YAPILY = 'Yapily';
    public const SUPPLIER_NAME_NOFRIXION = 'Nofrixion';
    public const SUPPLIER_NAME_BITCOIN = 'Bitcoin';
    public const SUPPLIER_NAME_BITCOIN_TESTNET = 'BitcoinTestnet';
    public const SUPPLIER_NAME_BANKING_CIRCLE = 'BankingCircle';
    public const SUPPLIER_NAME_BANKING_CIRCLE_AGENCY = 'BankingCircleAgency';
    public const SUPPLIER_NAME_SIMULATOR = 'Simulator';
    public const SUPPLIER_NAME_LIGHTNING = 'Lightning';
    public const SUPPLIER_NAME_LIGHTNING_TESTNET = 'LightningTestnet';
    public const SUPPLIER_NAME_BANKING_CIRCLE_DIRECT_DEBIT = 'BankingCircleDirectDebit';
    public const SUPPLIER_NAME_TRIBE = 'Tribe';
    public const ACCOUNT_TYPE_STANDARD = 'Standard';
    public const ACCOUNT_TYPE_STANDARD_FEE = 'StandardFee';
    public const ACCOUNT_TYPE_TRIBE = 'Tribe';
    public const DEFAULT_PAYMENT_RAIL__DEFAULT = 'Default';
    public const DEFAULT_PAYMENT_RAIL_SEPA_CT = 'SEPA_CT';
    public const DEFAULT_PAYMENT_RAIL_SEPA_INST = 'SEPA_INST';
    public const DEFAULT_PAYMENT_RAIL_TARGET2 = 'TARGET2';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_NONE,
            self::CURRENCY_GBP,
            self::CURRENCY_EUR,
            self::CURRENCY_BTC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupplierSettlementStatusAllowableValues()
    {
        return [
            self::SUPPLIER_SETTLEMENT_STATUS_NONE,
            self::SUPPLIER_SETTLEMENT_STATUS_IN_PROGRESS,
            self::SUPPLIER_SETTLEMENT_STATUS_COMPLETED,
            self::SUPPLIER_SETTLEMENT_STATUS_ERROR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupplierNameAllowableValues()
    {
        return [
            self::SUPPLIER_NAME_NONE,
            self::SUPPLIER_NAME_CYBER_SOURCE,
            self::SUPPLIER_NAME_CHECKOUT,
            self::SUPPLIER_NAME_STRIPE,
            self::SUPPLIER_NAME_MODULR,
            self::SUPPLIER_NAME_PLAID,
            self::SUPPLIER_NAME_YAPILY,
            self::SUPPLIER_NAME_NOFRIXION,
            self::SUPPLIER_NAME_BITCOIN,
            self::SUPPLIER_NAME_BITCOIN_TESTNET,
            self::SUPPLIER_NAME_BANKING_CIRCLE,
            self::SUPPLIER_NAME_BANKING_CIRCLE_AGENCY,
            self::SUPPLIER_NAME_SIMULATOR,
            self::SUPPLIER_NAME_LIGHTNING,
            self::SUPPLIER_NAME_LIGHTNING_TESTNET,
            self::SUPPLIER_NAME_BANKING_CIRCLE_DIRECT_DEBIT,
            self::SUPPLIER_NAME_TRIBE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountTypeAllowableValues()
    {
        return [
            self::ACCOUNT_TYPE_STANDARD,
            self::ACCOUNT_TYPE_STANDARD_FEE,
            self::ACCOUNT_TYPE_TRIBE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultPaymentRailAllowableValues()
    {
        return [
            self::DEFAULT_PAYMENT_RAIL__DEFAULT,
            self::DEFAULT_PAYMENT_RAIL_SEPA_CT,
            self::DEFAULT_PAYMENT_RAIL_SEPA_INST,
            self::DEFAULT_PAYMENT_RAIL_TARGET2,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('iban', $data ?? [], null);
        $this->setIfExists('sort_code', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('bic', $data ?? [], null);
        $this->setIfExists('account_name', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('connected_account_balance', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('supplier_last_settled', $data ?? [], null);
        $this->setIfExists('supplier_settlement_status', $data ?? [], null);
        $this->setIfExists('supplier_account_id', $data ?? [], null);
        $this->setIfExists('supplier_name', $data ?? [], null);
        $this->setIfExists('is_default', $data ?? [], null);
        $this->setIfExists('supplier_next_transaction_id', $data ?? [], null);
        $this->setIfExists('bitcoin_key_path_index', $data ?? [], null);
        $this->setIfExists('bitcoin_created_at_block_height', $data ?? [], null);
        $this->setIfExists('bitcoin_address', $data ?? [], null);
        $this->setIfExists('bitcoin_account_ext_pub_key', $data ?? [], null);
        $this->setIfExists('submitted_payouts_balance', $data ?? [], null);
        $this->setIfExists('is_connected_account', $data ?? [], null);
        $this->setIfExists('is_archived', $data ?? [], null);
        $this->setIfExists('bank_name', $data ?? [], null);
        $this->setIfExists('consent_id', $data ?? [], null);
        $this->setIfExists('banking_circle_physical_account_id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
        $this->setIfExists('on_hold_payins_balance', $data ?? [], null);
        $this->setIfExists('tribe_account_id', $data ?? [], null);
        $this->setIfExists('default_payment_rail', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('merchant', $data ?? [], null);
        $this->setIfExists('open_banking_consent', $data ?? [], null);
        $this->setIfExists('account_business_settings', $data ?? [], null);
        $this->setIfExists('payment_send_accounts', $data ?? [], null);
        $this->setIfExists('payment_send_destination_accounts', $data ?? [], null);
        $this->setIfExists('transactions', $data ?? [], null);
        $this->setIfExists('ais_transactions', $data ?? [], null);
        $this->setIfExists('rules', $data ?? [], null);
        $this->setIfExists('rule_destinations', $data ?? [], null);
        $this->setIfExists('report_accounts', $data ?? [], null);
        $this->setIfExists('beneficiary_source_accounts', $data ?? [], null);
        $this->setIfExists('payrun_source_accounts', $data ?? [], null);
        $this->setIfExists('banking_circle_physical_account', $data ?? [], null);
        $this->setIfExists('xero_bank_feed_connection', $data ?? [], null);
        $this->setIfExists('role_user_accounts', $data ?? [], null);
        $this->setIfExists('available_balance', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSupplierSettlementStatusAllowableValues();
        if (!is_null($this->container['supplier_settlement_status']) && !in_array($this->container['supplier_settlement_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'supplier_settlement_status', must be one of '%s'",
                $this->container['supplier_settlement_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSupplierNameAllowableValues();
        if (!is_null($this->container['supplier_name']) && !in_array($this->container['supplier_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'supplier_name', must be one of '%s'",
                $this->container['supplier_name'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($this->container['account_type']) && !in_array($this->container['account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_type', must be one of '%s'",
                $this->container['account_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDefaultPaymentRailAllowableValues();
        if (!is_null($this->container['default_payment_rail']) && !in_array($this->container['default_payment_rail'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_payment_rail', must be one of '%s'",
                $this->container['default_payment_rail'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string|null
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string|null $iban iban
     *
     * @return self
     */
    public function setIban($iban)
    {
        if (is_null($iban)) {
            array_push($this->openAPINullablesSetToNull, 'iban');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('iban', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets sort_code
     *
     * @return int|null
     */
    public function getSortCode()
    {
        return $this->container['sort_code'];
    }

    /**
     * Sets sort_code
     *
     * @param int|null $sort_code sort_code
     *
     * @return self
     */
    public function setSortCode($sort_code)
    {
        if (is_null($sort_code)) {
            array_push($this->openAPINullablesSetToNull, 'sort_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sort_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sort_code'] = $sort_code;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return int|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param int|null $account_number account_number
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            array_push($this->openAPINullablesSetToNull, 'account_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets bic
     *
     * @return string|null
     */
    public function getBic()
    {
        return $this->container['bic'];
    }

    /**
     * Sets bic
     *
     * @param string|null $bic bic
     *
     * @return self
     */
    public function setBic($bic)
    {
        if (is_null($bic)) {
            array_push($this->openAPINullablesSetToNull, 'bic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bic', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bic'] = $bic;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string|null $account_name account_name
     *
     * @return self
     */
    public function setAccountName($account_name)
    {
        if (is_null($account_name)) {
            array_push($this->openAPINullablesSetToNull, 'account_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets connected_account_balance
     *
     * @return float|null
     */
    public function getConnectedAccountBalance()
    {
        return $this->container['connected_account_balance'];
    }

    /**
     * Sets connected_account_balance
     *
     * @param float|null $connected_account_balance connected_account_balance
     *
     * @return self
     */
    public function setConnectedAccountBalance($connected_account_balance)
    {
        if (is_null($connected_account_balance)) {
            throw new \InvalidArgumentException('non-nullable connected_account_balance cannot be null');
        }
        $this->container['connected_account_balance'] = $connected_account_balance;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted inserted
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets supplier_last_settled
     *
     * @return \DateTime|null
     */
    public function getSupplierLastSettled()
    {
        return $this->container['supplier_last_settled'];
    }

    /**
     * Sets supplier_last_settled
     *
     * @param \DateTime|null $supplier_last_settled supplier_last_settled
     *
     * @return self
     */
    public function setSupplierLastSettled($supplier_last_settled)
    {
        if (is_null($supplier_last_settled)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_last_settled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_last_settled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplier_last_settled'] = $supplier_last_settled;

        return $this;
    }

    /**
     * Gets supplier_settlement_status
     *
     * @return string|null
     */
    public function getSupplierSettlementStatus()
    {
        return $this->container['supplier_settlement_status'];
    }

    /**
     * Sets supplier_settlement_status
     *
     * @param string|null $supplier_settlement_status supplier_settlement_status
     *
     * @return self
     */
    public function setSupplierSettlementStatus($supplier_settlement_status)
    {
        if (is_null($supplier_settlement_status)) {
            throw new \InvalidArgumentException('non-nullable supplier_settlement_status cannot be null');
        }
        $allowedValues = $this->getSupplierSettlementStatusAllowableValues();
        if (!in_array($supplier_settlement_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'supplier_settlement_status', must be one of '%s'",
                    $supplier_settlement_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['supplier_settlement_status'] = $supplier_settlement_status;

        return $this;
    }

    /**
     * Gets supplier_account_id
     *
     * @return string|null
     */
    public function getSupplierAccountId()
    {
        return $this->container['supplier_account_id'];
    }

    /**
     * Sets supplier_account_id
     *
     * @param string|null $supplier_account_id supplier_account_id
     *
     * @return self
     */
    public function setSupplierAccountId($supplier_account_id)
    {
        if (is_null($supplier_account_id)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplier_account_id'] = $supplier_account_id;

        return $this;
    }

    /**
     * Gets supplier_name
     *
     * @return string|null
     */
    public function getSupplierName()
    {
        return $this->container['supplier_name'];
    }

    /**
     * Sets supplier_name
     *
     * @param string|null $supplier_name Lists the supported card and PIS processors.
     *
     * @return self
     */
    public function setSupplierName($supplier_name)
    {
        if (is_null($supplier_name)) {
            throw new \InvalidArgumentException('non-nullable supplier_name cannot be null');
        }
        $allowedValues = $this->getSupplierNameAllowableValues();
        if (!in_array($supplier_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'supplier_name', must be one of '%s'",
                    $supplier_name,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['supplier_name'] = $supplier_name;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool|null
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool|null $is_default is_default
     *
     * @return self
     */
    public function setIsDefault($is_default)
    {
        if (is_null($is_default)) {
            throw new \InvalidArgumentException('non-nullable is_default cannot be null');
        }
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets supplier_next_transaction_id
     *
     * @return string|null
     */
    public function getSupplierNextTransactionId()
    {
        return $this->container['supplier_next_transaction_id'];
    }

    /**
     * Sets supplier_next_transaction_id
     *
     * @param string|null $supplier_next_transaction_id supplier_next_transaction_id
     *
     * @return self
     */
    public function setSupplierNextTransactionId($supplier_next_transaction_id)
    {
        if (is_null($supplier_next_transaction_id)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_next_transaction_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_next_transaction_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplier_next_transaction_id'] = $supplier_next_transaction_id;

        return $this;
    }

    /**
     * Gets bitcoin_key_path_index
     *
     * @return int|null
     */
    public function getBitcoinKeyPathIndex()
    {
        return $this->container['bitcoin_key_path_index'];
    }

    /**
     * Sets bitcoin_key_path_index
     *
     * @param int|null $bitcoin_key_path_index bitcoin_key_path_index
     *
     * @return self
     */
    public function setBitcoinKeyPathIndex($bitcoin_key_path_index)
    {
        if (is_null($bitcoin_key_path_index)) {
            throw new \InvalidArgumentException('non-nullable bitcoin_key_path_index cannot be null');
        }
        $this->container['bitcoin_key_path_index'] = $bitcoin_key_path_index;

        return $this;
    }

    /**
     * Gets bitcoin_created_at_block_height
     *
     * @return int|null
     */
    public function getBitcoinCreatedAtBlockHeight()
    {
        return $this->container['bitcoin_created_at_block_height'];
    }

    /**
     * Sets bitcoin_created_at_block_height
     *
     * @param int|null $bitcoin_created_at_block_height bitcoin_created_at_block_height
     *
     * @return self
     */
    public function setBitcoinCreatedAtBlockHeight($bitcoin_created_at_block_height)
    {
        if (is_null($bitcoin_created_at_block_height)) {
            throw new \InvalidArgumentException('non-nullable bitcoin_created_at_block_height cannot be null');
        }
        $this->container['bitcoin_created_at_block_height'] = $bitcoin_created_at_block_height;

        return $this;
    }

    /**
     * Gets bitcoin_address
     *
     * @return string|null
     */
    public function getBitcoinAddress()
    {
        return $this->container['bitcoin_address'];
    }

    /**
     * Sets bitcoin_address
     *
     * @param string|null $bitcoin_address bitcoin_address
     *
     * @return self
     */
    public function setBitcoinAddress($bitcoin_address)
    {
        if (is_null($bitcoin_address)) {
            array_push($this->openAPINullablesSetToNull, 'bitcoin_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bitcoin_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bitcoin_address'] = $bitcoin_address;

        return $this;
    }

    /**
     * Gets bitcoin_account_ext_pub_key
     *
     * @return string|null
     */
    public function getBitcoinAccountExtPubKey()
    {
        return $this->container['bitcoin_account_ext_pub_key'];
    }

    /**
     * Sets bitcoin_account_ext_pub_key
     *
     * @param string|null $bitcoin_account_ext_pub_key bitcoin_account_ext_pub_key
     *
     * @return self
     */
    public function setBitcoinAccountExtPubKey($bitcoin_account_ext_pub_key)
    {
        if (is_null($bitcoin_account_ext_pub_key)) {
            array_push($this->openAPINullablesSetToNull, 'bitcoin_account_ext_pub_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bitcoin_account_ext_pub_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bitcoin_account_ext_pub_key'] = $bitcoin_account_ext_pub_key;

        return $this;
    }

    /**
     * Gets submitted_payouts_balance
     *
     * @return float|null
     */
    public function getSubmittedPayoutsBalance()
    {
        return $this->container['submitted_payouts_balance'];
    }

    /**
     * Sets submitted_payouts_balance
     *
     * @param float|null $submitted_payouts_balance submitted_payouts_balance
     *
     * @return self
     */
    public function setSubmittedPayoutsBalance($submitted_payouts_balance)
    {
        if (is_null($submitted_payouts_balance)) {
            throw new \InvalidArgumentException('non-nullable submitted_payouts_balance cannot be null');
        }
        $this->container['submitted_payouts_balance'] = $submitted_payouts_balance;

        return $this;
    }

    /**
     * Gets is_connected_account
     *
     * @return bool|null
     */
    public function getIsConnectedAccount()
    {
        return $this->container['is_connected_account'];
    }

    /**
     * Sets is_connected_account
     *
     * @param bool|null $is_connected_account is_connected_account
     *
     * @return self
     */
    public function setIsConnectedAccount($is_connected_account)
    {
        if (is_null($is_connected_account)) {
            throw new \InvalidArgumentException('non-nullable is_connected_account cannot be null');
        }
        $this->container['is_connected_account'] = $is_connected_account;

        return $this;
    }

    /**
     * Gets is_archived
     *
     * @return bool|null
     */
    public function getIsArchived()
    {
        return $this->container['is_archived'];
    }

    /**
     * Sets is_archived
     *
     * @param bool|null $is_archived is_archived
     *
     * @return self
     */
    public function setIsArchived($is_archived)
    {
        if (is_null($is_archived)) {
            throw new \InvalidArgumentException('non-nullable is_archived cannot be null');
        }
        $this->container['is_archived'] = $is_archived;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string|null
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string|null $bank_name bank_name
     *
     * @return self
     */
    public function setBankName($bank_name)
    {
        if (is_null($bank_name)) {
            array_push($this->openAPINullablesSetToNull, 'bank_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bank_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets consent_id
     *
     * @return string|null
     */
    public function getConsentId()
    {
        return $this->container['consent_id'];
    }

    /**
     * Sets consent_id
     *
     * @param string|null $consent_id consent_id
     *
     * @return self
     */
    public function setConsentId($consent_id)
    {
        if (is_null($consent_id)) {
            array_push($this->openAPINullablesSetToNull, 'consent_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('consent_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['consent_id'] = $consent_id;

        return $this;
    }

    /**
     * Gets banking_circle_physical_account_id
     *
     * @return string|null
     */
    public function getBankingCirclePhysicalAccountId()
    {
        return $this->container['banking_circle_physical_account_id'];
    }

    /**
     * Sets banking_circle_physical_account_id
     *
     * @param string|null $banking_circle_physical_account_id banking_circle_physical_account_id
     *
     * @return self
     */
    public function setBankingCirclePhysicalAccountId($banking_circle_physical_account_id)
    {
        if (is_null($banking_circle_physical_account_id)) {
            array_push($this->openAPINullablesSetToNull, 'banking_circle_physical_account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('banking_circle_physical_account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['banking_circle_physical_account_id'] = $banking_circle_physical_account_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type Enumeration of all possible account types.
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }
        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!in_array($account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_type', must be one of '%s'",
                    $account_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets on_hold_payins_balance
     *
     * @return float|null
     */
    public function getOnHoldPayinsBalance()
    {
        return $this->container['on_hold_payins_balance'];
    }

    /**
     * Sets on_hold_payins_balance
     *
     * @param float|null $on_hold_payins_balance on_hold_payins_balance
     *
     * @return self
     */
    public function setOnHoldPayinsBalance($on_hold_payins_balance)
    {
        if (is_null($on_hold_payins_balance)) {
            throw new \InvalidArgumentException('non-nullable on_hold_payins_balance cannot be null');
        }
        $this->container['on_hold_payins_balance'] = $on_hold_payins_balance;

        return $this;
    }

    /**
     * Gets tribe_account_id
     *
     * @return string|null
     */
    public function getTribeAccountId()
    {
        return $this->container['tribe_account_id'];
    }

    /**
     * Sets tribe_account_id
     *
     * @param string|null $tribe_account_id tribe_account_id
     *
     * @return self
     */
    public function setTribeAccountId($tribe_account_id)
    {
        if (is_null($tribe_account_id)) {
            array_push($this->openAPINullablesSetToNull, 'tribe_account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tribe_account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tribe_account_id'] = $tribe_account_id;

        return $this;
    }

    /**
     * Gets default_payment_rail
     *
     * @return string|null
     */
    public function getDefaultPaymentRail()
    {
        return $this->container['default_payment_rail'];
    }

    /**
     * Sets default_payment_rail
     *
     * @param string|null $default_payment_rail default_payment_rail
     *
     * @return self
     */
    public function setDefaultPaymentRail($default_payment_rail)
    {
        if (is_null($default_payment_rail)) {
            throw new \InvalidArgumentException('non-nullable default_payment_rail cannot be null');
        }
        $allowedValues = $this->getDefaultPaymentRailAllowableValues();
        if (!in_array($default_payment_rail, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_payment_rail', must be one of '%s'",
                    $default_payment_rail,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_payment_rail'] = $default_payment_rail;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsUserEntity|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsUserEntity|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity|null
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsMerchantEntity|null $merchant merchant
     *
     * @return self
     */
    public function setMerchant($merchant)
    {
        if (is_null($merchant)) {
            throw new \InvalidArgumentException('non-nullable merchant cannot be null');
        }
        $this->container['merchant'] = $merchant;

        return $this;
    }

    /**
     * Gets open_banking_consent
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsOpenBankingConsentEntity|null
     */
    public function getOpenBankingConsent()
    {
        return $this->container['open_banking_consent'];
    }

    /**
     * Sets open_banking_consent
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsOpenBankingConsentEntity|null $open_banking_consent open_banking_consent
     *
     * @return self
     */
    public function setOpenBankingConsent($open_banking_consent)
    {
        if (is_null($open_banking_consent)) {
            throw new \InvalidArgumentException('non-nullable open_banking_consent cannot be null');
        }
        $this->container['open_banking_consent'] = $open_banking_consent;

        return $this;
    }

    /**
     * Gets account_business_settings
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsAccountBusinessSettingEntity[]|null
     */
    public function getAccountBusinessSettings()
    {
        return $this->container['account_business_settings'];
    }

    /**
     * Sets account_business_settings
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsAccountBusinessSettingEntity[]|null $account_business_settings account_business_settings
     *
     * @return self
     */
    public function setAccountBusinessSettings($account_business_settings)
    {
        if (is_null($account_business_settings)) {
            array_push($this->openAPINullablesSetToNull, 'account_business_settings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_business_settings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['account_business_settings'] = $account_business_settings;

        return $this;
    }

    /**
     * Gets payment_send_accounts
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity[]|null
     */
    public function getPaymentSendAccounts()
    {
        return $this->container['payment_send_accounts'];
    }

    /**
     * Sets payment_send_accounts
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity[]|null $payment_send_accounts payment_send_accounts
     *
     * @return self
     */
    public function setPaymentSendAccounts($payment_send_accounts)
    {
        if (is_null($payment_send_accounts)) {
            array_push($this->openAPINullablesSetToNull, 'payment_send_accounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_send_accounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_send_accounts'] = $payment_send_accounts;

        return $this;
    }

    /**
     * Gets payment_send_destination_accounts
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity[]|null
     */
    public function getPaymentSendDestinationAccounts()
    {
        return $this->container['payment_send_destination_accounts'];
    }

    /**
     * Sets payment_send_destination_accounts
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPayoutEntity[]|null $payment_send_destination_accounts payment_send_destination_accounts
     *
     * @return self
     */
    public function setPaymentSendDestinationAccounts($payment_send_destination_accounts)
    {
        if (is_null($payment_send_destination_accounts)) {
            array_push($this->openAPINullablesSetToNull, 'payment_send_destination_accounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_send_destination_accounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_send_destination_accounts'] = $payment_send_destination_accounts;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsTransactionEntity[]|null
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsTransactionEntity[]|null $transactions transactions
     *
     * @return self
     */
    public function setTransactions($transactions)
    {
        if (is_null($transactions)) {
            array_push($this->openAPINullablesSetToNull, 'transactions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transactions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets ais_transactions
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsAISTransactionEntity[]|null
     */
    public function getAisTransactions()
    {
        return $this->container['ais_transactions'];
    }

    /**
     * Sets ais_transactions
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsAISTransactionEntity[]|null $ais_transactions ais_transactions
     *
     * @return self
     */
    public function setAisTransactions($ais_transactions)
    {
        if (is_null($ais_transactions)) {
            array_push($this->openAPINullablesSetToNull, 'ais_transactions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ais_transactions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ais_transactions'] = $ais_transactions;

        return $this;
    }

    /**
     * Gets rules
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsRuleEntity[]|null
     */
    public function getRules()
    {
        return $this->container['rules'];
    }

    /**
     * Sets rules
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsRuleEntity[]|null $rules rules
     *
     * @return self
     */
    public function setRules($rules)
    {
        if (is_null($rules)) {
            array_push($this->openAPINullablesSetToNull, 'rules');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rules', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rules'] = $rules;

        return $this;
    }

    /**
     * Gets rule_destinations
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsRuleDestinationEntity[]|null
     */
    public function getRuleDestinations()
    {
        return $this->container['rule_destinations'];
    }

    /**
     * Sets rule_destinations
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsRuleDestinationEntity[]|null $rule_destinations rule_destinations
     *
     * @return self
     */
    public function setRuleDestinations($rule_destinations)
    {
        if (is_null($rule_destinations)) {
            array_push($this->openAPINullablesSetToNull, 'rule_destinations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rule_destinations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rule_destinations'] = $rule_destinations;

        return $this;
    }

    /**
     * Gets report_accounts
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsReportAccountEntity[]|null
     */
    public function getReportAccounts()
    {
        return $this->container['report_accounts'];
    }

    /**
     * Sets report_accounts
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsReportAccountEntity[]|null $report_accounts report_accounts
     *
     * @return self
     */
    public function setReportAccounts($report_accounts)
    {
        if (is_null($report_accounts)) {
            array_push($this->openAPINullablesSetToNull, 'report_accounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_accounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['report_accounts'] = $report_accounts;

        return $this;
    }

    /**
     * Gets beneficiary_source_accounts
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsBeneficiarySourceAccountEntity[]|null
     */
    public function getBeneficiarySourceAccounts()
    {
        return $this->container['beneficiary_source_accounts'];
    }

    /**
     * Sets beneficiary_source_accounts
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsBeneficiarySourceAccountEntity[]|null $beneficiary_source_accounts beneficiary_source_accounts
     *
     * @return self
     */
    public function setBeneficiarySourceAccounts($beneficiary_source_accounts)
    {
        if (is_null($beneficiary_source_accounts)) {
            array_push($this->openAPINullablesSetToNull, 'beneficiary_source_accounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('beneficiary_source_accounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['beneficiary_source_accounts'] = $beneficiary_source_accounts;

        return $this;
    }

    /**
     * Gets payrun_source_accounts
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunSourceAccountEntity[]|null
     */
    public function getPayrunSourceAccounts()
    {
        return $this->container['payrun_source_accounts'];
    }

    /**
     * Sets payrun_source_accounts
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataAccessDataModelsPayrunSourceAccountEntity[]|null $payrun_source_accounts payrun_source_accounts
     *
     * @return self
     */
    public function setPayrunSourceAccounts($payrun_source_accounts)
    {
        if (is_null($payrun_source_accounts)) {
            array_push($this->openAPINullablesSetToNull, 'payrun_source_accounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payrun_source_accounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payrun_source_accounts'] = $payrun_source_accounts;

        return $this;
    }

    /**
     * Gets banking_circle_physical_account
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsBankingCirclePhysicalAccountEntity|null
     */
    public function getBankingCirclePhysicalAccount()
    {
        return $this->container['banking_circle_physical_account'];
    }

    /**
     * Sets banking_circle_physical_account
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsBankingCirclePhysicalAccountEntity|null $banking_circle_physical_account banking_circle_physical_account
     *
     * @return self
     */
    public function setBankingCirclePhysicalAccount($banking_circle_physical_account)
    {
        if (is_null($banking_circle_physical_account)) {
            throw new \InvalidArgumentException('non-nullable banking_circle_physical_account cannot be null');
        }
        $this->container['banking_circle_physical_account'] = $banking_circle_physical_account;

        return $this;
    }

    /**
     * Gets xero_bank_feed_connection
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsXeroBankFeedConnectionEntity|null
     */
    public function getXeroBankFeedConnection()
    {
        return $this->container['xero_bank_feed_connection'];
    }

    /**
     * Sets xero_bank_feed_connection
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsXeroBankFeedConnectionEntity|null $xero_bank_feed_connection xero_bank_feed_connection
     *
     * @return self
     */
    public function setXeroBankFeedConnection($xero_bank_feed_connection)
    {
        if (is_null($xero_bank_feed_connection)) {
            throw new \InvalidArgumentException('non-nullable xero_bank_feed_connection cannot be null');
        }
        $this->container['xero_bank_feed_connection'] = $xero_bank_feed_connection;

        return $this;
    }

    /**
     * Gets role_user_accounts
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsRoleUserAccountEntity[]|null
     */
    public function getRoleUserAccounts()
    {
        return $this->container['role_user_accounts'];
    }

    /**
     * Sets role_user_accounts
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsRoleUserAccountEntity[]|null $role_user_accounts role_user_accounts
     *
     * @return self
     */
    public function setRoleUserAccounts($role_user_accounts)
    {
        if (is_null($role_user_accounts)) {
            array_push($this->openAPINullablesSetToNull, 'role_user_accounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('role_user_accounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['role_user_accounts'] = $role_user_accounts;

        return $this;
    }

    /**
     * Gets available_balance
     *
     * @return float|null
     */
    public function getAvailableBalance()
    {
        return $this->container['available_balance'];
    }

    /**
     * Sets available_balance
     *
     * @param float|null $available_balance available_balance
     *
     * @return self
     */
    public function setAvailableBalance($available_balance)
    {
        if (is_null($available_balance)) {
            throw new \InvalidArgumentException('non-nullable available_balance cannot be null');
        }
        $this->container['available_balance'] = $available_balance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


