<?php
/**
 * NoFrixionMoneyMoovModelsOpenBankingTransaction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionMoneyMoovModelsOpenBankingTransaction Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionMoneyMoovModelsOpenBankingTransaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.MoneyMoov.Models.OpenBanking.Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'id' => 'string',
        'date' => '\DateTime',
        'booking_date_time' => '\DateTime',
        'value_date_time' => '\DateTime',
        'amount' => 'float',
        'currency' => 'string',
        'transaction_amount' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAmount',
        'gross_amount' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAmount',
        'currency_exchange' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingCurrencyExchange',
        'charge_details' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingTransactionChargeDetails',
        'reference' => 'string',
        'statement_references' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingStatementReference[]',
        'description' => 'string',
        'transaction_information' => 'string[]',
        'address_details' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAddressDetails',
        'iso_bank_transaction_code' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingIsoBankTransactionCode',
        'proprietary_bank_transaction_code' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingProprietaryBankTransactionCode',
        'balance' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingTransactionBalance',
        'payee_details' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingPayee',
        'payer_details' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingPayer',
        'merchant' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingMerchant',
        'enrichment' => '\Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingEnrichment',
        'supplementary_data' => 'mixed',
        'transaction_mutability' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'id' => null,
        'date' => 'date-time',
        'booking_date_time' => 'date-time',
        'value_date_time' => 'date-time',
        'amount' => 'double',
        'currency' => null,
        'transaction_amount' => null,
        'gross_amount' => null,
        'currency_exchange' => null,
        'charge_details' => null,
        'reference' => null,
        'statement_references' => null,
        'description' => null,
        'transaction_information' => null,
        'address_details' => null,
        'iso_bank_transaction_code' => null,
        'proprietary_bank_transaction_code' => null,
        'balance' => null,
        'payee_details' => null,
        'payer_details' => null,
        'merchant' => null,
        'enrichment' => null,
        'supplementary_data' => null,
        'transaction_mutability' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'status' => true,
        'id' => true,
        'date' => false,
        'booking_date_time' => false,
        'value_date_time' => false,
        'amount' => false,
        'currency' => true,
        'transaction_amount' => false,
        'gross_amount' => false,
        'currency_exchange' => false,
        'charge_details' => false,
        'reference' => true,
        'statement_references' => true,
        'description' => true,
        'transaction_information' => true,
        'address_details' => false,
        'iso_bank_transaction_code' => false,
        'proprietary_bank_transaction_code' => false,
        'balance' => false,
        'payee_details' => false,
        'payer_details' => false,
        'merchant' => false,
        'enrichment' => false,
        'supplementary_data' => true,
        'transaction_mutability' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'id' => 'id',
        'date' => 'date',
        'booking_date_time' => 'bookingDateTime',
        'value_date_time' => 'valueDateTime',
        'amount' => 'amount',
        'currency' => 'currency',
        'transaction_amount' => 'transactionAmount',
        'gross_amount' => 'grossAmount',
        'currency_exchange' => 'currencyExchange',
        'charge_details' => 'chargeDetails',
        'reference' => 'reference',
        'statement_references' => 'statementReferences',
        'description' => 'description',
        'transaction_information' => 'transactionInformation',
        'address_details' => 'addressDetails',
        'iso_bank_transaction_code' => 'isoBankTransactionCode',
        'proprietary_bank_transaction_code' => 'proprietaryBankTransactionCode',
        'balance' => 'balance',
        'payee_details' => 'payeeDetails',
        'payer_details' => 'payerDetails',
        'merchant' => 'merchant',
        'enrichment' => 'enrichment',
        'supplementary_data' => 'supplementaryData',
        'transaction_mutability' => 'transactionMutability'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'id' => 'setId',
        'date' => 'setDate',
        'booking_date_time' => 'setBookingDateTime',
        'value_date_time' => 'setValueDateTime',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'transaction_amount' => 'setTransactionAmount',
        'gross_amount' => 'setGrossAmount',
        'currency_exchange' => 'setCurrencyExchange',
        'charge_details' => 'setChargeDetails',
        'reference' => 'setReference',
        'statement_references' => 'setStatementReferences',
        'description' => 'setDescription',
        'transaction_information' => 'setTransactionInformation',
        'address_details' => 'setAddressDetails',
        'iso_bank_transaction_code' => 'setIsoBankTransactionCode',
        'proprietary_bank_transaction_code' => 'setProprietaryBankTransactionCode',
        'balance' => 'setBalance',
        'payee_details' => 'setPayeeDetails',
        'payer_details' => 'setPayerDetails',
        'merchant' => 'setMerchant',
        'enrichment' => 'setEnrichment',
        'supplementary_data' => 'setSupplementaryData',
        'transaction_mutability' => 'setTransactionMutability'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'id' => 'getId',
        'date' => 'getDate',
        'booking_date_time' => 'getBookingDateTime',
        'value_date_time' => 'getValueDateTime',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'transaction_amount' => 'getTransactionAmount',
        'gross_amount' => 'getGrossAmount',
        'currency_exchange' => 'getCurrencyExchange',
        'charge_details' => 'getChargeDetails',
        'reference' => 'getReference',
        'statement_references' => 'getStatementReferences',
        'description' => 'getDescription',
        'transaction_information' => 'getTransactionInformation',
        'address_details' => 'getAddressDetails',
        'iso_bank_transaction_code' => 'getIsoBankTransactionCode',
        'proprietary_bank_transaction_code' => 'getProprietaryBankTransactionCode',
        'balance' => 'getBalance',
        'payee_details' => 'getPayeeDetails',
        'payer_details' => 'getPayerDetails',
        'merchant' => 'getMerchant',
        'enrichment' => 'getEnrichment',
        'supplementary_data' => 'getSupplementaryData',
        'transaction_mutability' => 'getTransactionMutability'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_BOOKED = 'BOOKED';
    public const STATUS_PENDING = 'PENDING';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_BOOKED,
            self::STATUS_PENDING,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], '');
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('booking_date_time', $data ?? [], null);
        $this->setIfExists('value_date_time', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], '');
        $this->setIfExists('transaction_amount', $data ?? [], null);
        $this->setIfExists('gross_amount', $data ?? [], null);
        $this->setIfExists('currency_exchange', $data ?? [], null);
        $this->setIfExists('charge_details', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], '');
        $this->setIfExists('statement_references', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], '');
        $this->setIfExists('transaction_information', $data ?? [], null);
        $this->setIfExists('address_details', $data ?? [], null);
        $this->setIfExists('iso_bank_transaction_code', $data ?? [], null);
        $this->setIfExists('proprietary_bank_transaction_code', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('payee_details', $data ?? [], null);
        $this->setIfExists('payer_details', $data ?? [], null);
        $this->setIfExists('merchant', $data ?? [], null);
        $this->setIfExists('enrichment', $data ?? [], null);
        $this->setIfExists('supplementary_data', $data ?? [], null);
        $this->setIfExists('transaction_mutability', $data ?? [], '');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date date
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets booking_date_time
     *
     * @return \DateTime|null
     */
    public function getBookingDateTime()
    {
        return $this->container['booking_date_time'];
    }

    /**
     * Sets booking_date_time
     *
     * @param \DateTime|null $booking_date_time booking_date_time
     *
     * @return self
     */
    public function setBookingDateTime($booking_date_time)
    {
        if (is_null($booking_date_time)) {
            throw new \InvalidArgumentException('non-nullable booking_date_time cannot be null');
        }
        $this->container['booking_date_time'] = $booking_date_time;

        return $this;
    }

    /**
     * Gets value_date_time
     *
     * @return \DateTime|null
     */
    public function getValueDateTime()
    {
        return $this->container['value_date_time'];
    }

    /**
     * Sets value_date_time
     *
     * @param \DateTime|null $value_date_time value_date_time
     *
     * @return self
     */
    public function setValueDateTime($value_date_time)
    {
        if (is_null($value_date_time)) {
            throw new \InvalidArgumentException('non-nullable value_date_time cannot be null');
        }
        $this->container['value_date_time'] = $value_date_time;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets transaction_amount
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAmount|null
     */
    public function getTransactionAmount()
    {
        return $this->container['transaction_amount'];
    }

    /**
     * Sets transaction_amount
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAmount|null $transaction_amount transaction_amount
     *
     * @return self
     */
    public function setTransactionAmount($transaction_amount)
    {
        if (is_null($transaction_amount)) {
            throw new \InvalidArgumentException('non-nullable transaction_amount cannot be null');
        }
        $this->container['transaction_amount'] = $transaction_amount;

        return $this;
    }

    /**
     * Gets gross_amount
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAmount|null
     */
    public function getGrossAmount()
    {
        return $this->container['gross_amount'];
    }

    /**
     * Sets gross_amount
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAmount|null $gross_amount gross_amount
     *
     * @return self
     */
    public function setGrossAmount($gross_amount)
    {
        if (is_null($gross_amount)) {
            throw new \InvalidArgumentException('non-nullable gross_amount cannot be null');
        }
        $this->container['gross_amount'] = $gross_amount;

        return $this;
    }

    /**
     * Gets currency_exchange
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingCurrencyExchange|null
     */
    public function getCurrencyExchange()
    {
        return $this->container['currency_exchange'];
    }

    /**
     * Sets currency_exchange
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingCurrencyExchange|null $currency_exchange currency_exchange
     *
     * @return self
     */
    public function setCurrencyExchange($currency_exchange)
    {
        if (is_null($currency_exchange)) {
            throw new \InvalidArgumentException('non-nullable currency_exchange cannot be null');
        }
        $this->container['currency_exchange'] = $currency_exchange;

        return $this;
    }

    /**
     * Gets charge_details
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingTransactionChargeDetails|null
     */
    public function getChargeDetails()
    {
        return $this->container['charge_details'];
    }

    /**
     * Sets charge_details
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingTransactionChargeDetails|null $charge_details charge_details
     *
     * @return self
     */
    public function setChargeDetails($charge_details)
    {
        if (is_null($charge_details)) {
            throw new \InvalidArgumentException('non-nullable charge_details cannot be null');
        }
        $this->container['charge_details'] = $charge_details;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            array_push($this->openAPINullablesSetToNull, 'reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets statement_references
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingStatementReference[]|null
     */
    public function getStatementReferences()
    {
        return $this->container['statement_references'];
    }

    /**
     * Sets statement_references
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingStatementReference[]|null $statement_references statement_references
     *
     * @return self
     */
    public function setStatementReferences($statement_references)
    {
        if (is_null($statement_references)) {
            array_push($this->openAPINullablesSetToNull, 'statement_references');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('statement_references', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['statement_references'] = $statement_references;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets transaction_information
     *
     * @return string[]|null
     */
    public function getTransactionInformation()
    {
        return $this->container['transaction_information'];
    }

    /**
     * Sets transaction_information
     *
     * @param string[]|null $transaction_information transaction_information
     *
     * @return self
     */
    public function setTransactionInformation($transaction_information)
    {
        if (is_null($transaction_information)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_information');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_information', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transaction_information'] = $transaction_information;

        return $this;
    }

    /**
     * Gets address_details
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAddressDetails|null
     */
    public function getAddressDetails()
    {
        return $this->container['address_details'];
    }

    /**
     * Sets address_details
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingAddressDetails|null $address_details address_details
     *
     * @return self
     */
    public function setAddressDetails($address_details)
    {
        if (is_null($address_details)) {
            throw new \InvalidArgumentException('non-nullable address_details cannot be null');
        }
        $this->container['address_details'] = $address_details;

        return $this;
    }

    /**
     * Gets iso_bank_transaction_code
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingIsoBankTransactionCode|null
     */
    public function getIsoBankTransactionCode()
    {
        return $this->container['iso_bank_transaction_code'];
    }

    /**
     * Sets iso_bank_transaction_code
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingIsoBankTransactionCode|null $iso_bank_transaction_code iso_bank_transaction_code
     *
     * @return self
     */
    public function setIsoBankTransactionCode($iso_bank_transaction_code)
    {
        if (is_null($iso_bank_transaction_code)) {
            throw new \InvalidArgumentException('non-nullable iso_bank_transaction_code cannot be null');
        }
        $this->container['iso_bank_transaction_code'] = $iso_bank_transaction_code;

        return $this;
    }

    /**
     * Gets proprietary_bank_transaction_code
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingProprietaryBankTransactionCode|null
     */
    public function getProprietaryBankTransactionCode()
    {
        return $this->container['proprietary_bank_transaction_code'];
    }

    /**
     * Sets proprietary_bank_transaction_code
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingProprietaryBankTransactionCode|null $proprietary_bank_transaction_code proprietary_bank_transaction_code
     *
     * @return self
     */
    public function setProprietaryBankTransactionCode($proprietary_bank_transaction_code)
    {
        if (is_null($proprietary_bank_transaction_code)) {
            throw new \InvalidArgumentException('non-nullable proprietary_bank_transaction_code cannot be null');
        }
        $this->container['proprietary_bank_transaction_code'] = $proprietary_bank_transaction_code;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingTransactionBalance|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingTransactionBalance|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets payee_details
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingPayee|null
     */
    public function getPayeeDetails()
    {
        return $this->container['payee_details'];
    }

    /**
     * Sets payee_details
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingPayee|null $payee_details payee_details
     *
     * @return self
     */
    public function setPayeeDetails($payee_details)
    {
        if (is_null($payee_details)) {
            throw new \InvalidArgumentException('non-nullable payee_details cannot be null');
        }
        $this->container['payee_details'] = $payee_details;

        return $this;
    }

    /**
     * Gets payer_details
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingPayer|null
     */
    public function getPayerDetails()
    {
        return $this->container['payer_details'];
    }

    /**
     * Sets payer_details
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingPayer|null $payer_details payer_details
     *
     * @return self
     */
    public function setPayerDetails($payer_details)
    {
        if (is_null($payer_details)) {
            throw new \InvalidArgumentException('non-nullable payer_details cannot be null');
        }
        $this->container['payer_details'] = $payer_details;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingMerchant|null
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingMerchant|null $merchant merchant
     *
     * @return self
     */
    public function setMerchant($merchant)
    {
        if (is_null($merchant)) {
            throw new \InvalidArgumentException('non-nullable merchant cannot be null');
        }
        $this->container['merchant'] = $merchant;

        return $this;
    }

    /**
     * Gets enrichment
     *
     * @return \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingEnrichment|null
     */
    public function getEnrichment()
    {
        return $this->container['enrichment'];
    }

    /**
     * Sets enrichment
     *
     * @param \Nofrixion\Client\Model\NoFrixionMoneyMoovModelsOpenBankingEnrichment|null $enrichment enrichment
     *
     * @return self
     */
    public function setEnrichment($enrichment)
    {
        if (is_null($enrichment)) {
            throw new \InvalidArgumentException('non-nullable enrichment cannot be null');
        }
        $this->container['enrichment'] = $enrichment;

        return $this;
    }

    /**
     * Gets supplementary_data
     *
     * @return mixed|null
     */
    public function getSupplementaryData()
    {
        return $this->container['supplementary_data'];
    }

    /**
     * Sets supplementary_data
     *
     * @param mixed|null $supplementary_data supplementary_data
     *
     * @return self
     */
    public function setSupplementaryData($supplementary_data)
    {
        if (is_null($supplementary_data)) {
            array_push($this->openAPINullablesSetToNull, 'supplementary_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplementary_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplementary_data'] = $supplementary_data;

        return $this;
    }

    /**
     * Gets transaction_mutability
     *
     * @return string|null
     */
    public function getTransactionMutability()
    {
        return $this->container['transaction_mutability'];
    }

    /**
     * Sets transaction_mutability
     *
     * @param string|null $transaction_mutability transaction_mutability
     *
     * @return self
     */
    public function setTransactionMutability($transaction_mutability)
    {
        if (is_null($transaction_mutability)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_mutability');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_mutability', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transaction_mutability'] = $transaction_mutability;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


