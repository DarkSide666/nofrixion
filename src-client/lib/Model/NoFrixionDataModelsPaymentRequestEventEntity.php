<?php
/**
 * NoFrixionDataModelsPaymentRequestEventEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NoFrixion MoneyMoov API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nofrixion\Client\Model;

use \ArrayAccess;
use \Nofrixion\Client\ObjectSerializer;

/**
 * NoFrixionDataModelsPaymentRequestEventEntity Class Doc Comment
 *
 * @category Class
 * @package  Nofrixion\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NoFrixionDataModelsPaymentRequestEventEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NoFrixion.DataModels.PaymentRequestEventEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'payment_request_id' => 'string',
        'event_type' => 'string',
        'amount' => 'float',
        'currency' => 'string',
        'status' => 'string',
        'error_reason' => 'string',
        'error_message' => 'string',
        'raw_response' => 'string',
        'inserted' => '\DateTime',
        'card_request_id' => 'string',
        'card_transaction_id' => 'string',
        'card_payer_authentication_reference_id' => 'string',
        'card_token_customer_id' => 'string',
        'card_authorization_response_id' => 'string',
        'lightning_invoice' => 'string',
        'pisp_payment_service_provider_id' => 'string',
        'pisp_payment_initiation_id' => 'string',
        'pisp_redirect_url' => 'string',
        'pisp_token' => 'string',
        'payment_processor_name' => 'string',
        'raw_response_hash' => 'string',
        'pisp_payment_lifecycle_id' => 'string',
        'reconciled_transaction_id' => 'string',
        'trace_id' => 'string',
        'pisp_bank_status' => 'string',
        'wallet_name' => 'string',
        'refund_payout_id' => 'string',
        'apple_pay_transaction_id' => 'string',
        'pisp_payment_institution_name' => 'string',
        'tokenised_card_id' => 'string',
        'origin_url' => 'string',
        'lightning_invoice_expires_at' => '\DateTime',
        'lightning_invoice_r_hash' => 'string',
        'payer_currency' => 'string',
        'payer_amount' => 'float',
        'payer_exchange_rate' => 'float',
        'banking_circle_direct_debit_payment_id' => 'string',
        'banking_circle_direct_debit_payment_reference' => 'string',
        'do_simulate_settlement_failure' => 'bool',
        'payment_request' => '\Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestEntity'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'payment_request_id' => 'uuid',
        'event_type' => null,
        'amount' => 'double',
        'currency' => null,
        'status' => null,
        'error_reason' => null,
        'error_message' => null,
        'raw_response' => null,
        'inserted' => 'date-time',
        'card_request_id' => null,
        'card_transaction_id' => null,
        'card_payer_authentication_reference_id' => null,
        'card_token_customer_id' => null,
        'card_authorization_response_id' => null,
        'lightning_invoice' => null,
        'pisp_payment_service_provider_id' => null,
        'pisp_payment_initiation_id' => null,
        'pisp_redirect_url' => null,
        'pisp_token' => null,
        'payment_processor_name' => null,
        'raw_response_hash' => null,
        'pisp_payment_lifecycle_id' => null,
        'reconciled_transaction_id' => 'uuid',
        'trace_id' => null,
        'pisp_bank_status' => null,
        'wallet_name' => null,
        'refund_payout_id' => 'uuid',
        'apple_pay_transaction_id' => null,
        'pisp_payment_institution_name' => null,
        'tokenised_card_id' => 'uuid',
        'origin_url' => null,
        'lightning_invoice_expires_at' => 'date-time',
        'lightning_invoice_r_hash' => null,
        'payer_currency' => null,
        'payer_amount' => 'double',
        'payer_exchange_rate' => 'double',
        'banking_circle_direct_debit_payment_id' => null,
        'banking_circle_direct_debit_payment_reference' => null,
        'do_simulate_settlement_failure' => null,
        'payment_request' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'payment_request_id' => false,
        'event_type' => false,
        'amount' => false,
        'currency' => false,
        'status' => true,
        'error_reason' => true,
        'error_message' => true,
        'raw_response' => true,
        'inserted' => false,
        'card_request_id' => true,
        'card_transaction_id' => true,
        'card_payer_authentication_reference_id' => true,
        'card_token_customer_id' => true,
        'card_authorization_response_id' => true,
        'lightning_invoice' => true,
        'pisp_payment_service_provider_id' => true,
        'pisp_payment_initiation_id' => true,
        'pisp_redirect_url' => true,
        'pisp_token' => true,
        'payment_processor_name' => false,
        'raw_response_hash' => true,
        'pisp_payment_lifecycle_id' => true,
        'reconciled_transaction_id' => true,
        'trace_id' => true,
        'pisp_bank_status' => true,
        'wallet_name' => true,
        'refund_payout_id' => true,
        'apple_pay_transaction_id' => true,
        'pisp_payment_institution_name' => true,
        'tokenised_card_id' => true,
        'origin_url' => true,
        'lightning_invoice_expires_at' => true,
        'lightning_invoice_r_hash' => true,
        'payer_currency' => true,
        'payer_amount' => true,
        'payer_exchange_rate' => true,
        'banking_circle_direct_debit_payment_id' => true,
        'banking_circle_direct_debit_payment_reference' => true,
        'do_simulate_settlement_failure' => false,
        'payment_request' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'payment_request_id' => 'paymentRequestID',
        'event_type' => 'eventType',
        'amount' => 'amount',
        'currency' => 'currency',
        'status' => 'status',
        'error_reason' => 'errorReason',
        'error_message' => 'errorMessage',
        'raw_response' => 'rawResponse',
        'inserted' => 'inserted',
        'card_request_id' => 'cardRequestID',
        'card_transaction_id' => 'cardTransactionID',
        'card_payer_authentication_reference_id' => 'cardPayerAuthenticationReferenceID',
        'card_token_customer_id' => 'cardTokenCustomerID',
        'card_authorization_response_id' => 'cardAuthorizationResponseID',
        'lightning_invoice' => 'lightningInvoice',
        'pisp_payment_service_provider_id' => 'pispPaymentServiceProviderID',
        'pisp_payment_initiation_id' => 'pispPaymentInitiationID',
        'pisp_redirect_url' => 'pispRedirectUrl',
        'pisp_token' => 'pispToken',
        'payment_processor_name' => 'paymentProcessorName',
        'raw_response_hash' => 'rawResponseHash',
        'pisp_payment_lifecycle_id' => 'pispPaymentLifecycleID',
        'reconciled_transaction_id' => 'reconciledTransactionID',
        'trace_id' => 'traceID',
        'pisp_bank_status' => 'pispBankStatus',
        'wallet_name' => 'walletName',
        'refund_payout_id' => 'refundPayoutID',
        'apple_pay_transaction_id' => 'applePayTransactionID',
        'pisp_payment_institution_name' => 'pispPaymentInstitutionName',
        'tokenised_card_id' => 'tokenisedCardID',
        'origin_url' => 'originUrl',
        'lightning_invoice_expires_at' => 'lightningInvoiceExpiresAt',
        'lightning_invoice_r_hash' => 'lightningInvoiceRHash',
        'payer_currency' => 'payerCurrency',
        'payer_amount' => 'payerAmount',
        'payer_exchange_rate' => 'payerExchangeRate',
        'banking_circle_direct_debit_payment_id' => 'bankingCircleDirectDebitPaymentID',
        'banking_circle_direct_debit_payment_reference' => 'bankingCircleDirectDebitPaymentReference',
        'do_simulate_settlement_failure' => 'doSimulateSettlementFailure',
        'payment_request' => 'paymentRequest'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'payment_request_id' => 'setPaymentRequestId',
        'event_type' => 'setEventType',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'status' => 'setStatus',
        'error_reason' => 'setErrorReason',
        'error_message' => 'setErrorMessage',
        'raw_response' => 'setRawResponse',
        'inserted' => 'setInserted',
        'card_request_id' => 'setCardRequestId',
        'card_transaction_id' => 'setCardTransactionId',
        'card_payer_authentication_reference_id' => 'setCardPayerAuthenticationReferenceId',
        'card_token_customer_id' => 'setCardTokenCustomerId',
        'card_authorization_response_id' => 'setCardAuthorizationResponseId',
        'lightning_invoice' => 'setLightningInvoice',
        'pisp_payment_service_provider_id' => 'setPispPaymentServiceProviderId',
        'pisp_payment_initiation_id' => 'setPispPaymentInitiationId',
        'pisp_redirect_url' => 'setPispRedirectUrl',
        'pisp_token' => 'setPispToken',
        'payment_processor_name' => 'setPaymentProcessorName',
        'raw_response_hash' => 'setRawResponseHash',
        'pisp_payment_lifecycle_id' => 'setPispPaymentLifecycleId',
        'reconciled_transaction_id' => 'setReconciledTransactionId',
        'trace_id' => 'setTraceId',
        'pisp_bank_status' => 'setPispBankStatus',
        'wallet_name' => 'setWalletName',
        'refund_payout_id' => 'setRefundPayoutId',
        'apple_pay_transaction_id' => 'setApplePayTransactionId',
        'pisp_payment_institution_name' => 'setPispPaymentInstitutionName',
        'tokenised_card_id' => 'setTokenisedCardId',
        'origin_url' => 'setOriginUrl',
        'lightning_invoice_expires_at' => 'setLightningInvoiceExpiresAt',
        'lightning_invoice_r_hash' => 'setLightningInvoiceRHash',
        'payer_currency' => 'setPayerCurrency',
        'payer_amount' => 'setPayerAmount',
        'payer_exchange_rate' => 'setPayerExchangeRate',
        'banking_circle_direct_debit_payment_id' => 'setBankingCircleDirectDebitPaymentId',
        'banking_circle_direct_debit_payment_reference' => 'setBankingCircleDirectDebitPaymentReference',
        'do_simulate_settlement_failure' => 'setDoSimulateSettlementFailure',
        'payment_request' => 'setPaymentRequest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'payment_request_id' => 'getPaymentRequestId',
        'event_type' => 'getEventType',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'status' => 'getStatus',
        'error_reason' => 'getErrorReason',
        'error_message' => 'getErrorMessage',
        'raw_response' => 'getRawResponse',
        'inserted' => 'getInserted',
        'card_request_id' => 'getCardRequestId',
        'card_transaction_id' => 'getCardTransactionId',
        'card_payer_authentication_reference_id' => 'getCardPayerAuthenticationReferenceId',
        'card_token_customer_id' => 'getCardTokenCustomerId',
        'card_authorization_response_id' => 'getCardAuthorizationResponseId',
        'lightning_invoice' => 'getLightningInvoice',
        'pisp_payment_service_provider_id' => 'getPispPaymentServiceProviderId',
        'pisp_payment_initiation_id' => 'getPispPaymentInitiationId',
        'pisp_redirect_url' => 'getPispRedirectUrl',
        'pisp_token' => 'getPispToken',
        'payment_processor_name' => 'getPaymentProcessorName',
        'raw_response_hash' => 'getRawResponseHash',
        'pisp_payment_lifecycle_id' => 'getPispPaymentLifecycleId',
        'reconciled_transaction_id' => 'getReconciledTransactionId',
        'trace_id' => 'getTraceId',
        'pisp_bank_status' => 'getPispBankStatus',
        'wallet_name' => 'getWalletName',
        'refund_payout_id' => 'getRefundPayoutId',
        'apple_pay_transaction_id' => 'getApplePayTransactionId',
        'pisp_payment_institution_name' => 'getPispPaymentInstitutionName',
        'tokenised_card_id' => 'getTokenisedCardId',
        'origin_url' => 'getOriginUrl',
        'lightning_invoice_expires_at' => 'getLightningInvoiceExpiresAt',
        'lightning_invoice_r_hash' => 'getLightningInvoiceRHash',
        'payer_currency' => 'getPayerCurrency',
        'payer_amount' => 'getPayerAmount',
        'payer_exchange_rate' => 'getPayerExchangeRate',
        'banking_circle_direct_debit_payment_id' => 'getBankingCircleDirectDebitPaymentId',
        'banking_circle_direct_debit_payment_reference' => 'getBankingCircleDirectDebitPaymentReference',
        'do_simulate_settlement_failure' => 'getDoSimulateSettlementFailure',
        'payment_request' => 'getPaymentRequest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EVENT_TYPE_UNKNOWN = 'unknown';
    public const EVENT_TYPE_CARD_PAYER_AUTHENTICATION_SETUP = 'card_payer_authentication_setup';
    public const EVENT_TYPE_CARD_AUTHORIZATION = 'card_authorization';
    public const EVENT_TYPE_CARD_SALE = 'card_sale';
    public const EVENT_TYPE_CARD_CAPTURE = 'card_capture';
    public const EVENT_TYPE_CARD_VOID = 'card_void';
    public const EVENT_TYPE_PISP_INITIATE = 'pisp_initiate';
    public const EVENT_TYPE_PISP_CALLBACK = 'pisp_callback';
    public const EVENT_TYPE_LIGHTNING_INVOICE_CREATED = 'lightning_invoice_created';
    public const EVENT_TYPE_LIGHTNING_INVOICE_PAID = 'lightning_invoice_paid';
    public const EVENT_TYPE_CARD_PAYER_AUTHENTICATION_FAILURE = 'card_payer_authentication_failure';
    public const EVENT_TYPE_PISP_WEBHOOK = 'pisp_webhook';
    public const EVENT_TYPE_PISP_SETTLE = 'pisp_settle';
    public const EVENT_TYPE_PISP_SETTLE_FAILURE = 'pisp_settle_failure';
    public const EVENT_TYPE_PISP_REFUND_INITIATED = 'pisp_refund_initiated';
    public const EVENT_TYPE_PISP_REFUND_SETTLED = 'pisp_refund_settled';
    public const EVENT_TYPE_PISP_REFUND_CANCELLED = 'pisp_refund_cancelled';
    public const EVENT_TYPE_CARD_WEBHOOK = 'card_webhook';
    public const EVENT_TYPE_CARD_REFUND = 'card_refund';
    public const EVENT_TYPE_LIGHTNING_INVOICE_EXPIRED = 'lightning_invoice_expired';
    public const EVENT_TYPE_LIGHTNING_INVOICE_CANCELLED = 'lightning_invoice_cancelled';
    public const EVENT_TYPE_DIRECT_DEBIT_INITIATE = 'direct_debit_initiate';
    public const EVENT_TYPE_DIRECT_DEBIT_CREATE = 'direct_debit_create';
    public const EVENT_TYPE_DIRECT_DEBIT_STATE_CHANGE = 'direct_debit_state_change';
    public const EVENT_TYPE_DIRECT_DEBIT_PAID = 'direct_debit_paid';
    public const EVENT_TYPE_DIRECT_DEBIT_FAILED = 'direct_debit_failed';
    public const CURRENCY_NONE = 'NONE';
    public const CURRENCY_GBP = 'GBP';
    public const CURRENCY_EUR = 'EUR';
    public const CURRENCY_BTC = 'BTC';
    public const PAYMENT_PROCESSOR_NAME_NONE = 'None';
    public const PAYMENT_PROCESSOR_NAME_CYBER_SOURCE = 'CyberSource';
    public const PAYMENT_PROCESSOR_NAME_CHECKOUT = 'Checkout';
    public const PAYMENT_PROCESSOR_NAME_STRIPE = 'Stripe';
    public const PAYMENT_PROCESSOR_NAME_MODULR = 'Modulr';
    public const PAYMENT_PROCESSOR_NAME_PLAID = 'Plaid';
    public const PAYMENT_PROCESSOR_NAME_YAPILY = 'Yapily';
    public const PAYMENT_PROCESSOR_NAME_NOFRIXION = 'Nofrixion';
    public const PAYMENT_PROCESSOR_NAME_BITCOIN = 'Bitcoin';
    public const PAYMENT_PROCESSOR_NAME_BITCOIN_TESTNET = 'BitcoinTestnet';
    public const PAYMENT_PROCESSOR_NAME_BANKING_CIRCLE = 'BankingCircle';
    public const PAYMENT_PROCESSOR_NAME_BANKING_CIRCLE_AGENCY = 'BankingCircleAgency';
    public const PAYMENT_PROCESSOR_NAME_SIMULATOR = 'Simulator';
    public const PAYMENT_PROCESSOR_NAME_LIGHTNING = 'Lightning';
    public const PAYMENT_PROCESSOR_NAME_LIGHTNING_TESTNET = 'LightningTestnet';
    public const PAYMENT_PROCESSOR_NAME_BANKING_CIRCLE_DIRECT_DEBIT = 'BankingCircleDirectDebit';
    public const PAYMENT_PROCESSOR_NAME_TRIBE = 'Tribe';
    public const WALLET_NAME_APPLE_PAY = 'ApplePay';
    public const WALLET_NAME_GOOGLE_PAY = 'GooglePay';
    public const PAYER_CURRENCY_NONE = 'NONE';
    public const PAYER_CURRENCY_GBP = 'GBP';
    public const PAYER_CURRENCY_EUR = 'EUR';
    public const PAYER_CURRENCY_BTC = 'BTC';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventTypeAllowableValues()
    {
        return [
            self::EVENT_TYPE_UNKNOWN,
            self::EVENT_TYPE_CARD_PAYER_AUTHENTICATION_SETUP,
            self::EVENT_TYPE_CARD_AUTHORIZATION,
            self::EVENT_TYPE_CARD_SALE,
            self::EVENT_TYPE_CARD_CAPTURE,
            self::EVENT_TYPE_CARD_VOID,
            self::EVENT_TYPE_PISP_INITIATE,
            self::EVENT_TYPE_PISP_CALLBACK,
            self::EVENT_TYPE_LIGHTNING_INVOICE_CREATED,
            self::EVENT_TYPE_LIGHTNING_INVOICE_PAID,
            self::EVENT_TYPE_CARD_PAYER_AUTHENTICATION_FAILURE,
            self::EVENT_TYPE_PISP_WEBHOOK,
            self::EVENT_TYPE_PISP_SETTLE,
            self::EVENT_TYPE_PISP_SETTLE_FAILURE,
            self::EVENT_TYPE_PISP_REFUND_INITIATED,
            self::EVENT_TYPE_PISP_REFUND_SETTLED,
            self::EVENT_TYPE_PISP_REFUND_CANCELLED,
            self::EVENT_TYPE_CARD_WEBHOOK,
            self::EVENT_TYPE_CARD_REFUND,
            self::EVENT_TYPE_LIGHTNING_INVOICE_EXPIRED,
            self::EVENT_TYPE_LIGHTNING_INVOICE_CANCELLED,
            self::EVENT_TYPE_DIRECT_DEBIT_INITIATE,
            self::EVENT_TYPE_DIRECT_DEBIT_CREATE,
            self::EVENT_TYPE_DIRECT_DEBIT_STATE_CHANGE,
            self::EVENT_TYPE_DIRECT_DEBIT_PAID,
            self::EVENT_TYPE_DIRECT_DEBIT_FAILED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_NONE,
            self::CURRENCY_GBP,
            self::CURRENCY_EUR,
            self::CURRENCY_BTC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentProcessorNameAllowableValues()
    {
        return [
            self::PAYMENT_PROCESSOR_NAME_NONE,
            self::PAYMENT_PROCESSOR_NAME_CYBER_SOURCE,
            self::PAYMENT_PROCESSOR_NAME_CHECKOUT,
            self::PAYMENT_PROCESSOR_NAME_STRIPE,
            self::PAYMENT_PROCESSOR_NAME_MODULR,
            self::PAYMENT_PROCESSOR_NAME_PLAID,
            self::PAYMENT_PROCESSOR_NAME_YAPILY,
            self::PAYMENT_PROCESSOR_NAME_NOFRIXION,
            self::PAYMENT_PROCESSOR_NAME_BITCOIN,
            self::PAYMENT_PROCESSOR_NAME_BITCOIN_TESTNET,
            self::PAYMENT_PROCESSOR_NAME_BANKING_CIRCLE,
            self::PAYMENT_PROCESSOR_NAME_BANKING_CIRCLE_AGENCY,
            self::PAYMENT_PROCESSOR_NAME_SIMULATOR,
            self::PAYMENT_PROCESSOR_NAME_LIGHTNING,
            self::PAYMENT_PROCESSOR_NAME_LIGHTNING_TESTNET,
            self::PAYMENT_PROCESSOR_NAME_BANKING_CIRCLE_DIRECT_DEBIT,
            self::PAYMENT_PROCESSOR_NAME_TRIBE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWalletNameAllowableValues()
    {
        return [
            self::WALLET_NAME_APPLE_PAY,
            self::WALLET_NAME_GOOGLE_PAY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayerCurrencyAllowableValues()
    {
        return [
            self::PAYER_CURRENCY_NONE,
            self::PAYER_CURRENCY_GBP,
            self::PAYER_CURRENCY_EUR,
            self::PAYER_CURRENCY_BTC,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('payment_request_id', $data ?? [], null);
        $this->setIfExists('event_type', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('error_reason', $data ?? [], null);
        $this->setIfExists('error_message', $data ?? [], null);
        $this->setIfExists('raw_response', $data ?? [], null);
        $this->setIfExists('inserted', $data ?? [], null);
        $this->setIfExists('card_request_id', $data ?? [], null);
        $this->setIfExists('card_transaction_id', $data ?? [], null);
        $this->setIfExists('card_payer_authentication_reference_id', $data ?? [], null);
        $this->setIfExists('card_token_customer_id', $data ?? [], null);
        $this->setIfExists('card_authorization_response_id', $data ?? [], null);
        $this->setIfExists('lightning_invoice', $data ?? [], null);
        $this->setIfExists('pisp_payment_service_provider_id', $data ?? [], null);
        $this->setIfExists('pisp_payment_initiation_id', $data ?? [], null);
        $this->setIfExists('pisp_redirect_url', $data ?? [], null);
        $this->setIfExists('pisp_token', $data ?? [], null);
        $this->setIfExists('payment_processor_name', $data ?? [], null);
        $this->setIfExists('raw_response_hash', $data ?? [], null);
        $this->setIfExists('pisp_payment_lifecycle_id', $data ?? [], null);
        $this->setIfExists('reconciled_transaction_id', $data ?? [], null);
        $this->setIfExists('trace_id', $data ?? [], null);
        $this->setIfExists('pisp_bank_status', $data ?? [], null);
        $this->setIfExists('wallet_name', $data ?? [], null);
        $this->setIfExists('refund_payout_id', $data ?? [], null);
        $this->setIfExists('apple_pay_transaction_id', $data ?? [], null);
        $this->setIfExists('pisp_payment_institution_name', $data ?? [], null);
        $this->setIfExists('tokenised_card_id', $data ?? [], null);
        $this->setIfExists('origin_url', $data ?? [], null);
        $this->setIfExists('lightning_invoice_expires_at', $data ?? [], null);
        $this->setIfExists('lightning_invoice_r_hash', $data ?? [], null);
        $this->setIfExists('payer_currency', $data ?? [], null);
        $this->setIfExists('payer_amount', $data ?? [], null);
        $this->setIfExists('payer_exchange_rate', $data ?? [], null);
        $this->setIfExists('banking_circle_direct_debit_payment_id', $data ?? [], null);
        $this->setIfExists('banking_circle_direct_debit_payment_reference', $data ?? [], null);
        $this->setIfExists('do_simulate_settlement_failure', $data ?? [], null);
        $this->setIfExists('payment_request', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEventTypeAllowableValues();
        if (!is_null($this->container['event_type']) && !in_array($this->container['event_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_type', must be one of '%s'",
                $this->container['event_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentProcessorNameAllowableValues();
        if (!is_null($this->container['payment_processor_name']) && !in_array($this->container['payment_processor_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_processor_name', must be one of '%s'",
                $this->container['payment_processor_name'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWalletNameAllowableValues();
        if (!is_null($this->container['wallet_name']) && !in_array($this->container['wallet_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wallet_name', must be one of '%s'",
                $this->container['wallet_name'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPayerCurrencyAllowableValues();
        if (!is_null($this->container['payer_currency']) && !in_array($this->container['payer_currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payer_currency', must be one of '%s'",
                $this->container['payer_currency'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets payment_request_id
     *
     * @return string|null
     */
    public function getPaymentRequestId()
    {
        return $this->container['payment_request_id'];
    }

    /**
     * Sets payment_request_id
     *
     * @param string|null $payment_request_id payment_request_id
     *
     * @return self
     */
    public function setPaymentRequestId($payment_request_id)
    {
        if (is_null($payment_request_id)) {
            throw new \InvalidArgumentException('non-nullable payment_request_id cannot be null');
        }
        $this->container['payment_request_id'] = $payment_request_id;

        return $this;
    }

    /**
     * Gets event_type
     *
     * @return string|null
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     *
     * @param string|null $event_type event_type
     *
     * @return self
     */
    public function setEventType($event_type)
    {
        if (is_null($event_type)) {
            throw new \InvalidArgumentException('non-nullable event_type cannot be null');
        }
        $allowedValues = $this->getEventTypeAllowableValues();
        if (!in_array($event_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_type', must be one of '%s'",
                    $event_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets error_reason
     *
     * @return string|null
     */
    public function getErrorReason()
    {
        return $this->container['error_reason'];
    }

    /**
     * Sets error_reason
     *
     * @param string|null $error_reason error_reason
     *
     * @return self
     */
    public function setErrorReason($error_reason)
    {
        if (is_null($error_reason)) {
            array_push($this->openAPINullablesSetToNull, 'error_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error_reason'] = $error_reason;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string|null
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string|null $error_message error_message
     *
     * @return self
     */
    public function setErrorMessage($error_message)
    {
        if (is_null($error_message)) {
            array_push($this->openAPINullablesSetToNull, 'error_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets raw_response
     *
     * @return string|null
     */
    public function getRawResponse()
    {
        return $this->container['raw_response'];
    }

    /**
     * Sets raw_response
     *
     * @param string|null $raw_response raw_response
     *
     * @return self
     */
    public function setRawResponse($raw_response)
    {
        if (is_null($raw_response)) {
            array_push($this->openAPINullablesSetToNull, 'raw_response');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('raw_response', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['raw_response'] = $raw_response;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime|null
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime|null $inserted inserted
     *
     * @return self
     */
    public function setInserted($inserted)
    {
        if (is_null($inserted)) {
            throw new \InvalidArgumentException('non-nullable inserted cannot be null');
        }
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets card_request_id
     *
     * @return string|null
     */
    public function getCardRequestId()
    {
        return $this->container['card_request_id'];
    }

    /**
     * Sets card_request_id
     *
     * @param string|null $card_request_id card_request_id
     *
     * @return self
     */
    public function setCardRequestId($card_request_id)
    {
        if (is_null($card_request_id)) {
            array_push($this->openAPINullablesSetToNull, 'card_request_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_request_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_request_id'] = $card_request_id;

        return $this;
    }

    /**
     * Gets card_transaction_id
     *
     * @return string|null
     */
    public function getCardTransactionId()
    {
        return $this->container['card_transaction_id'];
    }

    /**
     * Sets card_transaction_id
     *
     * @param string|null $card_transaction_id card_transaction_id
     *
     * @return self
     */
    public function setCardTransactionId($card_transaction_id)
    {
        if (is_null($card_transaction_id)) {
            array_push($this->openAPINullablesSetToNull, 'card_transaction_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_transaction_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_transaction_id'] = $card_transaction_id;

        return $this;
    }

    /**
     * Gets card_payer_authentication_reference_id
     *
     * @return string|null
     */
    public function getCardPayerAuthenticationReferenceId()
    {
        return $this->container['card_payer_authentication_reference_id'];
    }

    /**
     * Sets card_payer_authentication_reference_id
     *
     * @param string|null $card_payer_authentication_reference_id card_payer_authentication_reference_id
     *
     * @return self
     */
    public function setCardPayerAuthenticationReferenceId($card_payer_authentication_reference_id)
    {
        if (is_null($card_payer_authentication_reference_id)) {
            array_push($this->openAPINullablesSetToNull, 'card_payer_authentication_reference_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_payer_authentication_reference_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_payer_authentication_reference_id'] = $card_payer_authentication_reference_id;

        return $this;
    }

    /**
     * Gets card_token_customer_id
     *
     * @return string|null
     */
    public function getCardTokenCustomerId()
    {
        return $this->container['card_token_customer_id'];
    }

    /**
     * Sets card_token_customer_id
     *
     * @param string|null $card_token_customer_id card_token_customer_id
     *
     * @return self
     */
    public function setCardTokenCustomerId($card_token_customer_id)
    {
        if (is_null($card_token_customer_id)) {
            array_push($this->openAPINullablesSetToNull, 'card_token_customer_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_token_customer_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_token_customer_id'] = $card_token_customer_id;

        return $this;
    }

    /**
     * Gets card_authorization_response_id
     *
     * @return string|null
     */
    public function getCardAuthorizationResponseId()
    {
        return $this->container['card_authorization_response_id'];
    }

    /**
     * Sets card_authorization_response_id
     *
     * @param string|null $card_authorization_response_id card_authorization_response_id
     *
     * @return self
     */
    public function setCardAuthorizationResponseId($card_authorization_response_id)
    {
        if (is_null($card_authorization_response_id)) {
            array_push($this->openAPINullablesSetToNull, 'card_authorization_response_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_authorization_response_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_authorization_response_id'] = $card_authorization_response_id;

        return $this;
    }

    /**
     * Gets lightning_invoice
     *
     * @return string|null
     */
    public function getLightningInvoice()
    {
        return $this->container['lightning_invoice'];
    }

    /**
     * Sets lightning_invoice
     *
     * @param string|null $lightning_invoice lightning_invoice
     *
     * @return self
     */
    public function setLightningInvoice($lightning_invoice)
    {
        if (is_null($lightning_invoice)) {
            array_push($this->openAPINullablesSetToNull, 'lightning_invoice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lightning_invoice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lightning_invoice'] = $lightning_invoice;

        return $this;
    }

    /**
     * Gets pisp_payment_service_provider_id
     *
     * @return string|null
     */
    public function getPispPaymentServiceProviderId()
    {
        return $this->container['pisp_payment_service_provider_id'];
    }

    /**
     * Sets pisp_payment_service_provider_id
     *
     * @param string|null $pisp_payment_service_provider_id pisp_payment_service_provider_id
     *
     * @return self
     */
    public function setPispPaymentServiceProviderId($pisp_payment_service_provider_id)
    {
        if (is_null($pisp_payment_service_provider_id)) {
            array_push($this->openAPINullablesSetToNull, 'pisp_payment_service_provider_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pisp_payment_service_provider_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pisp_payment_service_provider_id'] = $pisp_payment_service_provider_id;

        return $this;
    }

    /**
     * Gets pisp_payment_initiation_id
     *
     * @return string|null
     */
    public function getPispPaymentInitiationId()
    {
        return $this->container['pisp_payment_initiation_id'];
    }

    /**
     * Sets pisp_payment_initiation_id
     *
     * @param string|null $pisp_payment_initiation_id pisp_payment_initiation_id
     *
     * @return self
     */
    public function setPispPaymentInitiationId($pisp_payment_initiation_id)
    {
        if (is_null($pisp_payment_initiation_id)) {
            array_push($this->openAPINullablesSetToNull, 'pisp_payment_initiation_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pisp_payment_initiation_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pisp_payment_initiation_id'] = $pisp_payment_initiation_id;

        return $this;
    }

    /**
     * Gets pisp_redirect_url
     *
     * @return string|null
     */
    public function getPispRedirectUrl()
    {
        return $this->container['pisp_redirect_url'];
    }

    /**
     * Sets pisp_redirect_url
     *
     * @param string|null $pisp_redirect_url pisp_redirect_url
     *
     * @return self
     */
    public function setPispRedirectUrl($pisp_redirect_url)
    {
        if (is_null($pisp_redirect_url)) {
            array_push($this->openAPINullablesSetToNull, 'pisp_redirect_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pisp_redirect_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pisp_redirect_url'] = $pisp_redirect_url;

        return $this;
    }

    /**
     * Gets pisp_token
     *
     * @return string|null
     */
    public function getPispToken()
    {
        return $this->container['pisp_token'];
    }

    /**
     * Sets pisp_token
     *
     * @param string|null $pisp_token pisp_token
     *
     * @return self
     */
    public function setPispToken($pisp_token)
    {
        if (is_null($pisp_token)) {
            array_push($this->openAPINullablesSetToNull, 'pisp_token');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pisp_token', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pisp_token'] = $pisp_token;

        return $this;
    }

    /**
     * Gets payment_processor_name
     *
     * @return string|null
     */
    public function getPaymentProcessorName()
    {
        return $this->container['payment_processor_name'];
    }

    /**
     * Sets payment_processor_name
     *
     * @param string|null $payment_processor_name Lists the supported card and PIS processors.
     *
     * @return self
     */
    public function setPaymentProcessorName($payment_processor_name)
    {
        if (is_null($payment_processor_name)) {
            throw new \InvalidArgumentException('non-nullable payment_processor_name cannot be null');
        }
        $allowedValues = $this->getPaymentProcessorNameAllowableValues();
        if (!in_array($payment_processor_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_processor_name', must be one of '%s'",
                    $payment_processor_name,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_processor_name'] = $payment_processor_name;

        return $this;
    }

    /**
     * Gets raw_response_hash
     *
     * @return string|null
     */
    public function getRawResponseHash()
    {
        return $this->container['raw_response_hash'];
    }

    /**
     * Sets raw_response_hash
     *
     * @param string|null $raw_response_hash raw_response_hash
     *
     * @return self
     */
    public function setRawResponseHash($raw_response_hash)
    {
        if (is_null($raw_response_hash)) {
            array_push($this->openAPINullablesSetToNull, 'raw_response_hash');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('raw_response_hash', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['raw_response_hash'] = $raw_response_hash;

        return $this;
    }

    /**
     * Gets pisp_payment_lifecycle_id
     *
     * @return string|null
     */
    public function getPispPaymentLifecycleId()
    {
        return $this->container['pisp_payment_lifecycle_id'];
    }

    /**
     * Sets pisp_payment_lifecycle_id
     *
     * @param string|null $pisp_payment_lifecycle_id pisp_payment_lifecycle_id
     *
     * @return self
     */
    public function setPispPaymentLifecycleId($pisp_payment_lifecycle_id)
    {
        if (is_null($pisp_payment_lifecycle_id)) {
            array_push($this->openAPINullablesSetToNull, 'pisp_payment_lifecycle_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pisp_payment_lifecycle_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pisp_payment_lifecycle_id'] = $pisp_payment_lifecycle_id;

        return $this;
    }

    /**
     * Gets reconciled_transaction_id
     *
     * @return string|null
     */
    public function getReconciledTransactionId()
    {
        return $this->container['reconciled_transaction_id'];
    }

    /**
     * Sets reconciled_transaction_id
     *
     * @param string|null $reconciled_transaction_id reconciled_transaction_id
     *
     * @return self
     */
    public function setReconciledTransactionId($reconciled_transaction_id)
    {
        if (is_null($reconciled_transaction_id)) {
            array_push($this->openAPINullablesSetToNull, 'reconciled_transaction_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reconciled_transaction_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reconciled_transaction_id'] = $reconciled_transaction_id;

        return $this;
    }

    /**
     * Gets trace_id
     *
     * @return string|null
     */
    public function getTraceId()
    {
        return $this->container['trace_id'];
    }

    /**
     * Sets trace_id
     *
     * @param string|null $trace_id trace_id
     *
     * @return self
     */
    public function setTraceId($trace_id)
    {
        if (is_null($trace_id)) {
            array_push($this->openAPINullablesSetToNull, 'trace_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trace_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trace_id'] = $trace_id;

        return $this;
    }

    /**
     * Gets pisp_bank_status
     *
     * @return string|null
     */
    public function getPispBankStatus()
    {
        return $this->container['pisp_bank_status'];
    }

    /**
     * Sets pisp_bank_status
     *
     * @param string|null $pisp_bank_status pisp_bank_status
     *
     * @return self
     */
    public function setPispBankStatus($pisp_bank_status)
    {
        if (is_null($pisp_bank_status)) {
            array_push($this->openAPINullablesSetToNull, 'pisp_bank_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pisp_bank_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pisp_bank_status'] = $pisp_bank_status;

        return $this;
    }

    /**
     * Gets wallet_name
     *
     * @return string|null
     */
    public function getWalletName()
    {
        return $this->container['wallet_name'];
    }

    /**
     * Sets wallet_name
     *
     * @param string|null $wallet_name wallet_name
     *
     * @return self
     */
    public function setWalletName($wallet_name)
    {
        if (is_null($wallet_name)) {
            array_push($this->openAPINullablesSetToNull, 'wallet_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wallet_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getWalletNameAllowableValues();
        if (!is_null($wallet_name) && !in_array($wallet_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wallet_name', must be one of '%s'",
                    $wallet_name,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wallet_name'] = $wallet_name;

        return $this;
    }

    /**
     * Gets refund_payout_id
     *
     * @return string|null
     */
    public function getRefundPayoutId()
    {
        return $this->container['refund_payout_id'];
    }

    /**
     * Sets refund_payout_id
     *
     * @param string|null $refund_payout_id refund_payout_id
     *
     * @return self
     */
    public function setRefundPayoutId($refund_payout_id)
    {
        if (is_null($refund_payout_id)) {
            array_push($this->openAPINullablesSetToNull, 'refund_payout_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refund_payout_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['refund_payout_id'] = $refund_payout_id;

        return $this;
    }

    /**
     * Gets apple_pay_transaction_id
     *
     * @return string|null
     */
    public function getApplePayTransactionId()
    {
        return $this->container['apple_pay_transaction_id'];
    }

    /**
     * Sets apple_pay_transaction_id
     *
     * @param string|null $apple_pay_transaction_id apple_pay_transaction_id
     *
     * @return self
     */
    public function setApplePayTransactionId($apple_pay_transaction_id)
    {
        if (is_null($apple_pay_transaction_id)) {
            array_push($this->openAPINullablesSetToNull, 'apple_pay_transaction_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('apple_pay_transaction_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['apple_pay_transaction_id'] = $apple_pay_transaction_id;

        return $this;
    }

    /**
     * Gets pisp_payment_institution_name
     *
     * @return string|null
     */
    public function getPispPaymentInstitutionName()
    {
        return $this->container['pisp_payment_institution_name'];
    }

    /**
     * Sets pisp_payment_institution_name
     *
     * @param string|null $pisp_payment_institution_name pisp_payment_institution_name
     *
     * @return self
     */
    public function setPispPaymentInstitutionName($pisp_payment_institution_name)
    {
        if (is_null($pisp_payment_institution_name)) {
            array_push($this->openAPINullablesSetToNull, 'pisp_payment_institution_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pisp_payment_institution_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pisp_payment_institution_name'] = $pisp_payment_institution_name;

        return $this;
    }

    /**
     * Gets tokenised_card_id
     *
     * @return string|null
     */
    public function getTokenisedCardId()
    {
        return $this->container['tokenised_card_id'];
    }

    /**
     * Sets tokenised_card_id
     *
     * @param string|null $tokenised_card_id tokenised_card_id
     *
     * @return self
     */
    public function setTokenisedCardId($tokenised_card_id)
    {
        if (is_null($tokenised_card_id)) {
            array_push($this->openAPINullablesSetToNull, 'tokenised_card_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tokenised_card_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tokenised_card_id'] = $tokenised_card_id;

        return $this;
    }

    /**
     * Gets origin_url
     *
     * @return string|null
     */
    public function getOriginUrl()
    {
        return $this->container['origin_url'];
    }

    /**
     * Sets origin_url
     *
     * @param string|null $origin_url origin_url
     *
     * @return self
     */
    public function setOriginUrl($origin_url)
    {
        if (is_null($origin_url)) {
            array_push($this->openAPINullablesSetToNull, 'origin_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('origin_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['origin_url'] = $origin_url;

        return $this;
    }

    /**
     * Gets lightning_invoice_expires_at
     *
     * @return \DateTime|null
     */
    public function getLightningInvoiceExpiresAt()
    {
        return $this->container['lightning_invoice_expires_at'];
    }

    /**
     * Sets lightning_invoice_expires_at
     *
     * @param \DateTime|null $lightning_invoice_expires_at lightning_invoice_expires_at
     *
     * @return self
     */
    public function setLightningInvoiceExpiresAt($lightning_invoice_expires_at)
    {
        if (is_null($lightning_invoice_expires_at)) {
            array_push($this->openAPINullablesSetToNull, 'lightning_invoice_expires_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lightning_invoice_expires_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lightning_invoice_expires_at'] = $lightning_invoice_expires_at;

        return $this;
    }

    /**
     * Gets lightning_invoice_r_hash
     *
     * @return string|null
     */
    public function getLightningInvoiceRHash()
    {
        return $this->container['lightning_invoice_r_hash'];
    }

    /**
     * Sets lightning_invoice_r_hash
     *
     * @param string|null $lightning_invoice_r_hash lightning_invoice_r_hash
     *
     * @return self
     */
    public function setLightningInvoiceRHash($lightning_invoice_r_hash)
    {
        if (is_null($lightning_invoice_r_hash)) {
            array_push($this->openAPINullablesSetToNull, 'lightning_invoice_r_hash');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lightning_invoice_r_hash', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lightning_invoice_r_hash'] = $lightning_invoice_r_hash;

        return $this;
    }

    /**
     * Gets payer_currency
     *
     * @return string|null
     */
    public function getPayerCurrency()
    {
        return $this->container['payer_currency'];
    }

    /**
     * Sets payer_currency
     *
     * @param string|null $payer_currency payer_currency
     *
     * @return self
     */
    public function setPayerCurrency($payer_currency)
    {
        if (is_null($payer_currency)) {
            array_push($this->openAPINullablesSetToNull, 'payer_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payer_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getPayerCurrencyAllowableValues();
        if (!is_null($payer_currency) && !in_array($payer_currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payer_currency', must be one of '%s'",
                    $payer_currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payer_currency'] = $payer_currency;

        return $this;
    }

    /**
     * Gets payer_amount
     *
     * @return float|null
     */
    public function getPayerAmount()
    {
        return $this->container['payer_amount'];
    }

    /**
     * Sets payer_amount
     *
     * @param float|null $payer_amount payer_amount
     *
     * @return self
     */
    public function setPayerAmount($payer_amount)
    {
        if (is_null($payer_amount)) {
            array_push($this->openAPINullablesSetToNull, 'payer_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payer_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payer_amount'] = $payer_amount;

        return $this;
    }

    /**
     * Gets payer_exchange_rate
     *
     * @return float|null
     */
    public function getPayerExchangeRate()
    {
        return $this->container['payer_exchange_rate'];
    }

    /**
     * Sets payer_exchange_rate
     *
     * @param float|null $payer_exchange_rate payer_exchange_rate
     *
     * @return self
     */
    public function setPayerExchangeRate($payer_exchange_rate)
    {
        if (is_null($payer_exchange_rate)) {
            array_push($this->openAPINullablesSetToNull, 'payer_exchange_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payer_exchange_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payer_exchange_rate'] = $payer_exchange_rate;

        return $this;
    }

    /**
     * Gets banking_circle_direct_debit_payment_id
     *
     * @return string|null
     */
    public function getBankingCircleDirectDebitPaymentId()
    {
        return $this->container['banking_circle_direct_debit_payment_id'];
    }

    /**
     * Sets banking_circle_direct_debit_payment_id
     *
     * @param string|null $banking_circle_direct_debit_payment_id banking_circle_direct_debit_payment_id
     *
     * @return self
     */
    public function setBankingCircleDirectDebitPaymentId($banking_circle_direct_debit_payment_id)
    {
        if (is_null($banking_circle_direct_debit_payment_id)) {
            array_push($this->openAPINullablesSetToNull, 'banking_circle_direct_debit_payment_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('banking_circle_direct_debit_payment_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['banking_circle_direct_debit_payment_id'] = $banking_circle_direct_debit_payment_id;

        return $this;
    }

    /**
     * Gets banking_circle_direct_debit_payment_reference
     *
     * @return string|null
     */
    public function getBankingCircleDirectDebitPaymentReference()
    {
        return $this->container['banking_circle_direct_debit_payment_reference'];
    }

    /**
     * Sets banking_circle_direct_debit_payment_reference
     *
     * @param string|null $banking_circle_direct_debit_payment_reference banking_circle_direct_debit_payment_reference
     *
     * @return self
     */
    public function setBankingCircleDirectDebitPaymentReference($banking_circle_direct_debit_payment_reference)
    {
        if (is_null($banking_circle_direct_debit_payment_reference)) {
            array_push($this->openAPINullablesSetToNull, 'banking_circle_direct_debit_payment_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('banking_circle_direct_debit_payment_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['banking_circle_direct_debit_payment_reference'] = $banking_circle_direct_debit_payment_reference;

        return $this;
    }

    /**
     * Gets do_simulate_settlement_failure
     *
     * @return bool|null
     */
    public function getDoSimulateSettlementFailure()
    {
        return $this->container['do_simulate_settlement_failure'];
    }

    /**
     * Sets do_simulate_settlement_failure
     *
     * @param bool|null $do_simulate_settlement_failure do_simulate_settlement_failure
     *
     * @return self
     */
    public function setDoSimulateSettlementFailure($do_simulate_settlement_failure)
    {
        if (is_null($do_simulate_settlement_failure)) {
            throw new \InvalidArgumentException('non-nullable do_simulate_settlement_failure cannot be null');
        }
        $this->container['do_simulate_settlement_failure'] = $do_simulate_settlement_failure;

        return $this;
    }

    /**
     * Gets payment_request
     *
     * @return \Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestEntity|null
     */
    public function getPaymentRequest()
    {
        return $this->container['payment_request'];
    }

    /**
     * Sets payment_request
     *
     * @param \Nofrixion\Client\Model\NoFrixionDataModelsPaymentRequestEntity|null $payment_request payment_request
     *
     * @return self
     */
    public function setPaymentRequest($payment_request)
    {
        if (is_null($payment_request)) {
            throw new \InvalidArgumentException('non-nullable payment_request cannot be null');
        }
        $this->container['payment_request'] = $payment_request;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


